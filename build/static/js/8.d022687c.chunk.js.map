{"version":3,"sources":["container/TreeManager/InsertTreeModal.js","container/TreeManager/TreeManager.js","container/ApiManager/config.js","container/ApiManager/Insert/SearchForm.js","container/ApiManager/Insert/index.js"],"names":["FormItem","Item","InsertTreeModal","inject","observer","props","state","this","form","validateFieldsAndScroll","err","values","TreeManagerStore","insertTreeModule","hideTreeModal","n","e","target","value","changeTableRequestData","getFieldDecorator","treeModalVisible","tableRequestData","modalName","destroyOnClose","title","width","visible","onOk","okModal","bind","onCancel","hideModal","okText","cancelText","className","layout","formItemLayout","label","initialValue","name","rules","required","message","style","placeholder","onChange","inputChange","Component","create","TreeNode","TreeManager","onSelect","selectedKeys","info","console","log","appId","node","dataRef","moduleId","appName","moduleName","pageType","TestCaseManagerStore","initData","ApiManagerStore","setTreeParams","handleAddTree","id","parentId","stopPropagation","showTreeModal","type","handleEditTree","parentIdF","handleDeleteTree","deleteTree","getNodeTitle","level","onClick","theme","onConfirm","onLoadData","treeNode","a","children","getTreeModuleDataSouce","renderTreeNodes","data","map","item","key","getTreeAppDataSouce","treeAppDataSource","maxHeight","loadData","columns","context","dataIndex","render","text","record","apiMethodName","length","substr","str","creatorName","apiClassName","editTimeStr","content","color","row","updateHref","searchCaseHref","insertCaseHref","href","insertColumns","editable","desc","insertApi","SearchForm","handleSearch","preventDefault","fetchApiByGAV","labelCol","span","wrapperCol","backgroundColor","border","onSubmit","htmlType","config","top","Index","showInput","setState","inputVisible","input","focus","handleClose","removedTag","tags","filter","tag","handleInputChange","inputValue","handleInputConfirm","indexOf","saveInputRef","handleSave","newData","insertDataSource","index","findIndex","splice","batchInsertApi","selectedRowKeysApis","warn","selectedRowsApis","setBreadcrumb","array","push","components","body","EditableFormRow","cell","EditableCellForm","columnsValue","col","onCell","rowSelection","selectedRowKeys","selectedRows","treeParams","marginBottom","display","rowClassName","bordered","dataSource","EditableContext","Provider","React","createContext","editing","toggleEdit","save","validateFields","error","currentTarget","renderCell","margin","ref","onPressEnter","onBlur","restProps","Consumer"],"mappings":"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","file":"static/js/8.d022687c.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport { observer, inject } from 'mobx-react';\nimport {Row, Form, Input, Modal} from 'antd';\nconst FormItem = Form.Item;\n\n\n@inject('TreeManagerStore')\n@observer\nclass InsertTreeModal extends Component{\n    constructor(props){\n        super(props);\n        this.state={\n        }\n    }\n\n    okModal(){\n        this.props.form.validateFieldsAndScroll((err, values) => {\n            if (!err) {\n                this.props.TreeManagerStore.insertTreeModule();\n            }\n        });\n    }\n\n    hideModal(){\n        this.props.TreeManagerStore.hideTreeModal();\n    }\n    /**\n     * 输入框和单选按钮产生的change事件\n     * @param n\n     * @param e\n     */\n    inputChange(n,e) {\n        let obj={};\n        obj[n]=e.target.value;\n        this.props.TreeManagerStore.changeTableRequestData(n,e.target.value);\n    }\n\n    render(){\n        const { getFieldDecorator } = this.props.form;\n        const { treeModalVisible,tableRequestData,modalName} = this.props\n        return (\n            <Modal\n                destroyOnClose\n                title={modalName}\n                width=\"900px\"\n                visible={treeModalVisible}\n                onOk={this.okModal.bind(this)}\n                onCancel={this.hideModal.bind(this)}\n                okText=\"保存\"\n                cancelText=\"取消\"\n                className=\"model\" width={500} >\n\n                <Form  layout=\"inline\" className=\"ant-advanced-search-form p-xs pb-0\">\n                    <Row>\n                        <FormItem {...this.formItemLayout} label=\"模块名称\" >\n                            {getFieldDecorator('name', {\n                                initialValue: tableRequestData.name,\n                                rules: [{ required: true, message: '请填写模块名称!' }],\n                            })(\n                                <Input  style={{ width: 250 }} placeholder='请填写模块名称!' onChange={this.inputChange.bind(this,'name')}/>\n                            )}\n                        </FormItem>\n                    </Row>\n                </Form>\n            </Modal>\n        )\n    }\n}\n\nexport default Form.create()(InsertTreeModal)\n","import React, {Component} from 'react';\nimport { observable, action, computed } from 'mobx';\nimport { observer, inject } from 'mobx-react';\nimport {  Icon,Tree, Popconfirm} from 'antd';\nimport InsertTreeModal from './InsertTreeModal';\nimport TreeManagerStore from \"../../stores/TreeManager/TreeManagerStore\";\n\nconst { TreeNode } = Tree;\n\n@inject('TreeManagerStore','TestCaseManagerStore','ApiManagerStore')\n@observer\nclass TreeManager extends Component {\n    componentDidMount() {\n        this.props.TreeManagerStore.getTreeAppDataSouce();\n    }\n    constructor(props){\n        super(props);\n    }\n    onSelect = (selectedKeys, info) => {\n        console.log(info)\n        let appId = info.node.props.dataRef.appId\n        let moduleId = info.node.props.dataRef.moduleId\n        let appName = info.node.props.dataRef.appName\n        let moduleName = info.node.props.dataRef.moduleName\n        let pageType = this.props.pageType\n        if(pageType == 'case'){\n            this.props.TestCaseManagerStore.initData(1,appId,moduleId)\n        }else if(pageType == \"api\"){\n            this.props.ApiManagerStore.initData(1,appId,moduleId)\n        }else if(pageType == \"insertApi\"){\n            this.props.ApiManagerStore.setTreeParams(appId,moduleId,appName,moduleName)\n        }else if(pageType == \"updateApi\"){\n            this.props.ApiManagerStore.setTreeParams(appId,moduleId,appName,moduleName)\n        }\n    };\n    /**\n     * 新增节点\n     */\n    handleAddTree = (e,id,parentId,appId) => {\n        e.stopPropagation();\n        if (id) {\n            console.log(e.target.value)\n            this.props.TreeManagerStore.showTreeModal({\n                moduleName:\"添加模块\",\n                parentId:parentId,\n                appId:appId,\n                type:\"insert\"\n            })\n        }\n    };\n    /**\n     * 编辑节点\n     */\n    handleEditTree = (e, name,id,parentIdF,appId) => {\n        e.stopPropagation();\n        if (id) {\n            this.props.TreeManagerStore.showTreeModal({\n                id:id,\n                moduleName:\"修改模块\",\n                parentIdF:parentIdF,\n                appId:appId,\n                name:name,\n                type:\"update\"\n            });\n        }\n    };\n    /**\n     * 编辑节点\n     */\n    handleDeleteTree = (id,appId,parentId) => {\n        if (id) {\n            this.props.TreeManagerStore.deleteTree(id,appId,parentId)\n        }\n    };\n    /**\n     * 获取节点的title内容\n     */\n    getNodeTitle = (title, id, level,parentId,parentIdF,appId) => {\n        return (\n            <div className=\"tree-title\">\n                <span>\n                    {title}\n                </span>\n                <div className=\"tree-parent-div \">\n                    <span className=\"tree-span\" onClick={e => this.handleAddTree(e,id,parentId,appId)}>\n                       {level !== 4 &&\n                            <Icon type=\"plus-circle\" theme=\"outlined\"/>\n                       }\n                    </span>\n                    <span className=\"tree-span\"  onClick={e => this.handleEditTree(e, title,id,parentIdF,appId)}>\n                       {level != 1 &&\n                            <Icon type=\"form\" theme=\"outlined\" />\n                       }\n                    </span>\n                    <span className=\"tree-span\" >\n                         {level != 1 &&\n                              <Popconfirm title=\"确定删除此参数吗？\" onConfirm={() => this.handleDeleteTree(id,appId,parentId)}>\n                                 <Icon type=\"delete\" theme=\"outlined\"/>\n                              </Popconfirm>\n                         }\n                    </span>\n                </div>\n            </div>\n        );\n    };\n    onLoadData = async (treeNode) => {\n        if (treeNode.props.children) {\n            return;\n        }\n        this.props.TreeManagerStore.getTreeModuleDataSouce(treeNode.props.dataRef)\n    }\n\n    renderTreeNodes = (data, level) => {\n        return (\n            data.map(item => {\n                const title = this.getNodeTitle(item.title, item.id, level,item.parentId,item.parentIdF,item.appId);\n                if (item.children) {\n                    return (\n                        <TreeNode title={title} key={item.id} dataRef={item}>\n                            {this.renderTreeNodes(item.children,level + 1)}\n                        </TreeNode>\n                    );\n                }\n                return <TreeNode {...item} title={title} key={item.id} dataRef={item} />;\n            })\n        );\n    };\n\n    render(){\n        const {treeAppDataSource,treeModalVisible,tableRequestData,modalName} = this.props.TreeManagerStore\n        return(\n            <div style={{'maxHeight':this.props.maxHeight,'overflow-y':'auto' }}>\n                <Tree onSelect={this.onSelect} loadData={this.onLoadData}>{this.renderTreeNodes(treeAppDataSource,1)}</Tree>\n                <InsertTreeModal modalName={modalName} treeModalVisible={treeModalVisible} tableRequestData={tableRequestData}></InsertTreeModal>\n            </div>\n        )\n    }\n}\n\nexport default TreeManager;","import React  from 'react';\nimport { Icon,Tag,Input,Tooltip,Popconfirm,Popover} from 'antd';\nimport common from \"../../style/common.css\";\n\nexport const columns = (context) => [\n    {\n        title: '接口ID',\n        dataIndex: 'id',\n        key: 'id',\n        width:'8%'\n    },\n    {\n        title: '方法名',\n        dataIndex: 'apiMethodName',\n        key: 'apiMethodName',\n        width:'15%',\n        render:function(text, record){\n            var name = record.apiMethodName.length > 12 ? record.apiMethodName.substr(0,12) + '...' : record.apiMethodName;\n            let str = <div>\n                        <span>方法名：{record.apiMethodName}</span><br/>\n                        <span>创建人：{record.creatorName}</span><br/>\n                        <span>接口路径：{record.apiClassName}</span><br/>\n                        <span>更新时间：{record.editTimeStr}</span><br/>\n                        <span>应用：{record.appName}</span><br/>\n                        <span>模块：{record.moduleName}</span>\n                      </div>\n            return (\n                <span>\n                    <Popover content={str} >\n                        <font color=\"#d2a216\">{name}</font>\n                    </Popover>\n                </span>\n            )\n        }\n    },\n    {\n        title: '接口名',\n        dataIndex: 'name',\n        key: 'name',\n        width:'18%',\n        render:function(text, record){\n            var name = record.name.length > 20 ? record.name.substr(0,20) + '...' : record.name;\n            return (\n                <span  >\n                    <Popover content={record.name} >\n                        {name}\n                    </Popover>\n                </span>\n            )\n        }\n    },\n    {\n        title: '应用名',\n        dataIndex: 'appName',\n        key: 'appName',\n        width:'10%',\n    },\n    {\n        title: 'groupId',\n        dataIndex: 'groupId',\n        key: 'groupId',\n        width:'13%',\n    },\n    {\n        title: 'artifactId',\n        dataIndex: 'artifactId',\n        key: 'artifactId',\n        width:'13%',\n    },\n    {\n        title: '操作',\n        width: '22%',\n        key: 'operation',\n        render:(row,record) => {\n            let updateHref = \"/update_api?apiId=\" + record.id\n            let searchCaseHref = \"/testcase_manager?apiId=\" + record.id\n            let insertCaseHref = \"/edit_testcase?apiId=\" + record.id\n\n            return (\n                <span>\n                    <a href={updateHref} target=\"_blank\">修改接口</a>&nbsp;\n                    <a href={searchCaseHref} target=\"_blank\" className=\"vLine\"> 查看用例</a>&nbsp;\n                    <a href={insertCaseHref} target=\"_blank\" className=\"vLine\"> 添加用例</a>\n                </span>\n            )\n        }\n    }\n];\nexport const insertColumns = (context) => [\n    {\n        title: '接口路径',\n        dataIndex: 'apiClassName',\n        key: 'apiClassName',\n        width:'27%',\n        render:function(text, record){\n            var name = record.apiClassName.length > 30 ? record.apiClassName.substr(0,30) + '...' : record.apiClassName;\n            return (\n                <span  >\n                    <Popover content={record.apiClassName} >\n                        {name}\n                    </Popover>\n                </span>\n            )\n        }\n    },\n    {\n        title: '方法名',\n        dataIndex: 'apiMethodName',\n        key: 'apiMethodName',\n        width:'20%',\n        render:function(text, record){\n            var name = record.apiMethodName.length > 20 ? record.apiMethodName.substr(0,20) + '...' : record.apiMethodName;\n            return (\n                <span  >\n                    <Popover content={record.apiMethodName} >\n                        {name}\n                    </Popover>\n                </span>\n            )\n        }\n    },\n    {\n        title: '接口名',\n        dataIndex: 'name',\n        key: 'name',\n        width:'17%',\n        editable: true,\n        render:(row,record) => {\n            if(record.name != null){\n                return (\n                    <span>{record.name}</span>\n                )\n            }else{\n                return (\n                    <span><font color=\"orange\">无</font></span>\n                )\n            }\n        }\n    },\n    {\n        title: '描述',\n        dataIndex: 'desc',\n        key: 'desc',\n        width:'17%',\n        editable: true,\n        render:(row,record) => {\n            if(record.desc != null){\n                return (\n                    <span>{record.desc}</span>\n                )\n            }else{\n                return (\n                    <span><font color=\"orange\">无</font></span>\n                )\n            }\n        }\n    },\n    // {\n    //     title: '打标签',\n    //     dataIndex: 'tag',\n    //     key: 'tag',\n    //     width:'20%',\n        // render:(row,record) => {\n        //     const {tags,inputVisible, inputValue } = context.state;\n        //\n        //     return (\n        //         <div>\n        //             {tags.map((tag, index) => {\n        //                 const isLongTag = tag.length > 20;\n        //                 const tagElem = (\n        //                     <Tag key={tag} closable  onClose={() => context.handleClose(tag)}>\n        //                         {isLongTag ? `${tag.slice(0, 20)}...` : tag}\n        //                     </Tag>\n        //                 );\n        //                 return isLongTag ? (\n        //                     <Tooltip title={tag} key={tag}>\n        //                         {tagElem}\n        //                     </Tooltip>\n        //                 ) : (\n        //                     tagElem\n        //                 );\n        //             })}\n        //             {inputVisible && (\n        //                 <Input\n        //                 ref={context.saveInputRef}\n        //                 type=\"text\"\n        //                 size=\"small\"\n        //                 style={{ width: 78 }}\n        //                 value={inputValue}\n        //                 onChange={context.handleInputChange}\n        //                 onBlur={context.handleInputConfirm}\n        //                 onPressEnter={context.handleInputConfirm}\n        //                 />\n        //             )}\n        //             {!inputVisible && (\n        //                 <Tag onClick={context.showInput} style={{ background: '#fff', borderStyle: 'dashed' }}>\n        //                     <Icon type=\"plus\" /> New Tag\n        //                 </Tag>\n        //             )}\n        //         </div>\n        //     )\n        // }\n    // },\n    {\n        title: '操作',\n        width: '7%',\n        key: 'operation',\n        render:(row,record) => {\n            return (\n                <div>\n                    <span >\n                        <Popconfirm title=\"确定添加此接口吗？\" onConfirm={() => context.insertApi(record)} >\n                            <a href=\"#\" >添加</a>\n                        </Popconfirm>\n                    </span>\n                </div>\n            )\n        }\n    }\n\n]\n\n\n","import React, { Component } from 'react';\nimport { observer, inject } from 'mobx-react';\n\nimport { Table,Divider, Button, Alert, Select,Icon, Row, Col, Form, DatePicker, Input, Modal } from 'antd';\nimport Highlighter from 'react-highlight-words';\nimport common from \"../../../style/common.css\";\n\nconst FormItem = Form.Item;\n\n\n@inject('ApiManagerStore')\n@observer\nclass SearchForm extends Component{\n    constructor(props){\n        super(props);\n        this.state={\n        }\n    }\n\n    inputChange(n,e) {\n        this.props.ApiManagerStore.changeTableRequestData(n,e.target.value);\n    }\n\n    handleSearch = (e) => {\n        e.preventDefault();\n        this.props.form.validateFieldsAndScroll((err, values) => {\n            if (!err) {\n                this.props.ApiManagerStore.fetchApiByGAV(1);\n            }\n        });\n    }\n    formItemLayout = {\n        labelCol: { span: 8 },\n        wrapperCol: { span: 13 },\n    }\n    render(){\n        const { getFieldDecorator } = this.props.form;\n\n        return (\n            <div>\n                <Alert message=\"api包信息\" type=\"info\" style={{backgroundColor:'#c7e7ff',border:'0px','marginBottom':'5px'}}/>\n                <Form layout=\"inline\"  className=\"ant-advanced-search-form p-xs pb-0\" onSubmit={this.handleSearch}>\n                    <FormItem {...this.formItemLayout} label=\"groupId\">\n                        {getFieldDecorator('groupId', {\n                            rules: [{ required: true, message: '请填写groupId!' }],\n                        })(\n                            <Input placeholder=\"请输入groupId\"  onChange={this.inputChange.bind(this,'groupId')}/>\n                        )}\n                    </FormItem>\n                    <FormItem {...this.formItemLayout} label=\"artifactId\">\n                        {getFieldDecorator('artifactId', {\n                            rules: [{ required: true, message: '请填写artifactId!' }],\n                        })(\n                            <Input placeholder=\"请输入artifactId\"  onChange={this.inputChange.bind(this,'artifactId')}/>\n                        )}\n                    </FormItem>\n                    <FormItem {...this.formItemLayout} label=\"version\">\n                        {getFieldDecorator('version', {\n                            rules: [{ required: true, message: '请选择version' }],\n                        })(\n                            <Input placeholder=\"请输入version\" onChange={this.inputChange.bind(this,'version')}/>\n                        )}\n                    </FormItem>\n                    <Form.Item>\n                        <Button type=\"primary\" htmlType=\"submit\" >\n                            <Icon type=\"search\" /> 搜索\n                        </Button>\n                    </Form.Item>\n                </Form>\n            </div>\n        )\n    }\n}\n\nexport default Form.create()(SearchForm)\n\n","import React, { Component } from 'react';\nimport { observer, inject } from 'mobx-react';\nimport { Table, Button,Tag, Alert, message, Row, Col, Form, Input,Icon, } from 'antd';\nimport SearchForm from './SearchForm';\nimport {insertColumns} from \"../config\";\nimport TreeManager from '../../TreeManager/TreeManager';\n\nconst FormItem = Form.Item;\n\nmessage.config({\n    top: 200\n});\n@inject('ApiManagerStore')\n@observer\nclass Index extends Component{\n    constructor(props){\n        super(props);\n        this.state={\n            tags: [],\n            inputVisible: false,\n            inputValue: '',\n            selectedRowKeysApis:[],\n            selectedRowsApis:[]\n        }\n    }\n\n    componentDidMount() {\n        this.props.setBreadcrumb([\n            {name: '接口管理'},\n            {name: '添加接口'},\n        ]);\n        this.props.ApiManagerStore.fetchApiByGAV(1);\n    }\n\n    /**\n     * tag标签处理 start\n     */\n    showInput = () => {\n        this.setState({ inputVisible: true }, () => this.input.focus());\n    };\n\n    handleClose = removedTag => {\n        const tags = this.state.tags.filter(tag => tag !== removedTag);\n        console.log(tags);\n        this.setState({ tags });\n    };\n\n    handleInputChange = e => {\n        this.setState({ inputValue: e.target.value });\n    };\n\n    handleInputConfirm = () => {\n        const { inputValue } = this.state;\n        let { tags } = this.state;\n        if (inputValue && tags.indexOf(inputValue) === -1) {\n            tags = [...tags, inputValue];\n        }\n        console.log(tags);\n        this.setState({\n            tags,\n            inputVisible: false,\n            inputValue: ''\n        });\n    };\n\n    saveInputRef = input => (this.input = input);\n    /**\n     * tag标签处理 end\n     */\n\n    /**\n     * table中input输入值后触发保存\n     * @param row\n     */\n    handleSave = row => {\n        const newData = [...this.props.ApiManagerStore.insertDataSource];\n        const index = newData.findIndex(item => row.key === item.key);\n        const item = newData[index];\n        newData.splice(index, 1, {\n            ...item,\n            ...row,\n        });\n        this.props.ApiManagerStore.insertDataSource = newData\n    };\n\n    /**\n     * 单个添加接口\n     * @param record\n     */\n    insertApi(record){\n        const array = []\n        array.push(record)\n        this.props.ApiManagerStore.insertApi(array);\n    }\n\n    /**\n     * 批量添加\n     */\n    batchInsertApi = () => {\n        debugger\n\n        if(this.state.selectedRowKeysApis.length <= 0){\n            message.warn(\"请先勾选需要添加的接口\")\n        }else{\n            console.log(this.state.selectedRowKeysApis)\n            console.log(this.state.selectedRowsApis)\n            this.props.ApiManagerStore.insertApi(this.state.selectedRowsApis)\n        }\n    }\n\n    render(){\n        //可编辑单元格\n        const components = {\n            body: {\n                row: EditableFormRow,\n                cell: EditableCellForm,\n            },\n        };\n\n        const columns = insertColumns(this)\n        const columnsValue = columns.map(col => {\n            if (!col.editable) {\n                return col;\n            }\n            return {\n                ...col,\n                onCell: record => ({\n                    record,\n                    editable: col.editable,\n                    dataIndex: col.dataIndex,\n                    title: col.title,\n                    desc:col.desc,\n                    handleSave: this.handleSave,\n                }),\n            };\n        });\n        //复选框操作\n        const rowSelection = {\n            onChange: (selectedRowKeys, selectedRows) => {\n                console.log(`selectedRowKeys: ${selectedRowKeys}`, 'selectedRows: ', selectedRows);\n                this.setState({\n                    selectedRowKeysApis: selectedRowKeys,\n                    selectedRowsApis: selectedRows\n                });\n            }\n        };\n\n        const {insertDataSource,treeParams} = this.props.ApiManagerStore\n\n        console.log(treeParams.appId)\n        return (\n            <div className=\"container-bg\">\n                <Row>\n                    <Col span={4}>\n                        <TreeManager pageType=\"insertApi\" maxHeight=\"870px\"/>\n                    </Col>\n                    <Col span={20}>\n                        <SearchForm/>\n                        <Alert message=\"接口信息\" type=\"info\" style={{backgroundColor:'#c7e7ff',border:'0px',marginBottom:'13px'}}/>\n                        <Button type=\"primary\" style={{marginBottom:'10px'}}   onClick={() => this.batchInsertApi()}><Icon type=\"plus\" /> 批量添加</Button>\n                        &nbsp;&nbsp;&nbsp;&nbsp;\n                        <Tag color=\"geekblue\" style={{display: treeParams.appName != \"\" && typeof treeParams.appName != 'undefined'  ? \"\" : \"none\"}}>\n                            <span style={{display: treeParams.appName != \"\" && typeof treeParams.appName != 'undefined'  ? \"\" : \"none\"}}>接口归属应用：{treeParams.appName}</span>\n                            <span style={{display: treeParams.moduleName != \"\"  && typeof treeParams.moduleName != 'undefined' ? \"\" : \"none\"}}>，接口归属模块：{treeParams.moduleName}</span>\n                            <span>（点击左侧切换筛选）</span>\n                        </Tag>\n                        <Table components={components} rowClassName={() => 'editable-row'}\n                            bordered\n                            columns={columnsValue}\n                            dataSource={insertDataSource} rowSelection={rowSelection}/>\n                    </Col>\n                </Row>\n            </div>\n        )\n    }\n}\n\n\nexport default Form.create()(Index)\n\n/**\n * 编辑单元格\n */\nconst EditableRow = ({ form, index, ...props }) => (\n    <EditableContext.Provider value={form}>\n        <tr {...props} />\n    </EditableContext.Provider>\n);\nconst EditableFormRow = Form.create()(EditableRow);\nconst EditableContext = React.createContext();\n\n\nclass EditableCellForm extends React.Component {\n    state = {\n        editing: false,\n    };\n\n    toggleEdit = () => {\n        const editing = !this.state.editing;\n        this.setState({ editing }, () => {\n            if (editing) {\n                this.input.focus();\n            }\n        });\n    };\n\n    save = e => {\n        const { record, handleSave } = this.props;\n        this.form.validateFields((error, values) => {\n            if (error && error[e.currentTarget.id]) {\n                return;\n            }\n            this.toggleEdit();\n            handleSave({ ...record, ...values });\n        });\n    };\n\n    renderCell = form => {\n        this.form = form;\n        const { children, dataIndex, record, title } = this.props;\n        const { editing } = this.state;\n        return editing ? (\n            <FormItem style={{ margin: 0 }}>\n                {form.getFieldDecorator(dataIndex, {\n                    rules: [\n                        {\n                            required: false,\n                            message: `${title} is required.`,\n                        },\n                    ],\n                    initialValue: record[dataIndex],\n                })(<Input ref={node => (this.input = node)} onPressEnter={this.save} onBlur={this.save} />)}\n            </FormItem>\n        ) : (\n            <div\n                className=\"editable-cell-value-wrap\"\n                onClick={this.toggleEdit}>\n                {children}\n            </div>\n        );\n    };\n\n    render() {\n\n        const {\n            editable,\n            dataIndex,\n            title,\n            record,\n            index,\n            handleSave,\n            children,\n            ...restProps\n        } = this.props;\n        return (\n            <td {...restProps}>\n                {editable ? (\n                    <EditableContext.Consumer>{this.renderCell}</EditableContext.Consumer>\n                ) : (\n                    children\n                )}\n            </td>\n        );\n    }\n}\n\n\n"],"sourceRoot":""}