{"version":3,"sources":["container/TreeManager/InsertTreeModal.js","container/TreeManager/TreeManager.js","container/ApiManager/config.js","container/ApiManager/Insert/SearchForm.js","container/ApiManager/Insert/index.js"],"names":["FormItem","Item","InsertTreeModal","inject","observer","props","state","this","form","validateFieldsAndScroll","err","values","TreeManagerStore","insertTreeModule","hideTreeModal","n","e","target","value","changeTableRequestData","getFieldDecorator","treeModalVisible","tableRequestData","modalName","destroyOnClose","title","width","visible","onOk","okModal","bind","onCancel","hideModal","okText","cancelText","className","layout","formItemLayout","label","initialValue","name","rules","required","message","style","placeholder","onChange","inputChange","Component","create","TreeNode","TreeManager","onSelect","selectedKeys","info","console","log","appId","node","dataRef","moduleId","appName","moduleName","pageType","TestCaseManagerStore","initData","ApiManagerStore","setTreeParams","handleAddTree","item","stopPropagation","id","showTreeModal","type","handleEditTree","handleDeleteTree","deleteTree","getNodeTitle","level","onClick","theme","onConfirm","onLoadData","treeNode","a","children","getTreeModuleDataSouce","parentId","renderTreeNodes","data","map","key","getTreeAppDataSouce","treeAppDataSource","maxHeight","loadData","columns","context","dataIndex","fixed","render","text","record","length","substr","content","str","apiMethodName","apiClassName","groupId","artifactId","row","tags","tag","index","isLongTag","tagElem","color","slice","updateHref","searchCaseHref","insertCaseHref","href","insertColumns","getColumnSearchProps","argsTypeNames","editable","desc","insertApi","SearchForm","handleSearch","preventDefault","fetchApiByGAV","labelCol","span","wrapperCol","backgroundColor","border","onSubmit","htmlType","config","top","Index","showInput","setState","inputVisible","input","focus","handleClose","removedTag","filter","handleInputChange","inputValue","handleInputConfirm","indexOf","saveInputRef","handleSave","newData","insertDataSource","findIndex","splice","batchInsertApi","selectedRowKeysApis","warn","selectedRowsApis","filterDropdown","setSelectedKeys","confirm","clearFilters","padding","ref","searchInput","onPressEnter","marginBottom","display","icon","size","marginRight","handleReset","filterIcon","filtered","undefined","onFilter","toString","toLowerCase","includes","onFilterDropdownVisibleChange","setTimeout","select","searchedColumn","highlightStyle","searchWords","searchText","autoEscape","textToHighlight","setBreadcrumb","array","push","components","body","EditableFormRow","cell","EditableCellForm","columnsValue","col","onCell","rowSelection","selectedRowKeys","selectedRows","treeParams","rowClassName","bordered","dataSource","EditableContext","Provider","React","createContext","editing","toggleEdit","save","validateFields","error","currentTarget","renderCell","margin","onBlur","restProps","Consumer"],"mappings":"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","file":"static/js/10.45d921d9.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport { observer, inject } from 'mobx-react';\nimport {Row, Form, Input, Modal} from 'antd';\nconst FormItem = Form.Item;\n\n\n@inject('TreeManagerStore')\n@observer\nclass InsertTreeModal extends Component{\n    constructor(props){\n        super(props);\n        this.state={\n        }\n    }\n\n    okModal(){\n        this.props.form.validateFieldsAndScroll((err, values) => {\n            if (!err) {\n                this.props.TreeManagerStore.insertTreeModule();\n            }\n        });\n    }\n\n    hideModal(){\n        this.props.TreeManagerStore.hideTreeModal();\n    }\n    /**\n     * 输入框和单选按钮产生的change事件\n     * @param n\n     * @param e\n     */\n    inputChange(n,e) {\n        let obj={};\n        obj[n]=e.target.value;\n        this.props.TreeManagerStore.changeTableRequestData(n,e.target.value);\n    }\n\n    render(){\n        const { getFieldDecorator } = this.props.form;\n        const { treeModalVisible,tableRequestData,modalName} = this.props\n        return (\n            <Modal\n                destroyOnClose\n                title={modalName}\n                width=\"900px\"\n                visible={treeModalVisible}\n                onOk={this.okModal.bind(this)}\n                onCancel={this.hideModal.bind(this)}\n                okText=\"保存\"\n                cancelText=\"取消\"\n                className=\"model\" width={500} >\n\n                <Form  layout=\"inline\" className=\"ant-advanced-search-form p-xs pb-0\">\n                    <Row>\n                        <FormItem {...this.formItemLayout} label=\"模块名称\" >\n                            {getFieldDecorator('name', {\n                                initialValue: tableRequestData.name,\n                                rules: [{ required: true, message: '请填写模块名称!' }],\n                            })(\n                                <Input  style={{ width: 250 }} placeholder='请填写模块名称!' onChange={this.inputChange.bind(this,'name')}/>\n                            )}\n                        </FormItem>\n                    </Row>\n                </Form>\n            </Modal>\n        )\n    }\n}\n\nexport default Form.create()(InsertTreeModal)\n","import React, {Component} from 'react';\nimport { observable, action, computed } from 'mobx';\nimport { observer, inject } from 'mobx-react';\nimport {  Icon,Tree, Popconfirm} from 'antd';\nimport InsertTreeModal from './InsertTreeModal';\nimport TreeManagerStore from \"../../stores/TreeManager/TreeManagerStore\";\n\nconst { TreeNode } = Tree;\n\n@inject('TreeManagerStore','TestCaseManagerStore','ApiManagerStore')\n@observer\nclass TreeManager extends Component {\n    componentDidMount() {\n        this.props.TreeManagerStore.getTreeAppDataSouce();\n    }\n    constructor(props){\n        super(props);\n    }\n    onSelect = (selectedKeys, info) => {\n        console.log(info)\n        let appId = info.node.props.dataRef.appId\n        let moduleId = info.node.props.dataRef.moduleId\n        let appName = info.node.props.dataRef.appName\n        let moduleName = info.node.props.dataRef.moduleName\n        let pageType = this.props.pageType\n        if(pageType == 'case'){\n            this.props.TestCaseManagerStore.initData(1,appId,moduleId)\n        }else if(pageType == \"api\"){\n            this.props.ApiManagerStore.initData(1,appId,moduleId)\n        }else if(pageType == \"insertApi\"){\n            this.props.ApiManagerStore.setTreeParams(appId,moduleId,appName,moduleName)\n        }else if(pageType == \"updateApi\"){\n            this.props.ApiManagerStore.setTreeParams(appId,moduleId,appName,moduleName)\n        }\n    };\n    /**\n     * 新增节点\n     */\n    handleAddTree = (e,item) => {\n        e.stopPropagation();\n        if (item.id) {\n            console.log(e.target.value)\n            this.props.TreeManagerStore.showTreeModal({\n                moduleName:\"添加模块\",\n                type:\"insert\",\n                item:item\n            })\n        }\n    };\n    /**\n     * 编辑节点\n     */\n    handleEditTree = (e,item) => {\n        e.stopPropagation();\n        if (item.id) {\n            this.props.TreeManagerStore.showTreeModal({\n                moduleName:\"修改模块\",\n                type:\"update\",\n                item:item,\n            });\n        }\n    };\n    /**\n     * 编辑节点\n     */\n    handleDeleteTree = (item) => {\n        if (item.id) {\n            this.props.TreeManagerStore.deleteTree(item)\n        }\n    };\n    /**\n     * 获取节点的title内容\n     */\n    getNodeTitle = (title, id, level,item) => {\n        return (\n            <div className=\"tree-title\">\n                <span>\n                    {title}\n                </span>\n                <div className=\"tree-parent-div \">\n                    <span className=\"tree-span\" onClick={e => this.handleAddTree(e,item)}>\n                       {level !== 4 &&\n                            <Icon type=\"plus-circle\" theme=\"outlined\"/>\n                       }\n                    </span>\n                    <span className=\"tree-span\"  onClick={e => this.handleEditTree(e,item)}>\n                       {level != 1 &&\n                            <Icon type=\"form\" theme=\"outlined\" />\n                       }\n                    </span>\n                    <span className=\"tree-span\" >\n                         {level != 1 &&\n                              <Popconfirm title=\"确定删除此参数吗？\" onConfirm={() => this.handleDeleteTree(item)}>\n                                 <Icon type=\"delete\" theme=\"outlined\"/>\n                              </Popconfirm>\n                         }\n                    </span>\n                </div>\n            </div>\n        );\n    };\n    onLoadData = async (treeNode) => {\n        if (treeNode.props.children) {\n            return;\n        }\n        await this.props.TreeManagerStore.getTreeModuleDataSouce(treeNode.props.dataRef,treeNode.props.dataRef.parentId)\n    }\n\n    renderTreeNodes = (data, level) => {\n        return (\n            data.map(item => {\n                const title = this.getNodeTitle(item.title, item.id, level,item);\n                if (item.children) {\n                    return (\n                        <TreeNode title={title} key={item.id} dataRef={item}>\n                            {this.renderTreeNodes(item.children,level + 1)}\n                        </TreeNode>\n                    );\n                }\n                return <TreeNode {...item} title={title} key={item.id} dataRef={item} />;\n            })\n        );\n    };\n\n    render(){\n        const {treeAppDataSource,treeModalVisible,tableRequestData,modalName} = this.props.TreeManagerStore\n        return(\n            <div style={{'maxHeight':this.props.maxHeight,'overflow-y':'auto' }}>\n                <Tree onSelect={this.onSelect} loadData={this.onLoadData}>{this.renderTreeNodes(treeAppDataSource,1)}</Tree>\n                <InsertTreeModal modalName={modalName} treeModalVisible={treeModalVisible} tableRequestData={tableRequestData}></InsertTreeModal>\n            </div>\n        )\n    }\n}\n\nexport default TreeManager;","import React  from 'react';\nimport { Icon,Tag,Input,Tooltip,Popconfirm,Popover} from 'antd';\nimport common from \"../../style/common.css\";\n\nexport const columns = (context) => [\n    {\n        title: '接口ID',\n        dataIndex: 'id',\n        key: 'id',\n        width:80,\n        fixed: 'left',\n    },\n\n    {\n        title: '接口名',\n        dataIndex: 'name',\n        key: 'name',\n        width:230,\n        render:function(text, record){\n            var name = record.name.length > 20 ? record.name.substr(0,20) + '...' : record.name;\n            return (\n                <span  >\n                    <Popover content={record.name} >\n                        {name}\n                    </Popover>\n                </span>\n            )\n        }\n    },\n    {\n        title: '应用',\n        dataIndex: 'appName',\n        key: 'appName',\n        width:100,\n    },\n    {\n        title: '接口路径',\n        dataIndex: 'apiClassName',\n        key: 'apiClassName',\n        width:360,\n    },\n    {\n        title: '方法名',\n        dataIndex: 'apiMethodName',\n        key: 'apiMethodName',\n        width:210,\n        render:function(text, record){\n            let str = <div>\n                        <span>方法名：{record.apiMethodName}</span><br/>\n                        <span>接口路径：{record.apiClassName}</span><br/>\n                        <span>应用：{record.appName}</span><br/>\n                        <span>groupId：{record.groupId}</span><br/>\n                        <span>artifactId：{record.artifactId}</span><br/>\n                        <span>模块：{record.moduleName}</span>\n                      </div>\n            return (\n                <span>\n                    <Popover content={str} >\n                       {record.apiMethodName}\n                    </Popover>\n                </span>\n            )\n        }\n    },\n    {\n        title: '方法参数',\n        dataIndex: 'argsTypeNames',\n        key: 'argsTypeNames',\n        width:360,\n    },\n    {\n        title: '更新时间',\n        dataIndex: 'editTimeStr',\n        key: 'editTimeStr',\n        width:220,\n    },\n    {\n        title: '创建人',\n        dataIndex: 'creatorName',\n        key: 'creatorName',\n        width:150,\n    },\n    {\n        title: '标签',\n        dataIndex: 'tags',\n        key: 'tags',\n        width:230,\n        render:(row,record) => {\n\n            return (\n                <span>\n                    {record.tags.map((tag, index) => {\n                        const isLongTag = tag.length > 20;\n                        const tagElem = (\n                            <Tag key={tag.id} color=\"purple\">\n                                {isLongTag ? `${tag.value.slice(0, 20)}...` : tag.value}\n                            </Tag>\n                        );\n                        return isLongTag ? (\n                            <Tooltip title={tag.value} key={tag.id}>\n                                {tagElem}\n                            </Tooltip>\n                        ) : (\n                            tagElem\n                        );\n                    })}\n                </span>\n            )\n        }\n    },\n    {\n        title: '操作',\n        width:230,\n        key: 'operation',\n        fixed: 'right',\n        render:(row,record) => {\n            let updateHref = \"/update_api?apiId=\" + record.id\n            let searchCaseHref = \"/testcase_manager?apiId=\" + record.id\n            let insertCaseHref = \"/edit_testcase?apiId=\" + record.id\n\n            return (\n                <span>\n                    <a href={updateHref} target=\"_blank\">修改接口</a>&nbsp;\n                    <a href={searchCaseHref} target=\"_blank\" className=\"vLine\"> 查看用例</a>&nbsp;\n                    <a href={insertCaseHref} target=\"_blank\" className=\"vLine\"> 添加用例</a>\n                </span>\n            )\n        }\n    }\n];\nexport const insertColumns = (context) => [\n    {\n        title: '接口路径',\n        dataIndex: 'apiClassName',\n        key: 'apiClassName',\n        width:'30%',\n        ...context.getColumnSearchProps('apiClassName'),\n        render:function(text, record){\n            var name = record.apiClassName.length > 35 ? record.apiClassName.substr(0,35) + '...' : record.apiClassName;\n\n            let str = <div>\n                <span>接口路径：{record.apiClassName}</span><br/>\n                <span>方法名：{record.apiMethodName}</span><br/>\n                <span>参数类型：{record.argsTypeNames}</span><br/>\n            </div>\n            return (\n                <span>\n                    <Popover content={str} >\n                       {name}\n                    </Popover>\n                </span>\n            )\n        }\n    },\n    {\n        title: '方法名',\n        dataIndex: 'apiMethodName',\n        key: 'apiMethodName',\n        width:'20%',\n        ...context.getColumnSearchProps('apiMethodName'),\n        render:function(text, record){\n            return (\n                <span  >\n                    <Popover content={record.apiMethodName} >\n                        {record.apiMethodName}\n                    </Popover>\n                </span>\n            )\n        }\n    },\n\n    {\n        title: '接口名',\n        dataIndex: 'name',\n        key: 'name',\n        width:'17%',\n        editable: true,\n        render:(row,record) => {\n            if(record.name != null){\n                return (\n                    <span>{record.name}</span>\n                )\n            }else{\n                return (\n                    <span><font color=\"orange\">无</font></span>\n                )\n            }\n        }\n    },\n    {\n        title: '描述',\n        dataIndex: 'desc',\n        key: 'desc',\n        width:'17%',\n        editable: true,\n        render:(row,record) => {\n            if(record.desc != null){\n                return (\n                    <span>{record.desc}</span>\n                )\n            }else{\n                return (\n                    <span><font color=\"orange\">无</font></span>\n                )\n            }\n        }\n    },\n    // {\n    //     title: '打标签',\n    //     dataIndex: 'tag',\n    //     key: 'tag',\n    //     width:'20%',\n        // render:(row,record) => {\n        //     const {tags,inputVisible, inputValue } = context.state;\n        //\n        //     return (\n        //         <div>\n        //             {tags.map((tag, index) => {\n        //                 const isLongTag = tag.length > 20;\n        //                 const tagElem = (\n        //                     <Tag key={tag} closable  onClose={() => context.handleClose(tag)}>\n        //                         {isLongTag ? `${tag.slice(0, 20)}...` : tag}\n        //                     </Tag>\n        //                 );\n        //                 return isLongTag ? (\n        //                     <Tooltip title={tag} key={tag}>\n        //                         {tagElem}\n        //                     </Tooltip>\n        //                 ) : (\n        //                     tagElem\n        //                 );\n        //             })}\n        //             {inputVisible && (\n        //                 <Input\n        //                 ref={context.saveInputRef}\n        //                 type=\"text\"\n        //                 size=\"small\"\n        //                 style={{ width: 78 }}\n        //                 value={inputValue}\n        //                 onChange={context.handleInputChange}\n        //                 onBlur={context.handleInputConfirm}\n        //                 onPressEnter={context.handleInputConfirm}\n        //                 />\n        //             )}\n        //             {!inputVisible && (\n        //                 <Tag onClick={context.showInput} style={{ background: '#fff', borderStyle: 'dashed' }}>\n        //                     <Icon type=\"plus\" /> New Tag\n        //                 </Tag>\n        //             )}\n        //         </div>\n        //     )\n        // }\n    // },\n    {\n        title: '操作',\n        width: '7%',\n        key: 'operation',\n        render:(row,record) => {\n            return (\n                <div>\n                    <span >\n                        <Popconfirm title=\"确定添加此接口吗？\" onConfirm={() => context.insertApi(record)} >\n                            <a href=\"#\" >添加</a>\n                        </Popconfirm>\n                    </span>\n                </div>\n            )\n        }\n    }\n\n]\n\n\n","import React, { Component } from 'react';\nimport { observer, inject } from 'mobx-react';\n\nimport { Table,Divider, Button, Alert, Select,Icon, Row, Col, Form, DatePicker, Input, Modal } from 'antd';\nimport Highlighter from 'react-highlight-words';\nimport common from \"../../../style/common.css\";\n\nconst FormItem = Form.Item;\n\n\n@inject('ApiManagerStore')\n@observer\nclass SearchForm extends Component{\n    constructor(props){\n        super(props);\n        this.state={\n        }\n    }\n\n    inputChange(n,e) {\n        this.props.ApiManagerStore.changeTableRequestData(n,e.target.value);\n    }\n\n    handleSearch = (e) => {\n        e.preventDefault();\n        this.props.form.validateFieldsAndScroll((err, values) => {\n            if (!err) {\n                this.props.ApiManagerStore.fetchApiByGAV(1);\n            }\n        });\n    }\n    formItemLayout = {\n        labelCol: { span: 8 },\n        wrapperCol: { span: 13 },\n    }\n    render(){\n        const { getFieldDecorator } = this.props.form;\n\n        return (\n            <div>\n                <Alert message=\"api包信息\" type=\"info\" style={{backgroundColor:'#c7e7ff',border:'0px','marginBottom':'5px'}}/>\n                <Form layout=\"inline\"  className=\"ant-advanced-search-form p-xs pb-0\" onSubmit={this.handleSearch}>\n                    <FormItem {...this.formItemLayout} label=\"groupId\">\n                        {getFieldDecorator('groupId', {\n                            rules: [{ required: true, message: '请填写groupId!' }],\n                        })(\n                            <Input placeholder=\"请输入groupId\"  onChange={this.inputChange.bind(this,'groupId')}/>\n                        )}\n                    </FormItem>\n                    <FormItem {...this.formItemLayout} label=\"artifactId\">\n                        {getFieldDecorator('artifactId', {\n                            rules: [{ required: true, message: '请填写artifactId!' }],\n                        })(\n                            <Input placeholder=\"请输入artifactId\"  onChange={this.inputChange.bind(this,'artifactId')}/>\n                        )}\n                    </FormItem>\n                    <FormItem {...this.formItemLayout} label=\"version\">\n                        {getFieldDecorator('version', {\n                            rules: [{ required: true, message: '请选择version' }],\n                        })(\n                            <Input placeholder=\"请输入version\" onChange={this.inputChange.bind(this,'version')}/>\n                        )}\n                    </FormItem>\n                    <Form.Item>\n                        <Button type=\"primary\" htmlType=\"submit\" >\n                            <Icon type=\"search\" /> 搜索\n                        </Button>\n                    </Form.Item>\n                </Form>\n            </div>\n        )\n    }\n}\n\nexport default Form.create()(SearchForm)\n\n","import React, { Component } from 'react';\nimport { observer, inject } from 'mobx-react';\nimport { Table, Button,Tag, Alert, message, Row, Col, Form, Input,Icon, } from 'antd';\nimport SearchForm from './SearchForm';\nimport {insertColumns} from \"../config\";\nimport TreeManager from '../../TreeManager/TreeManager';\nimport Highlighter from 'react-highlight-words';\n\nconst FormItem = Form.Item;\n\nmessage.config({\n    top: 200\n});\n@inject('ApiManagerStore')\n@observer\nclass Index extends Component{\n    constructor(props){\n        super(props);\n        this.state={\n            tags: [],\n            inputVisible: false,\n            inputValue: '',\n            selectedRowKeysApis:[],\n            selectedRowsApis:[],\n            searchText: '',\n            searchedColumn: '',\n        }\n    }\n\n    componentDidMount() {\n        this.props.setBreadcrumb([\n            {name: '接口管理'},\n            {name: '添加接口'},\n        ]);\n    }\n\n    /**\n     * tag标签处理 start\n     */\n    showInput = () => {\n        this.setState({ inputVisible: true }, () => this.input.focus());\n    };\n\n    handleClose = removedTag => {\n        const tags = this.state.tags.filter(tag => tag !== removedTag);\n        console.log(tags);\n        this.setState({ tags });\n    };\n\n    handleInputChange = e => {\n        this.setState({ inputValue: e.target.value });\n    };\n\n    handleInputConfirm = () => {\n        const { inputValue } = this.state;\n        let { tags } = this.state;\n        if (inputValue && tags.indexOf(inputValue) === -1) {\n            tags = [...tags, inputValue];\n        }\n        console.log(tags);\n        this.setState({\n            tags,\n            inputVisible: false,\n            inputValue: ''\n        });\n    };\n\n    saveInputRef = input => (this.input = input);\n    /**\n     * tag标签处理 end\n     */\n\n    /**\n     * table中input输入值后触发保存\n     * @param row\n     */\n    handleSave = row => {\n        const newData = [...this.props.ApiManagerStore.insertDataSource];\n        const index = newData.findIndex(item => row.key === item.key);\n        const item = newData[index];\n        newData.splice(index, 1, {\n            ...item,\n            ...row,\n        });\n        this.props.ApiManagerStore.insertDataSource = newData\n    };\n\n    /**\n     * 单个添加接口\n     * @param record\n     */\n    insertApi(record){\n        const array = []\n        array.push(record)\n        this.props.ApiManagerStore.insertApi(array);\n    }\n\n    /**\n     * 批量添加\n     */\n    batchInsertApi = () => {\n        debugger\n\n        if(this.state.selectedRowKeysApis.length <= 0){\n            message.warn(\"请先勾选需要添加的接口\")\n        }else{\n            console.log(this.state.selectedRowKeysApis)\n            console.log(this.state.selectedRowsApis)\n            this.props.ApiManagerStore.insertApi(this.state.selectedRowsApis)\n        }\n    }\n    /**\n     * 表头搜索触发\n     * @param dataIndex\n     * @returns {{filterDropdown: (function({setSelectedKeys: *, selectedKeys?: *, confirm?: *, clearFilters?: *}): *), filterIcon: (function(*): *), onFilter: (function(*, *): boolean), onFilterDropdownVisibleChange: onFilterDropdownVisibleChange, render: (function(*): *)}}\n     */\n    getColumnSearchProps = dataIndex => ({\n        filterDropdown: ({ setSelectedKeys, selectedKeys, confirm, clearFilters }) => (\n            <div style={{ padding: 8 }}>\n                <Input\n                    ref={node => {\n                        this.searchInput = node;\n                    }}\n                    placeholder={`Search ${dataIndex}`}\n                    value={selectedKeys[0]}\n                    onChange={e => setSelectedKeys(e.target.value ? [e.target.value] : [])}\n                    onPressEnter={() => this.handleSearch(selectedKeys, confirm, dataIndex)}\n                    style={{ width: 188, marginBottom: 8, display: 'block' }}\n                />\n                <Button\n                    type=\"primary\"\n                    onClick={() => this.handleSearch(selectedKeys, confirm, dataIndex)}\n                    icon=\"search\"\n                    size=\"small\"\n                    style={{ width: 90, marginRight: 8 }}\n                >\n                    Search\n                </Button>\n                <Button onClick={() => this.handleReset(clearFilters)} size=\"small\" style={{ width: 90 }}>\n                    Reset\n                </Button>\n            </div>\n        ),\n        filterIcon: filtered => (\n            <Icon type=\"search\" style={{ color: filtered ? '#1890ff' : undefined }} />\n        ),\n        onFilter: (value, record) =>\n            record[dataIndex]\n                .toString()\n                .toLowerCase()\n                .includes(value.toLowerCase()),\n        onFilterDropdownVisibleChange: visible => {\n            if (visible) {\n                setTimeout(() => this.searchInput.select());\n            }\n        },\n        render: text =>\n            this.state.searchedColumn === dataIndex ? (\n                <Highlighter\n                    highlightStyle={{ backgroundColor: '#ffc069', padding: 0 }}\n                    searchWords={[this.state.searchText]}\n                    autoEscape\n                    textToHighlight={text.toString()}\n                />\n            ) : (\n                text\n            ),\n    });\n    handleSearch = (selectedKeys, confirm, dataIndex) => {\n        confirm();\n        this.setState({\n            searchText: selectedKeys[0],\n            searchedColumn: dataIndex,\n        });\n    };\n\n    handleReset = clearFilters => {\n        clearFilters();\n        this.setState({ searchText: '' });\n    };\n\n    /**\n     * 表头搜索触发 end\n     */\n\n    render(){\n        //可编辑单元格\n        const components = {\n            body: {\n                row: EditableFormRow,\n                cell: EditableCellForm,\n            },\n        };\n\n        const columns = insertColumns(this)\n        const columnsValue = columns.map(col => {\n            if (!col.editable) {\n                return col;\n            }\n            return {\n                ...col,\n                onCell: record => ({\n                    record,\n                    editable: col.editable,\n                    dataIndex: col.dataIndex,\n                    title: col.title,\n                    desc:col.desc,\n                    handleSave: this.handleSave,\n                }),\n            };\n        });\n        //复选框操作\n        const rowSelection = {\n            onChange: (selectedRowKeys, selectedRows) => {\n                console.log(`selectedRowKeys: ${selectedRowKeys}`, 'selectedRows: ', selectedRows);\n                this.setState({\n                    selectedRowKeysApis: selectedRowKeys,\n                    selectedRowsApis: selectedRows\n                });\n            }\n        };\n\n        const {insertDataSource,treeParams} = this.props.ApiManagerStore\n\n        console.log(treeParams.appId)\n        return (\n            <div className=\"container-bg\">\n                <Row>\n                    <Col span={4}>\n                        <TreeManager pageType=\"insertApi\" maxHeight=\"870px\"/>\n                    </Col>\n                    <Col span={20}>\n                        <SearchForm/>\n                        <Alert message=\"接口信息\" type=\"info\" style={{backgroundColor:'#c7e7ff',border:'0px',marginBottom:'13px'}}/>\n                        <Button type=\"primary\" style={{marginBottom:'10px'}}   onClick={() => this.batchInsertApi()}><Icon type=\"plus\" /> 批量添加</Button>\n                        &nbsp;&nbsp;&nbsp;&nbsp;\n                        <Tag color=\"geekblue\" style={{display: treeParams.appName != \"\" && typeof treeParams.appName != 'undefined'  ? \"\" : \"none\"}}>\n                            <span style={{display: treeParams.appName != \"\" && typeof treeParams.appName != 'undefined'  ? \"\" : \"none\"}}>接口归属应用：{treeParams.appName}</span>\n                            <span style={{display: treeParams.moduleName != \"\"  && typeof treeParams.moduleName != 'undefined' ? \"\" : \"none\"}}>，接口归属模块：{treeParams.moduleName}</span>\n                            <span>（点击左侧切换筛选）</span>\n                        </Tag>\n                        <Table components={components} rowClassName={() => 'editable-row'}\n                            bordered\n                            columns={columnsValue}\n                            dataSource={insertDataSource} rowSelection={rowSelection}/>\n                    </Col>\n                </Row>\n            </div>\n        )\n    }\n}\n\n\nexport default Form.create()(Index)\n\n/**\n * 编辑单元格\n */\nconst EditableRow = ({ form, index, ...props }) => (\n    <EditableContext.Provider value={form}>\n        <tr {...props} />\n    </EditableContext.Provider>\n);\nconst EditableFormRow = Form.create()(EditableRow);\nconst EditableContext = React.createContext();\n\n\nclass EditableCellForm extends React.Component {\n    state = {\n        editing: false,\n    };\n\n    toggleEdit = () => {\n        const editing = !this.state.editing;\n        this.setState({ editing }, () => {\n            if (editing) {\n                this.input.focus();\n            }\n        });\n    };\n\n    save = e => {\n        const { record, handleSave } = this.props;\n        this.form.validateFields((error, values) => {\n            if (error && error[e.currentTarget.id]) {\n                return;\n            }\n            this.toggleEdit();\n            handleSave({ ...record, ...values });\n        });\n    };\n\n    renderCell = form => {\n        this.form = form;\n        const { children, dataIndex, record, title } = this.props;\n        const { editing } = this.state;\n        return editing ? (\n            <FormItem style={{ margin: 0 }}>\n                {form.getFieldDecorator(dataIndex, {\n                    rules: [\n                        {\n                            required: false,\n                            message: `${title} is required.`,\n                        },\n                    ],\n                    initialValue: record[dataIndex],\n                })(<Input ref={node => (this.input = node)} onPressEnter={this.save} onBlur={this.save} />)}\n            </FormItem>\n        ) : (\n            <div\n                className=\"editable-cell-value-wrap\"\n                onClick={this.toggleEdit}>\n                {children}\n            </div>\n        );\n    };\n\n    render() {\n\n        const {\n            editable,\n            dataIndex,\n            title,\n            record,\n            index,\n            handleSave,\n            children,\n            ...restProps\n        } = this.props;\n        return (\n            <td {...restProps}>\n                {editable ? (\n                    <EditableContext.Consumer>{this.renderCell}</EditableContext.Consumer>\n                ) : (\n                    children\n                )}\n            </td>\n        );\n    }\n}\n\n\n"],"sourceRoot":""}