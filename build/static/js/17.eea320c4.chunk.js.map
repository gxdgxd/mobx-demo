{"version":3,"sources":["container/TagManager/SingleTag.js","container/TestCaseManager/ExeCaseDrawer.js","container/TestCaseManager/Insert/index.js"],"names":["SingleTag","inject","observer","props","handleClose","removedTag","tags","filter","tag","id","console","log","setState","deleteTags","showInput","inputVisible","input","focus","handleInputChange","e","inputValue","target","value","handleInputConfirm","a","state","indexOf","TagManagerStore","postInsertTag","result","data","getTags","saveInputRef","this","map","index","isLongTag","length","tagElem","key","closable","onClose","slice","title","ref","type","size","style","width","onChange","onBlur","onPressEnter","onClick","background","borderStyle","Component","TextArea","ExeCaseDrawer","TestCaseManagerStore","hideCaseDrawer","visible","copy","message","success","exeDetailData","drawerVisible","caseData","toJS","caseExeRecords","statusStr","color","status","resultStatus","succeed","testCase","placement","spinning","gutter","span","name","operatorName","env","exeTimeStr","testApi","backgroundColor","border","src","eval","sampleResult","enableClipboard","handleCopy","rows","param","contextParamScript","create","config","top","FormItem","Item","Option","InsertIndex","getCaseTags","insertCaseTags","deleteCaseTags","insert","preventDefault","form","validateFieldsAndScroll","err","values","ApiManagerStore","detailData","compressParams","jsonFormat","timerExe","timerDate","setInterval","tick","ExeRecordStore","getDetailData","recordId","handleClearTimeout","testCaseExe","caseId","getUrlParam","window","location","search","warn","params","GlobalManagerStore","varValue","exeCase","code","showCaseDrawer","isCompressDisplay","isJsonFormatDisplay","dubboGroup","leg","setBreadcrumb","getApiDetailData","getVarDetail","n","changeDetailData","v","toString","clearInterval","getFieldDecorator","insertButtonStatus","updateButtonStatus","caseDetailData","caseTags","mockJson","paramScript","JSON","parse","className","layout","onSubmit","formItemLayout","label","appName","moduleName","initialValue","apiClassName","rules","required","disabled","apiMethodName","pllaceholder","inputChange","bind","priority","optionChange","desc","float","argsJsonFormat","theme","resultJsonFormat","display","marginBottom","validScript","href","htmlType","open","placeholder","allowClear","changeInput"],"mappings":"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","file":"static/js/17.eea320c4.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport { observer, inject } from 'mobx-react';\nimport { Tag,Icon, Input,Tooltip } from 'antd';\n\n@inject('TagManagerStore')\n@observer\nclass SingleTag extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            tags:[],\n            inputVisible: false,\n            inputValue: '',\n        }\n    }\n\n    handleClose = removedTag => {\n        debugger\n        const tags = this.props.tags.filter(tag => tag.id !== removedTag);\n        console.log(tags);\n        this.setState({ tags });\n        this.props.deleteTags(tags)\n    };\n\n    showInput = () => {\n        this.setState({ inputVisible: true }, () => this.input.focus());\n    };\n\n    handleInputChange = e => {\n        this.setState({ inputValue: e.target.value });\n    };\n\n    handleInputConfirm = async () => {\n        const { inputValue } = this.state;\n        let { tags } = this.state\n        if (inputValue && tags.indexOf(inputValue) === -1) {\n            tags = [...tags, inputValue];\n        }\n        const result = await this.props.TagManagerStore.postInsertTag(tags[0])\n        let tag = {'id':result.data,'value':tags[0]}\n        this.props.getTags(tag)\n        this.setState({\n            inputVisible: false,\n            inputValue: '',\n        });\n    };\n\n    saveInputRef = input => (this.input = input);\n\n    render(){\n        const { inputVisible, inputValue} = this.state;\n        return(\n            <div>\n                {this.props.tags.map((tag, index) => {\n                    const isLongTag = tag.length > 20;\n                    const tagElem = (\n                        <Tag key={tag.id} closable onClose={() => this.handleClose(tag.id)}>\n                            {isLongTag ? `${tag.value.slice(0, 20)}...` : tag.value}\n                        </Tag>\n                    );\n                    return isLongTag ? (\n                        <Tooltip title={tag.value} key={tag.id}>\n                            {tagElem}\n                        </Tooltip>\n                    ) : (\n                        tagElem\n                    );\n                })}\n                {inputVisible && (\n                    <Input\n                        ref={this.saveInputRef}\n                        type=\"text\"\n                        size=\"small\"\n                        style={{ width: 78 }}\n                        value={inputValue}\n                        onChange={this.handleInputChange}\n                        onBlur={this.handleInputConfirm}\n                        onPressEnter={this.handleInputConfirm}\n                    />\n                )}\n                {!inputVisible && (\n                    <Tag onClick={this.showInput} style={{ background: '#fff', borderStyle: 'dashed' }}>\n                        <Icon type=\"plus\" /> New Tag\n                    </Tag>\n                )}\n            </div>\n        )\n    }\n}\n\nexport default SingleTag","import React, { Component } from 'react';\nimport { observer, inject } from 'mobx-react';\nimport { Row,Col,Form, Drawer, Tag ,Alert,Input,Spin} from 'antd';\nimport ReactJson from 'react-json-view'\nimport {toJS} from \"mobx/lib/mobx\";\nimport {message} from \"antd/lib/index\";\nconst { TextArea } = Input;\n\n@inject('TestCaseManagerStore')\n@observer\nclass ExeCaseDrawer extends Component{\n    constructor(props){\n        super(props);\n        this.state={\n            visible:false\n        }\n    }\n\n    onClose = () => {\n        this.props.TestCaseManagerStore.hideCaseDrawer()\n    };\n    handleCopy(copy){\n        message.success(\"复制成功\")\n    }\n    render(){\n        const {exeDetailData,drawerVisible} = this.props\n        let caseData = toJS(exeDetailData.caseExeRecords)\n        let statusStr = <Tag color=\"#2db7f5\">执行中</Tag>\n        if(exeDetailData.status == 0){\n            statusStr = <Tag color=\"#f50\">待执行</Tag>\n        }else if(exeDetailData.status == 1){\n            statusStr = <Tag color=\"#2db7f5\">执行中</Tag>\n        }else if(exeDetailData.status == 2){\n            statusStr = <Tag color=\"#87d068\">已完成</Tag>\n        }\n        let resultStatus = \"\"\n        if(typeof caseData != \"undefined\"){\n            if(caseData[0].succeed == true){\n                resultStatus = <Tag color=\"#87d068\">执行成功</Tag>\n            }else if(caseData[0].succeed == false){\n                resultStatus = <Tag color=\"#f50\">执行失败</Tag>\n            }\n        }\n\n        console.log(typeof caseData == 'undefined' ? \"\" : caseData[0].testCase)\n        const style = {\n            'marginBottom':'8px'\n        }\n        return (\n\n            <Drawer\n                title=\"执行结果\" width={720}\n                placement=\"right\"\n                onClose={this.onClose}\n                visible={drawerVisible}\n            >\n                <Spin spinning={exeDetailData.status == 1 ? true : false}>\n                <Row gutter={48} style={style}>\n                    <Col span={13}>\n                        {typeof caseData == 'undefined' ? \"\" : caseData[0].testCase.name}\n                    </Col>\n                    <Col span={6}>\n                        任务状态：{statusStr}\n                    </Col>\n                </Row>\n                <Row gutter={48} style={style}>\n                    <Col span={13}>\n                        操作人：{exeDetailData.operatorName}\n                    </Col>\n                    <Col span={10}>\n                        执行环境：{exeDetailData.env}\n                    </Col>\n                </Row>\n                <Row gutter={48} style={style}>\n                    <Col span={13}>\n                        执行时间：{exeDetailData.exeTimeStr}\n                    </Col>\n                    <Col span={8}>\n                        执行结果：{resultStatus}\n                    </Col>\n                </Row>\n                <Row gutter={48} style={style}>\n                    <Col span={13}>\n                        接口名： {typeof caseData == 'undefined' ? \"\" : caseData[0].testCase.testApi.name}\n                    </Col>\n                </Row>\n                <Alert message=\"校验结果\" type=\"info\" style={{backgroundColor:'#c7e7ff',border:'0px','marginBottom':'10px'}}/>\n                <pre>\n                    {typeof caseData == 'undefined' ? \"\" : caseData[0].message == null ? \"暂无结果\":caseData[0].message}\n                </pre>\n                <Alert message=\"接口实际返回结果\" type=\"info\" style={{backgroundColor:'#c7e7ff',border:'0px','marginBottom':'10px'}}/>\n                <ReactJson src={typeof caseData == 'undefined' ? \"\" : eval(\"(\"+caseData[0].sampleResult+\")\")} name={null}  enableClipboard={this.handleCopy} style={{border:'1px solid #ccc','height':'153px','marginBottom':'5px','maxHeight':'153px','overflow-y':'auto'  }}/>\n\n                <Alert message=\"请求入参\" type=\"info\" style={{backgroundColor:'#c7e7ff',border:'0px','marginBottom':'10px'}}/>\n                <TextArea rows={5} style={{'width':'670px','marginBottom':'6px'}} value={typeof caseData == 'undefined' ? \"\" : caseData[0].param}/>\n                <Alert message=\"dubbo contextParams\" type=\"info\" style={{backgroundColor:'#c7e7ff',border:'0px','marginBottom':'10px'}}/>\n                <TextArea rows={3} style={{'width':'670px','marginBottom':'6px'}} value={typeof caseData == 'undefined' ? \"\" : caseData[0].testCase.contextParamScript}/>\n                </Spin>\n            </Drawer>\n\n        )\n    }\n}\n\nexport default Form.create()(ExeCaseDrawer)\n","import React, { Component } from 'react';\nimport { observer, inject } from 'mobx-react';\nimport ReactJson from 'react-json-view'\nimport { Tag, Button,Alert, Select, Row,Icon, Form, Input,Tooltip,message } from 'antd';\nimport {getUrlParam} from '../../../utils/common'\nimport ExeCaseDrawer from '../ExeCaseDrawer'\nimport SingleTag from \"../../TagManager/SingleTag\";\n\nmessage.config({\n    top: 200\n});\n\nconst FormItem = Form.Item;\nconst Option = Select.Option;\nconst { TextArea } = Input;\n\n@inject('TestCaseManagerStore','ApiManagerStore','ExeRecordStore','TagManagerStore','GlobalManagerStore')\n@observer\nclass InsertIndex extends Component {\n    componentDidMount() {\n        this.props.setBreadcrumb([\n            {name: '用例管理'},\n            {name: '编辑用例'},\n        ]);\n        this.props.ApiManagerStore.getApiDetailData()\n        this.props.GlobalManagerStore.getVarDetail(\"default_env\");\n\n        if(getUrlParam('caseId',window.location.search) != \"\"){\n            this.props.TestCaseManagerStore.getDetailData()\n        }\n    }\n    constructor(props) {\n        super(props);\n        this.state = {\n            isCompressDisplay:'',\n            isJsonFormatDisplay:'none',\n            dubboGroup:'',\n            recordId:0,\n            leg: {\"userId\":\"*******\",\"ipAddr\":\"10.10.10.10\",\"appKey\":\"*******\",\"openId\":\"******\",\"unionId\":\"********\",\"deviceId\":\"*******\",\"appv\":\"\",\"os\":\"\"}\n        }\n    }\n    /**\n     * 获取子组件SingleTag中用户输入的tag标签\n     */\n    getCaseTags = (tags) => {\n        debugger\n        this.props.TestCaseManagerStore.insertCaseTags(tags)\n    };\n    /**\n     * 移除用户输入的tag标签\n     */\n    deleteCaseTags = (tags) => {\n        debugger\n        this.props.TestCaseManagerStore.deleteCaseTags(tags)\n    };\n    /**\n     * 输入框和单选按钮产生的change事件\n     * @param n\n     * @param e\n     */\n    inputChange(n,e) {\n        let obj={};\n        obj[n]=e.target.value;\n        this.props.TestCaseManagerStore.changeDetailData(n,e.target.value);\n    }\n    optionChange(n,v,Option) {\n        this.props.TestCaseManagerStore.changeDetailData(n,v.toString() || '');\n    }\n\n    /**\n     * 保存用例\n     */\n    insert = (e) => {\n\n        e.preventDefault();\n        this.props.form.validateFieldsAndScroll((err, values) => {\n            if (!err) {\n                this.props.TestCaseManagerStore.insert(this.props.ApiManagerStore.detailData,true)\n            }\n        });\n    }\n    /**\n     * 压缩参数\n     */\n    compressParams = () => {\n        this.setState({\n            'isCompressDisplay':'',\n            'isJsonFormatDisplay':'none',\n        })\n    }\n    /**\n     * json格式化\n     */\n    jsonFormat = () => {\n        this.setState({\n            'isCompressDisplay':'none',\n            'isJsonFormatDisplay':'',\n        })\n    }\n    timerExe = async() => {\n        this.timerDate = setInterval(()=> this.tick(),3000);\n    }\n    handleClearTimeout(){\n        this.timerDate && clearInterval(this.timerDate);\n    }\n    componentWillUnmount(){\n        this.handleClearTimeout()\n    }\n    tick = async() => {\n        let detailData = await this.props.ExeRecordStore.getDetailData(this.state.recordId)\n        if(detailData.status == 2){\n            this.handleClearTimeout()\n        }\n    }\n\n    /**\n     * 保存并执行\n     */\n    testCaseExe = async () => {\n        let caseId = getUrlParam('caseId',window.location.search);\n        console.log(\"caseId:\" , caseId)\n        if(caseId == \"\"){\n            message.warn(\"请先保存用例再执行！\")\n            return\n        }\n\n        let abc = await this.props.TestCaseManagerStore.insert(this.props.ApiManagerStore.tags,this.props.ApiManagerStore.detailData,false)\n        if(abc != 200){\n            message.warn(\"保存出现错误\")\n            return\n        }\n        let params =  {\"id\":null,\"caseIds\":[caseId],\"scheduleType\":1,\"env\":this.props.GlobalManagerStore.varValue}\n        let result = await this.props.TestCaseManagerStore.exeCase(params,'case');\n        if(typeof result != \"undefined\"){\n            if(result.code == 200){\n                this.setState({\n                    recordId:result.data\n                })\n                await this.props.ExeRecordStore.getDetailData(this.state.recordId)\n                this.timerExe(result)\n                this.props.TestCaseManagerStore.showCaseDrawer()\n            }else{\n                message.warn(\"执行出现错误\")\n            }\n        }\n    }\n    handleCopy(copy){\n        message.success(\"复制成功\")\n    }\n    changeInput(e){\n        this.props.GlobalManagerStore.varValue = e.target.value\n    }\n    render(){\n        const {varValue} = this.props.GlobalManagerStore\n        const { getFieldDecorator} = this.props.form;\n        const {detailData,tags} = this.props.ApiManagerStore\n        const {exeDetailData} = this.props.ExeRecordStore\n        const {insertButtonStatus,updateButtonStatus,caseDetailData,drawerVisible,caseTags} = this.props.TestCaseManagerStore\n        var mockJson = \"\"\n        if(typeof caseDetailData.paramScript != \"undefined\"){\n            try {\n                if (typeof JSON.parse(caseDetailData.paramScript) == \"object\" ) {\n                    mockJson = JSON.parse(caseDetailData.paramScript)\n                }\n            }catch(e) {\n                console.log('error：'+e);\n            }\n        }\n        return(\n            <div className=\"container-bg\" style={{'marginLeft':'15px'}}>\n                <Form  layout=\"inline\" className=\"ant-advanced-search-form p-xs pb-0\" onSubmit={this.insert}>\n                    <Alert message=\"接口信息\" type=\"info\" style={{backgroundColor:'#c7e7ff',border:'0px','marginBottom':'10px'}}/>\n                    <Row>\n                        <FormItem {...this.formItemLayout} label=\"\">\n                            <Tag color=\"geekblue\">接口归属应用：{detailData.appName}</Tag>\n                        </FormItem>\n                        <FormItem {...this.formItemLayout} label=\"\">\n                            <Tag color=\"geekblue\">接口归属模块：{detailData.moduleName}</Tag>\n                        </FormItem>\n                    </Row>\n                    <Row>\n                        <FormItem {...this.formItemLayout} label=\"接口路径\">\n                            {getFieldDecorator('apiClassName', {\n                                initialValue: detailData.apiClassName,\n                                rules: [{ required: false, message: '请填写接口路径!' }],\n                            })(\n                                <Input disabled style={{ width: 823 }} />\n                            )}\n                        </FormItem>\n                    </Row>\n                    <Row>\n                        <FormItem {...this.formItemLayout} label=\"方法名\">\n                            {getFieldDecorator('apiMethodName', {\n                                initialValue: detailData.apiMethodName,\n                                rules: [{ required: false, message: '请填写方法名!' }],\n                            })(\n                                <Input disabled style={{ width: 375 }}/>\n                            )}\n                        </FormItem>\n                        <FormItem {...this.formItemLayout} label=\"接口名\">\n                            <Input disabled style={{ width: 389 }} value={detailData.name}/>\n                        </FormItem>\n                    </Row>\n                    <Row>\n                        <FormItem {...this.formItemLayout} label=\"接口标签\">\n                            {tags.map((tag, index) => {\n                                const isLongTag = tag.length > 20;\n                                const tagElem = (\n                                    <Tag key={tag.id} >\n                                        {isLongTag ? `${tag.value.slice(0, 20)}...` : tag.value}\n                                    </Tag>\n                                );\n                                return isLongTag ? (\n                                    <Tooltip title={tag.value} key={tag.id}>\n                                        {tagElem}\n                                    </Tooltip>\n                                ) : (\n                                    tagElem\n                                );\n                            })}\n                        </FormItem>\n                    </Row>\n                    <Alert message=\"用例信息\" type=\"info\" style={{backgroundColor:'#c7e7ff',border:'0px','marginBottom':'10px'}}/>\n                    <Row>\n                        <FormItem {...this.formItemLayout} label=\"用例名\">\n                            {getFieldDecorator('name', {\n                                initialValue: caseDetailData.name,\n                                rules: [{ required: true, message: '请填写用例名!' }],\n                            })(\n                                <Input style={{ width: 365 }} pllaceholder=\"请填写用例名\" onChange={this.inputChange.bind(this,'name')}/>\n                            )}\n                        </FormItem>\n                        <FormItem {...this.formItemLayout} label=\"优先级\">\n                            <span>\n                                 {getFieldDecorator('priority', {\n                                     initialValue: caseDetailData.priority,\n                                     rules: [{ required: true, message: '请选择优先级!' }],\n                                 })(\n                                     <Select style={{ width: 120 }} onChange={this.optionChange.bind(this,'priority')}>\n                                         <Option value=\"0\">0</Option>\n                                         <Option value=\"1\">1</Option>\n                                         <Option value=\"2\">2</Option>\n                                         <Option value=\"3\">3</Option>\n                                     </Select>\n                                 )}\n                                &nbsp;&nbsp;&nbsp;\n                                <Tag color=\"magenta\"> P0为最高，P3为最低 </Tag>\n                            </span>\n                        </FormItem>\n                    </Row>\n                    <Row>\n                        <FormItem {...this.formItemLayout} label=\"用例标签\">\n                            <SingleTag tags={caseTags} getTags={this.getCaseTags} deleteTags={this.deleteCaseTags}/>\n                        </FormItem>\n                    </Row>\n                    <Row>\n                        <FormItem {...this.formItemLayout} label=\"描述\">\n                            {getFieldDecorator('desc', {\n                                initialValue: caseDetailData.desc,\n                                rules: [{ required: false, message: '请填写用例描述!' }],\n                            })(\n                                <TextArea rows={3} style={{ width: 852 }} onChange={this.inputChange.bind(this,'desc')}/>\n                            )}\n                        </FormItem>\n                    </Row>\n                    <Alert message=\"接口参数信息\" type=\"info\" style={{backgroundColor:'#c7e7ff',border:'0px'}}/>\n                    <Row>\n                        <div style={{float:'left',width:'48%'}}>\n                            <b>接口入参：</b>\n                            <ReactJson src={eval(\"(\"+detailData.argsJsonFormat+\")\")}  enableClipboard={this.handleCopy} name={null}  theme=\"google\" style={{border:'1px solid #ccc','height':'180px','maxHeight':'180px','overflow-y':'auto' }}/>\n                            <b>接口出参：</b>\n                            <ReactJson src={eval(\"(\"+detailData.resultJsonFormat+\")\")}  enableClipboard={this.handleCopy} name={null} theme=\"google\" style={{border:'1px solid #ccc','height':'189px','maxHeight':'189px','overflow-y':'auto' }}/>\n                        </div>\n                        <div style={{float:'right',width:'51%'}}>\n                            <FormItem {...this.formItemLayout} label=\"\" >\n                                {getFieldDecorator('paramScript', {\n                                    initialValue: caseDetailData.paramScript,\n                                    rules: [{ required: false, message: '请填写接口参数信息!' }],\n                                })(\n                                    <TextArea rows={16} style={{'width':'1300px','marginTop':'19px',display:this.state.isCompressDisplay }} onChange={this.inputChange.bind(this,'paramScript')}/>\n                                )}\n                            </FormItem>\n                            <ReactJson src={mockJson}  enableClipboard={false}  name={null} style={{\"border\":'1px solid #ccc','height':'343px','marginBottom':'5px','maxHeight':'343px','overflow-y':'auto',\"display\":this.state.isJsonFormatDisplay  }}/>\n\n                            <Button type=\"primary\" style={{marginBottom:'5px'}} onClick={this.compressParams}>压缩</Button>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\n                            <Button type=\"primary\" style={{marginBottom:'5px'}} onClick={this.jsonFormat}>格式化</Button>\n                        </div>\n                    </Row>\n                    <Alert message=\"dubbo contextParams\" type=\"info\" style={{backgroundColor:'#c7e7ff',border:'0px','marginBottom':'10px','marginTop':'6px'}}/>\n                    <Row>\n                        <div style={{float:'left',width:'48%'}}>\n                            {/*{*/}\n                                {/*getUrlParam('caseId',window.location.search) != \"\" ?*/}\n                                    {/*<TextArea rows={6} style={{ width: 600}} value={caseDetailData.contextParamScript} placeholder='如果此dubbo接口是供hop网关使用，则可能需要填写dubbo context,如：{\"userId\":\"5c0e5e0c881f449b9fe50923ea8f6183\"}，也可以参考右侧格式' onChange={this.inputChange.bind(this,'contextParamScript')}/> : <TextArea rows={6} style={{ width: 600}}  placeholder='如果此dubbo接口是供hop网关使用，则可能需要填写dubbo context,如：{\"userId\":\"5c0e5e0c881f449b9fe50923ea8f6183\"}，也可以参考右侧格式' onChange={this.inputChange.bind(this,'contextParamScript')}/>*/}\n                            {/*}*/}\n                            {getFieldDecorator('contextParamScript', {\n                                initialValue: caseDetailData.contextParamScript,\n                                rules: [{ required: false, message: '多个assert的规则需要换行写!' }],\n                            })(\n                                <TextArea rows={6}  style={{ width: 600 }}  onChange={this.inputChange.bind(this,'contextParamScript')}/>\n                            )}\n                        </div>\n                        <div style={{float:'right',width:'50%'}}>\n                            如果此dubbo接口是供hop网关使用，则可能需要填写dubbo context，如：\n                            <ReactJson src={this.state.leg} name={null}  enableClipboard={this.handleCopy} style={{border:'1px solid #ccc','height':'113px','marginBottom':'5px','maxHeight':'113px','overflow-y':'auto'  }}/>\n                        </div>\n                    </Row>\n                    <Alert message=\"结果校验规则（如：assert self.result.data != null:'结果data不能为空'）\" type=\"info\" style={{backgroundColor:'#c7e7ff',border:'0px','marginBottom':'10px'}}/>\n                    <Row>\n                        <div style={{float:'left',width:'48%'}}>\n                            {/*{*/}\n                                {/*getUrlParam('caseId',window.location.search) != \"\" ?*/}\n                                    {/*<TextArea rows={6} style={{ width: 600 }} value={caseDetailData.validScript} placeholder=\"多个assert的规则需要换行写\" onChange={this.inputChange.bind(this,'validScript')}/>*/}\n                                    {/*:*/}\n                                    {/*<TextArea rows={6} style={{ width: 600 }} placeholder=\"多个assert的规则需要换行写\" onChange={this.inputChange.bind(this,'validScript')}/>*/}\n                            {/*}*/}\n                            {getFieldDecorator('validScript', {\n                                initialValue: caseDetailData.validScript,\n                                rules: [{ required: false, message: '多个assert的规则需要换行写!' }],\n                            })(\n                                <TextArea rows={6}  style={{ width: 600 }}  onChange={this.inputChange.bind(this,'validScript')}/>\n                            )}\n                        </div>\n                        <div style={{float:'right',width:'50%'}}>\n                            示例一：校验后返回布尔值作为校验结果(不推荐)return self.result.data != null<br/>\n                            示例二：使用强断言校验结果(推荐)assert self.result.data != null <br/>\n                            示例三：使用断言校验结果(推荐)assert self.result.data != null:'data不能为空'<br/>\n                            示例四：多个判断<br/>\n                            assert self.result.data != null:'结果data不能为空' <br/>\n                            assert self.result.data.itemId !=null:'结果itemId不能为空'  &nbsp;&nbsp;<a href=\"http://k.yangtuojia.com/pages/viewpage.action?pageId=18827049\" target=\"_blank\" ><Icon type=\"question-circle\" /> 更多写法帮助</a><br/>\n                        </div>\n                    </Row>\n                    <Row>\n                        <FormItem {...this.formItemLayout} label=\"\" style={{display:insertButtonStatus}}>\n                            <Button type=\"primary\" htmlType=\"submit\" style={{marginBottom:'8px'}}>添加用例</Button>\n                        </FormItem>\n                        <FormItem {...this.formItemLayout} label=\"\" style={{display:updateButtonStatus}}>\n                            <Button type=\"primary\" htmlType=\"submit\" style={{marginBottom:'8px'}}>修改用例</Button>\n                        </FormItem>\n                        <FormItem {...this.formItemLayout} label=\"\" style={{display:updateButtonStatus}}>\n                            <Button type=\"primary\" htmlType=\"submit\" style={{marginBottom:'8px'}} onClick={()=>{window.open(\"/edit_testcase?type=copy&apiId=\" + getUrlParam('apiId',window.location.search) + \"&caseId=\" + getUrlParam('caseId',window.location.search))}}>复制用例</Button>\n                        </FormItem>\n                        <FormItem {...this.formItemLayout} label=\"\" style={{display:updateButtonStatus}}>\n                            <Button type=\"primary\" style={{marginBottom:'8px'}} onClick={this.testCaseExe}>保存并执行</Button>\n                        </FormItem>\n                        <FormItem {...this.formItemLayout} label=\"\" style={{display:updateButtonStatus}}>\n                            {getFieldDecorator('dubboGroup', {\n                                initialValue: varValue,\n                                rules: [{ required: false, message: '请输入执行环境!' }],\n                            })(\n                                <Input placeholder=\"请输入执行环境\" style={{ width: 280 }}  allowClear={true} style={{ width: 220 }}  onChange={this.changeInput.bind(this) }/>\n                            )}\n                        </FormItem>\n\n                    </Row>\n                </Form>\n                <ExeCaseDrawer exeDetailData={exeDetailData} drawerVisible={drawerVisible}></ExeCaseDrawer>\n            </div>\n        )\n    }\n}\n\nexport default Form.create()(InsertIndex)"],"sourceRoot":""}