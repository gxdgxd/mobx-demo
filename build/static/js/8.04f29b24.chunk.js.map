{"version":3,"sources":["container/TreeManager/InsertTreeModal.js","container/TreeManager/TreeManager.js","container/TestCaseManager/SearchForm.js","container/TestCaseManager/ExeCaseDrawer.js","container/TestCaseManager/config.js","container/TestCaseManager/ExeCaseModal.js","container/TestCaseManager/index.js"],"names":["FormItem","Item","InsertTreeModal","inject","observer","props","state","this","form","validateFieldsAndScroll","err","values","TreeManagerStore","insertTreeModule","hideTreeModal","n","e","target","value","changeTableRequestData","getFieldDecorator","treeModalVisible","tableRequestData","modalName","destroyOnClose","title","width","visible","onOk","okModal","bind","onCancel","hideModal","okText","cancelText","className","layout","formItemLayout","label","initialValue","name","rules","required","message","style","placeholder","onChange","inputChange","Component","create","TreeNode","TreeManager","onSelect","selectedKeys","info","console","log","appId","node","dataRef","moduleId","appName","moduleName","pageType","TestCaseManagerStore","initData","ApiManagerStore","setTreeParams","handleAddTree","item","stopPropagation","id","showTreeModal","type","handleEditTree","handleDeleteTree","deleteTree","getNodeTitle","level","onClick","theme","onConfirm","onLoadData","treeNode","a","children","getTreeModuleDataSouce","parentId","renderTreeNodes","data","map","key","getTreeAppDataSouce","treeAppDataSource","maxHeight","loadData","Option","SearchForm","handleSearch","handleCreatorSearch","CommonStore","getAllCreators","setState","handleCreatorChange","labelCol","span","wrapperCol","undefined","getAllTags","v","allTags","allCreators","gutter","allowClear","optionChange","showSearch","defaultActiveFirstOption","showArrow","filterOption","onSearch","notFoundContent","d","userId","realName","TextArea","ExeCaseDrawer","onClose","hideCaseDrawer","copy","success","exeDetailData","drawerVisible","caseData","toJS","caseExeRecords","statusStr","status","color","resultStatus","succeed","testCase","placement","operatorName","env","exeTimeStr","testApi","backgroundColor","border","src","eval","sampleResult","enableClipboard","handleCopy","rows","param","contextParamScript","columns","context","dataIndex","fixed","render","text","record","length","substr","str","validScript","paramScript","desc","apiClassName","apiMethodName","content","row","insertHref","apiId","apiHref","updateHref","href","showExeCaseModal","ExeCaseModal","timerExe","result","ExeRecordStore","getDetailData","timerDate","setInterval","tick","scheduleType","params","caseIds","exeCase","code","hideExeCaseModal","showCaseDrawer","warn","clearInterval","handleClearTimeout","exeCaseModalVisible","config","top","TestCaseManagerList","batchExeCase","selectedRowKeys","selectedRows","i","push","onChangePage","page","setBreadcrumb","dataSource","pageNo","pageSize","totalCount","mydataSource","bordered","pagination","scroll","x","y","current","total"],"mappings":"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","file":"static/js/8.04f29b24.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport { observer, inject } from 'mobx-react';\nimport {Row, Form, Input, Modal} from 'antd';\nconst FormItem = Form.Item;\n\n\n@inject('TreeManagerStore')\n@observer\nclass InsertTreeModal extends Component{\n    constructor(props){\n        super(props);\n        this.state={\n        }\n    }\n\n    okModal(){\n        this.props.form.validateFieldsAndScroll((err, values) => {\n            if (!err) {\n                this.props.TreeManagerStore.insertTreeModule();\n            }\n        });\n    }\n\n    hideModal(){\n        this.props.TreeManagerStore.hideTreeModal();\n    }\n    /**\n     * 输入框和单选按钮产生的change事件\n     * @param n\n     * @param e\n     */\n    inputChange(n,e) {\n        let obj={};\n        obj[n]=e.target.value;\n        this.props.TreeManagerStore.changeTableRequestData(n,e.target.value);\n    }\n\n    render(){\n        const { getFieldDecorator } = this.props.form;\n        const { treeModalVisible,tableRequestData,modalName} = this.props\n        return (\n            <Modal\n                destroyOnClose\n                title={modalName}\n                width=\"900px\"\n                visible={treeModalVisible}\n                onOk={this.okModal.bind(this)}\n                onCancel={this.hideModal.bind(this)}\n                okText=\"保存\"\n                cancelText=\"取消\"\n                className=\"model\" width={500} >\n\n                <Form  layout=\"inline\" className=\"ant-advanced-search-form p-xs pb-0\">\n                    <Row>\n                        <FormItem {...this.formItemLayout} label=\"模块名称\" >\n                            {getFieldDecorator('name', {\n                                initialValue: tableRequestData.name,\n                                rules: [{ required: true, message: '请填写模块名称!' }],\n                            })(\n                                <Input  style={{ width: 250 }} placeholder='请填写模块名称!' onChange={this.inputChange.bind(this,'name')}/>\n                            )}\n                        </FormItem>\n                    </Row>\n                </Form>\n            </Modal>\n        )\n    }\n}\n\nexport default Form.create()(InsertTreeModal)\n","import React, {Component} from 'react';\nimport { observable, action, computed } from 'mobx';\nimport { observer, inject } from 'mobx-react';\nimport {  Icon,Tree, Popconfirm} from 'antd';\nimport InsertTreeModal from './InsertTreeModal';\nimport TreeManagerStore from \"../../stores/TreeManager/TreeManagerStore\";\n\nconst { TreeNode } = Tree;\n\n@inject('TreeManagerStore','TestCaseManagerStore','ApiManagerStore')\n@observer\nclass TreeManager extends Component {\n    componentDidMount() {\n        this.props.TreeManagerStore.getTreeAppDataSouce();\n    }\n    constructor(props){\n        super(props);\n    }\n    onSelect = (selectedKeys, info) => {\n        console.log(info)\n        let appId = info.node.props.dataRef.appId\n        let moduleId = info.node.props.dataRef.moduleId\n        let appName = info.node.props.dataRef.appName\n        let moduleName = info.node.props.dataRef.moduleName\n        let pageType = this.props.pageType\n        if(pageType == 'case'){\n            this.props.TestCaseManagerStore.initData(1,appId,moduleId)\n        }else if(pageType == \"api\"){\n            this.props.ApiManagerStore.initData(1,appId,moduleId)\n        }else if(pageType == \"insertApi\"){\n            this.props.ApiManagerStore.setTreeParams(appId,moduleId,appName,moduleName)\n        }else if(pageType == \"updateApi\"){\n            this.props.ApiManagerStore.setTreeParams(appId,moduleId,appName,moduleName)\n        }\n    };\n    /**\n     * 新增节点\n     */\n    handleAddTree = (e,item) => {\n        e.stopPropagation();\n        if (item.id) {\n            console.log(e.target.value)\n            this.props.TreeManagerStore.showTreeModal({\n                moduleName:\"添加模块\",\n                type:\"insert\",\n                item:item\n            })\n        }\n    };\n    /**\n     * 编辑节点\n     */\n    handleEditTree = (e,item) => {\n        e.stopPropagation();\n        if (item.id) {\n            this.props.TreeManagerStore.showTreeModal({\n                moduleName:\"修改模块\",\n                type:\"update\",\n                item:item,\n            });\n        }\n    };\n    /**\n     * 编辑节点\n     */\n    handleDeleteTree = (item) => {\n        if (item.id) {\n            this.props.TreeManagerStore.deleteTree(item)\n        }\n    };\n    /**\n     * 获取节点的title内容\n     */\n    getNodeTitle = (title, id, level,item) => {\n        return (\n            <div className=\"tree-title\">\n                <span>\n                    {title}\n                </span>\n                <div className=\"tree-parent-div \">\n                    <span className=\"tree-span\" onClick={e => this.handleAddTree(e,item)}>\n                       {level !== 4 &&\n                            <Icon type=\"plus-circle\" theme=\"outlined\"/>\n                       }\n                    </span>\n                    <span className=\"tree-span\"  onClick={e => this.handleEditTree(e,item)}>\n                       {level != 1 &&\n                            <Icon type=\"form\" theme=\"outlined\" />\n                       }\n                    </span>\n                    <span className=\"tree-span\" >\n                         {level != 1 &&\n                              <Popconfirm title=\"确定删除此参数吗？\" onConfirm={() => this.handleDeleteTree(item)}>\n                                 <Icon type=\"delete\" theme=\"outlined\"/>\n                              </Popconfirm>\n                         }\n                    </span>\n                </div>\n            </div>\n        );\n    };\n    onLoadData = async (treeNode) => {\n        if (treeNode.props.children) {\n            return;\n        }\n        await this.props.TreeManagerStore.getTreeModuleDataSouce(treeNode.props.dataRef,treeNode.props.dataRef.parentId)\n    }\n\n    renderTreeNodes = (data, level) => {\n        return (\n            data.map(item => {\n                const title = this.getNodeTitle(item.title, item.id, level,item);\n                if (item.children) {\n                    return (\n                        <TreeNode title={title} key={item.id} dataRef={item}>\n                            {this.renderTreeNodes(item.children,level + 1)}\n                        </TreeNode>\n                    );\n                }\n                return <TreeNode {...item} title={title} key={item.id} dataRef={item} />;\n            })\n        );\n    };\n\n    render(){\n        const {treeAppDataSource,treeModalVisible,tableRequestData,modalName} = this.props.TreeManagerStore\n        return(\n            <div style={{'maxHeight':this.props.maxHeight,'overflow-y':'auto' }}>\n                <Tree onSelect={this.onSelect} loadData={this.onLoadData}>{this.renderTreeNodes(treeAppDataSource,1)}</Tree>\n                <InsertTreeModal modalName={modalName} treeModalVisible={treeModalVisible} tableRequestData={tableRequestData}></InsertTreeModal>\n            </div>\n        )\n    }\n}\n\nexport default TreeManager;","import React, { Component } from 'react';\nimport { observer, inject } from 'mobx-react';\nimport {  Button, Select,Icon, Row, Col, Form, Input } from 'antd';\n\nconst FormItem = Form.Item;\nconst Option = Select.Option;\n\n@inject('TestCaseManagerStore','CommonStore')\n@observer\nclass SearchForm extends Component{\n    constructor(props){\n        super(props);\n        this.state={\n            data: [],\n            value: undefined,\n        }\n    }\n    componentDidMount() {\n        this.props.CommonStore.getAllTags();\n    }\n\n    inputChange(n,e) {\n        this.props.TestCaseManagerStore.changeTableRequestData(n,e.target.value);\n    }\n    optionChange(n,v) {\n        this.props.TestCaseManagerStore.changeTableRequestData(n,v || '');\n    }\n    handleSearch = () => {\n        this.props.TestCaseManagerStore.initData(1);\n    }\n    handleCreatorSearch = value => {\n        if (value) {\n            this.props.CommonStore.getAllCreators(value)\n        } else {\n            this.setState({ data: [] });\n        }\n    };\n\n    handleCreatorChange = value => {\n        this.setState({ value });\n        this.props.TestCaseManagerStore.changeTableRequestData('creatorId',value);\n    };\n    formItemLayout = {\n        labelCol: { span: 5 },\n        wrapperCol: { span: 19 },\n    }\n\n    render(){\n        const {allTags,allCreators} = this.props.CommonStore\n\n        return (\n            <Form className=\"ant-advanced-search-form p-xs pb-0\" >\n                <Row gutter={48}>\n                    <Col span={7}>\n                        <FormItem {...this.formItemLayout} label=\"接口ID\">\n                            <Input placeholder=\"请输入接口ID\" allowClear={true} onChange={this.inputChange.bind(this,'apiId')}/>\n                        </FormItem>\n                    </Col>\n                    <Col span={7}>\n                        <FormItem {...this.formItemLayout} label=\"用例名\">\n                            <Input placeholder=\"请输入用例名\"  allowClear={true} onChange={this.inputChange.bind(this,'name')}/>\n                        </FormItem>\n                    </Col>\n                    <Col span={7}>\n                        <FormItem {...this.formItemLayout} label=\"标签\">\n                            <Select name=\"tagId\" allowClear={true} placeholder=\"请选择标签搜索\"\n                                    onChange={this.optionChange.bind(this,'tagId')}>\n                                {allTags.map(item => <Option key={item.id} value={item.id}>{item.value}</Option>)}\n                            </Select>\n                        </FormItem>\n                    </Col>\n                </Row>\n                <Row gutter={48}>\n                    <Col span={7}>\n                        <FormItem {...this.formItemLayout} label=\"创建人\">\n                            <Select\n                                showSearch  allowClear={true}\n                                value={this.state.value}\n                                placeholder=\"请输入真名搜索(非花名)\"\n                                style={this.props.style}\n                                defaultActiveFirstOption={false}\n                                showArrow={false}\n                                filterOption={false}\n                                onSearch={this.handleCreatorSearch}\n                                onChange={this.handleCreatorChange}\n                                notFoundContent={null}\n                            >\n                                {allCreators.map(d => <Option key={d.userId}>{d.realName}</Option>)}\n                            </Select>\n                        </FormItem>\n                    </Col>\n                    <Col span={7}>\n                        <FormItem {...this.formItemLayout} label=\"优先级\">\n                            <Select  placeholder=\"请选择优先级搜索\"  allowClear={true} onChange={this.optionChange.bind(this,'priority')}>\n                                <Option value=\"1\">1</Option>\n                                <Option value=\"2\">2</Option>\n                                <Option value=\"3\">3</Option>\n                                <Option value=\"4\">4</Option>\n                            </Select>\n                        </FormItem>\n                    </Col>\n                    <Col span={3} style={{'marginTop':'3px'}}>\n                        <Button type=\"primary\"  onClick={this.handleSearch}>\n                            <Icon type=\"search\" /> 搜索\n                        </Button>\n                    </Col>\n                </Row>\n            </Form>\n        )\n    }\n}\n\nexport default Form.create()(SearchForm)\n\n","import React, { Component } from 'react';\nimport { observer, inject } from 'mobx-react';\nimport { Row,Col,Form, Drawer, Tag ,Alert,Input} from 'antd';\nimport ReactJson from 'react-json-view'\nimport {toJS} from \"mobx/lib/mobx\";\nimport {message} from \"antd/lib/index\";\nconst { TextArea } = Input;\n\n@inject('TestCaseManagerStore')\n@observer\nclass ExeCaseDrawer extends Component{\n    constructor(props){\n        super(props);\n        this.state={\n            visible:false\n        }\n    }\n\n    onClose = () => {\n        this.props.TestCaseManagerStore.hideCaseDrawer()\n    };\n    handleCopy(copy){\n        message.success(\"复制成功\")\n    }\n    render(){\n        const {exeDetailData,drawerVisible} = this.props\n        let caseData = toJS(exeDetailData.caseExeRecords)\n        let statusStr = \"\"\n        if(exeDetailData.status == 0){\n            statusStr = <Tag color=\"#f50\">待执行</Tag>\n        }else if(exeDetailData.status == 1){\n            statusStr = <Tag color=\"#2db7f5\">执行中</Tag>\n        }else if(exeDetailData.status == 2){\n            statusStr = <Tag color=\"#87d068\">已完成</Tag>\n        }\n        let resultStatus = \"\"\n        if(typeof caseData != \"undefined\"){\n            if(caseData[0].succeed == true){\n                resultStatus = <Tag color=\"#87d068\">执行成功</Tag>\n            }else if(caseData[0].succeed == false){\n                resultStatus = <Tag color=\"#f50\">执行失败</Tag>\n            }\n        }\n\n        console.log(typeof caseData == 'undefined' ? \"\" : caseData[0].testCase)\n        const style = {\n            'marginBottom':'8px'\n        }\n        return (\n            <Drawer\n                title=\"执行结果\" width={720}\n                placement=\"right\"\n                onClose={this.onClose}\n                visible={drawerVisible}\n            >\n                <Row gutter={48} style={style}>\n                    <Col span={13}>\n                        {typeof caseData == 'undefined' ? \"\" : caseData[0].testCase.name}\n                    </Col>\n                    <Col span={6}>\n                        任务状态：{statusStr}\n                    </Col>\n                </Row>\n                <Row gutter={48} style={style}>\n                    <Col span={13}>\n                        操作人：{exeDetailData.operatorName}\n                    </Col>\n                    <Col span={10}>\n                        执行环境：{exeDetailData.env}\n                    </Col>\n                </Row>\n                <Row gutter={48} style={style}>\n                    <Col span={13}>\n                        执行时间：{exeDetailData.exeTimeStr}\n                    </Col>\n                    <Col span={8}>\n                        执行结果：{resultStatus}\n                    </Col>\n                </Row>\n                <Row gutter={48} style={style}>\n                    <Col span={13}>\n                        接口名： {typeof caseData == 'undefined' ? \"\" : caseData[0].testCase.testApi.name}\n                    </Col>\n                </Row>\n                <Alert message=\"校验结果\" type=\"info\" style={{backgroundColor:'#c7e7ff',border:'0px','marginBottom':'10px'}}/>\n                <pre>\n                    {typeof caseData == 'undefined' ? \"\" : caseData[0].message == null ? \"暂无结果\":caseData[0].message}\n                </pre>\n                <Alert message=\"接口实际返回结果\" type=\"info\" style={{backgroundColor:'#c7e7ff',border:'0px','marginBottom':'10px'}}/>\n                <ReactJson src={typeof caseData == 'undefined' ? \"\" : eval(\"(\"+caseData[0].sampleResult+\")\")} name={null}  enableClipboard={this.handleCopy} style={{border:'1px solid #ccc','height':'153px','marginBottom':'5px','maxHeight':'153px','overflow-y':'auto'  }}/>\n\n                <Alert message=\"请求入参\" type=\"info\" style={{backgroundColor:'#c7e7ff',border:'0px','marginBottom':'10px'}}/>\n                <TextArea rows={5} style={{'width':'670px','marginBottom':'6px'}} value={typeof caseData == 'undefined' ? \"\" : caseData[0].param}/>\n                <Alert message=\"dubbo contextParams\" type=\"info\" style={{backgroundColor:'#c7e7ff',border:'0px','marginBottom':'10px'}}/>\n                <TextArea rows={3} style={{'width':'670px','marginBottom':'6px'}} value={typeof caseData == 'undefined' ? \"\" : caseData[0].testCase.contextParamScript}/>\n            </Drawer>\n        )\n    }\n}\n\nexport default Form.create()(ExeCaseDrawer)\n","import React  from 'react';\nimport { Popover} from 'antd';\nimport common from \"../../style/common.css\";\n\nexport const columns = (context) => [\n\n    {\n        title: '用例ID',\n        dataIndex: 'id',\n        key: 'id',\n        width:80,\n        fixed: 'left',\n    },\n    {\n        title: '用例名称',\n        dataIndex: 'name',\n        key: 'name',\n        width:200,\n        render:function(text, record){\n            var name = record.name.length > 16 ? record.name.substr(0,16) + '...' : record.name;\n            let str = <div>\n                        <span>用例名称：{record.name}</span><br/>\n                        <span>校验规则：{record.validScript}</span><br/>\n                        <span>入参：{record.paramScript}</span><br/>\n                        <span>其他参数：{record.contextParamScript}</span><br/>\n                        <span>描述：{record.desc}</span><br/>\n                        <span>接口路径：{record.testApi.apiClassName}</span><br/>\n                        <span>方法名：{record.testApi.apiMethodName}</span><br/>\n                        <span>接口名：{record.testApi.name}</span><br/>\n                      </div>\n            return (\n                <span  >\n                    <Popover content={str} >\n                       <font color=\"#d2a216\">{name}</font>\n                    </Popover>\n                </span>\n            )\n        }\n    },\n    {\n        title: '优先级',\n        dataIndex: 'priority',\n        key: 'priority',\n        width:80\n    },\n    {\n        title: '应用',\n        dataIndex: 'appName',\n        key: 'appName',\n        width:100,\n    },\n    {\n        title: '模块',\n        dataIndex: 'moduleName',\n        key: 'moduleName',\n        width:150,\n    },\n    {\n        title: '接口ID',\n        dataIndex: 'apiId',\n        key: 'apiId',\n        width:80\n    },\n    {\n        title: '创建人',\n        dataIndex: 'creatorName',\n        key: 'creatorName',\n        width:150,\n    },\n    {\n        title: '更新时间',\n        dataIndex: 'editTimeStr',\n        key: 'editTimeStr',\n        width:200\n    },\n    {\n        title: '操作',\n        width: '27%',\n        key: 'operation',\n        width:267,\n        fixed: 'right',\n        render:(row,record) => {\n            let insertHref = '/edit_testcase?apiId=' + record.apiId\n            let apiHref = '/update_api?apiId=' + record.apiId\n            let updateHref = '/edit_testcase?apiId=' + record.apiId + \"&caseId=\" + record.id\n            return (\n                <span>\n                    <a href={updateHref} target=\"_blank\">修改用例</a>&nbsp;\n                    <a href={insertHref} target=\"_blank\" className=\"vLine\"> 追加用例</a>&nbsp;\n                    <a href={apiHref} target=\"_blank\" className=\"vLine\"> 查看接口</a>&nbsp;\n                    <a onClick={context.showExeCaseModal.bind(context,[record.id])} className=\"vLine\"> 执行</a>\n                </span>\n            )\n        }\n    }\n];\n\n\n\n","import React, { Component } from 'react';\nimport { observer, inject } from 'mobx-react';\nimport { Select,Form, Input, Modal } from 'antd';\nimport {message} from \"antd/lib/index\";\n\nconst FormItem = Form.Item;\n\n@inject('TestCaseManagerStore','ExeRecordStore')\n@observer\nclass ExeCaseModal extends Component{\n    constructor(props){\n        super(props);\n        this.state={\n            scheduleType:'',\n            env:''\n        }\n    }\n\n    okModal(){\n        this.props.form.validateFieldsAndScroll( async (err, values) => {\n            if (!err) {\n                let params =  {\"id\":null,\"caseIds\":this.props.caseIds,\"scheduleType\":1,\"env\":this.state.env}\n                let result = await this.props.TestCaseManagerStore.exeCase(params,'case');\n                if(result.code == 200){\n                    this.hideExeCaseModal()\n                    this.timerExe(result)\n                    await this.props.TestCaseManagerStore.showCaseDrawer()\n                }else{\n                    message.warn(\"执行出现错误\")\n                }\n\n            }\n        });\n    }\n    timerExe = async(result) => {\n        let data = await this.props.ExeRecordStore.getDetailData(result.data)\n        this.timerDate = setInterval(()=> this.tick(data.status),1000);\n    }\n    handleClearTimeout(){\n        this.timerDate && clearInterval(this.timerDate);\n    }\n    componentWillUnmount(){\n        this.handleClearTimeout()\n    }\n    tick(status){\n        if(status == 2){\n            this.handleClearTimeout()\n        }\n    }\n\n    hideExeCaseModal(){\n        this.props.TestCaseManagerStore.hideExeCaseModal();\n    }\n\n    formItemLayout = {\n        labelCol: { span: 5 },\n        wrapperCol: { span: 19 },\n    }\n    render(){\n        const { getFieldDecorator } = this.props.form;\n        const { exeCaseModalVisible} = this.props\n\n        return (\n            <Modal\n                destroyOnClose\n                title=\"执行用例\"\n                width=\"800px\"\n                visible={exeCaseModalVisible}\n                onOk={this.okModal.bind(this)}\n                onCancel={this.hideExeCaseModal.bind(this)}\n                okText=\"执行\"\n                cancelText=\"取消\"\n                className=\"model\">\n                <Form className=\"ant-advanced-search-form p-xs pb-0\" >\n                    <FormItem {...this.formItemLayout} label=\"执行环境\">\n                        {getFieldDecorator('env', {\n                            rules: [{ required: true, message: '请输入执行环境!' }],\n                        })(\n                            <Input placeholder=\"请输入执行环境\"  style={{ width: 220 }}  onChange={e => this.setState({ env: e.target.value })}/>\n                        )}\n                    </FormItem>\n                    <FormItem {...this.formItemLayout} label=\"执行方式\">\n                        <span>并行执行</span>\n                    </FormItem>\n                </Form>\n\n            </Modal>\n        )\n    }\n}\n\nexport default Form.create()(ExeCaseModal)\n","import React, {Component} from 'react';\nimport { observable, action, computed } from 'mobx';\nimport { observer, inject } from 'mobx-react';\nimport { Table,Pagination,Row, Col,Button} from 'antd';\nimport {columns} from './config';\nimport SearchForm from './SearchForm';\nimport ExeCaseModal from './ExeCaseModal';\nimport ExeCaseDrawer from './ExeCaseDrawer'\nimport TreeManager from '../TreeManager/TreeManager';\nimport {message} from \"antd/lib/index\";\nmessage.config({\n    top: 200\n});\n@inject('TestCaseManagerStore','CommonStore','SceneManagerStore','ExeRecordStore')\n@observer\nclass TestCaseManagerList extends Component {\n    componentDidMount() {\n        this.props.setBreadcrumb([\n            {name: '用例管理'},\n        ]);\n        this.props.TestCaseManagerStore.initData(1);\n\n    }\n    constructor(props){\n        super(props);\n        this.state= {\n            selectedRowKeys:[],\n            selectedRows:[]\n        }\n    }\n    /**\n     * 执行用例\n     */\n    batchExeCase = () => {\n        if(this.state.selectedRowKeys.length <= 0){\n            message.warn(\"请先勾选需要执行的用例\")\n            return\n        }\n        let rows = this.state.selectedRows\n        let caseIds = []\n        for (let i = 0; i < rows.length ; i++) {\n            caseIds.push(rows[i].id)\n        }\n        this.showExeCaseModal(caseIds)\n        // let params =  {\"id\":null,\"caseIds\":this.props.caseIds,\"scheduleType\":1,\"env\":this.state.env}\n        // this.props.TestCaseManagerStore.exeCase(params,\"case\");\n        // this.props.SceneManagerStore.insertCase(this.state.selectedRows);\n        // this.props.history.push(\"/insert_scene\")\n\n        // <Button type=\"primary\" style={{'marginBottom':'7px'}} onClick={this.batchExeCase.bind(this)} >\n        // 批量执行\n        // </Button>\n    }\n    onChangePage = page => {\n        this.props.TestCaseManagerStore.initData(page);\n    };\n    showExeCaseModal(caseIds){\n        this.props.TestCaseManagerStore.showExeCaseModal(caseIds);\n    }\n    render(){\n        const {dataSource,pageNo,pageSize,totalCount,exeCaseModalVisible,caseIds,drawerVisible} = this.props.TestCaseManagerStore\n        const mydataSource = dataSource.toJS()\n        const rowSelection = {\n            onChange: (selectedRowKeys, selectedRows) => {\n                console.log(`selectedRowKeys: ${selectedRowKeys}`, 'selectedRows: ', selectedRows);\n                this.setState({\n                    selectedRowKeys: selectedRowKeys,\n                    selectedRows: selectedRows\n                });\n            }\n        };\n        const {exeDetailData} = this.props.ExeRecordStore\n        return(\n            <div className=\"container-bg\">\n                <Row>\n                    <Col span={4}>\n                        <TreeManager pageType=\"case\" maxHeight=\"700px\"/>\n                    </Col>\n                    <Col span={20}>\n                        <SearchForm/>\n\n                        <Table\n                            bordered\n                            columns={columns(this)} pagination={false} scroll={{ x: 1380, y: 600 }}\n                            dataSource={mydataSource}  />\n                        <Pagination onChange={this.onChangePage} pageSize={pageSize} current={pageNo}  total={totalCount} style={{'marginTop':'6px','float':'right'}}/>\n                        <ExeCaseModal exeCaseModalVisible={exeCaseModalVisible} caseIds={caseIds}></ExeCaseModal>\n                        <ExeCaseDrawer exeDetailData={exeDetailData} drawerVisible={drawerVisible}></ExeCaseDrawer>\n\n                    </Col>\n                </Row>\n            </div>\n        )\n    }\n}\n\nexport default TestCaseManagerList;"],"sourceRoot":""}