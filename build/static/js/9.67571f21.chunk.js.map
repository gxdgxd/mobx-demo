{"version":3,"sources":["container/TreeManager/InsertTreeModal.js","container/TreeManager/TreeManager.js","container/TestCaseManager/SearchForm.js","container/TestCaseManager/ExeCaseDrawer.js","container/TestCaseManager/config.js","container/TestCaseManager/ExeCaseModal.js","container/TestCaseManager/index.js"],"names":["FormItem","Item","InsertTreeModal","inject","observer","props","state","this","form","validateFieldsAndScroll","err","values","TreeManagerStore","insertTreeModule","hideTreeModal","n","e","target","value","changeTableRequestData","getFieldDecorator","treeModalVisible","tableRequestData","modalName","destroyOnClose","title","width","visible","onOk","okModal","bind","onCancel","hideModal","okText","cancelText","className","layout","formItemLayout","label","initialValue","name","rules","required","message","style","placeholder","onChange","inputChange","Component","create","TreeNode","TreeManager","onNodeSelect","selectedKeys","info","console","log","node","appId","moduleId","appName","moduleName","level","pageType","TestCaseManagerStore","initData","ApiManagerStore","setTreeParams","onExpand","expandedKeys","setState","handleAddTree","parentId","item","stopPropagation","id","showTreeModal","type","handleEditTree","handleDeleteTree","deleteTree","getNodeTitle","onClick","theme","onConfirm","renderTree","data","map","modules","length","key","getTreeData","treeAppDataSource","maxHeight","onSelect","Option","SearchForm","handleSearch","handleCreatorSearch","CommonStore","getAllCreators","handleCreatorChange","labelCol","span","wrapperCol","undefined","getAllTags","v","allTags","allCreators","gutter","allowClear","optionChange","showSearch","defaultActiveFirstOption","showArrow","filterOption","onSearch","notFoundContent","d","userId","realName","TextArea","ExeCaseDrawer","onClose","hideCaseDrawer","copy","success","exeDetailData","drawerVisible","caseData","toJS","caseExeRecords","statusStr","color","status","resultStatus","succeed","testCase","placement","spinning","operatorName","env","exeTimeStr","testApi","backgroundColor","border","src","eval","sampleResult","enableClipboard","handleCopy","rows","param","contextParamScript","ExeCaseModal","a","params","caseIds","GlobalManagerStore","varValue","loading","exeCase","result","code","recordId","hideExeCaseModal","showCaseDrawer","ExeRecordStore","getDetailData","timerExe","warn","timerDate","setInterval","tick","handleClearTimeout","clearInterval","scheduleType","exeCaseModalVisible","confirmLoading","changeInput","href","PureComponent","Sider","config","top","TestCaseManagerList","batchExeCase","selectedRowKeys","selectedRows","i","push","showExeCaseModal","onChangePage","page","getColumnSearchProps","dataIndex","filterDropdown","setSelectedKeys","confirm","clearFilters","padding","ref","searchInput","onPressEnter","marginBottom","display","icon","size","marginRight","handleReset","filterIcon","filtered","onFilter","record","toString","toLowerCase","includes","onFilterDropdownVisibleChange","setTimeout","select","render","text","searchedColumn","highlightStyle","searchWords","searchText","autoEscape","textToHighlight","onCollapse","collapsed","setBreadcrumb","getVarDetail","deleteCase","context","dataSource","pageNo","pageSize","totalCount","mydataSource","minHeight","collapsible","bordered","columns","fixed","str","apiClassName","apiMethodName","argsTypeNames","content","row","tags","tag","index","isLongTag","tagElem","slice","insertHref","apiId","apiHref","updateHref","window","open","pagination","scroll","x","y","current","total"],"mappings":"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","file":"static/js/9.67571f21.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport { observer, inject } from 'mobx-react';\nimport {Row, Form, Input, Modal} from 'antd';\nconst FormItem = Form.Item;\n\n\n@inject('TreeManagerStore')\n@observer\nclass InsertTreeModal extends Component{\n    constructor(props){\n        super(props);\n        this.state={\n        }\n    }\n\n    okModal(){\n        this.props.form.validateFieldsAndScroll((err, values) => {\n            if (!err) {\n                this.props.TreeManagerStore.insertTreeModule();\n            }\n        });\n    }\n\n    hideModal(){\n        this.props.TreeManagerStore.hideTreeModal();\n    }\n    /**\n     * 输入框和单选按钮产生的change事件\n     * @param n\n     * @param e\n     */\n    inputChange(n,e) {\n        let obj={};\n        obj[n]=e.target.value;\n        this.props.TreeManagerStore.changeTableRequestData(n,e.target.value);\n    }\n\n    render(){\n        const { getFieldDecorator } = this.props.form;\n        const { treeModalVisible,tableRequestData,modalName} = this.props\n        return (\n            <Modal\n                destroyOnClose\n                title={modalName}\n                width=\"900px\"\n                visible={treeModalVisible}\n                onOk={this.okModal.bind(this)}\n                onCancel={this.hideModal.bind(this)}\n                okText=\"保存\"\n                cancelText=\"取消\"\n                className=\"model\" width={500} >\n\n                <Form  layout=\"inline\" className=\"ant-advanced-search-form p-xs pb-0\">\n                    <Row>\n                        <FormItem {...this.formItemLayout} label=\"模块名称\" >\n                            {getFieldDecorator('name', {\n                                initialValue: tableRequestData.name,\n                                rules: [{ required: true, message: '请填写模块名称!' }],\n                            })(\n                                <Input  style={{ width: 250 }} placeholder='请填写模块名称!' onChange={this.inputChange.bind(this,'name')}/>\n                            )}\n                        </FormItem>\n                    </Row>\n                </Form>\n            </Modal>\n        )\n    }\n}\n\nexport default Form.create()(InsertTreeModal)\n","import React, {Component} from 'react';\nimport { observable, action, computed } from 'mobx';\nimport { observer, inject } from 'mobx-react';\nimport {  Icon,Tree, Popconfirm} from 'antd';\nimport InsertTreeModal from './InsertTreeModal';\nimport TreeManagerStore from \"../../stores/TreeManager/TreeManagerStore\";\n\nconst { TreeNode } = Tree;\n\n@inject('TreeManagerStore','TestCaseManagerStore','ApiManagerStore')\n@observer\nclass TreeManager extends Component {\n    componentDidMount() {\n        this.props.TreeManagerStore.getTreeData();\n    }\n    constructor(props){\n        super(props);\n        this.state={\n            expandedKeys: []\n        }\n    }\n    onNodeSelect = (selectedKeys, info) => {\n        console.log(selectedKeys,info.node.props)\n        let level = info.node.props.level\n        let appId = \"\";\n        let moduleId = \"\"\n        let appName = \"\"\n        let moduleName = \"\"\n        if(level == 1){\n            appId = selectedKeys[0]\n            appName = info.node.props.title\n        }else{\n            appId = info.node.props.appId\n            moduleId = info.node.props.moduleId\n            appName = info.node.props.appName\n            moduleName = info.node.props.moduleName\n        }\n        console.log(\"appid\",appId,\"moduleId\",moduleId,\"appName\",appName,\"moduleName\",moduleName)\n        // let appId = info.node.props.dataRef.appId\n        // let moduleId = info.node.props.dataRef.moduleId\n        // let appName = info.node.props.dataRef.appName\n        // let moduleName = info.node.props.dataRef.moduleName\n        let pageType = this.props.pageType\n        if(pageType == 'case'){\n            this.props.TestCaseManagerStore.initData(1,appId,moduleId)\n        }\n        else if(pageType == \"api\"){\n            this.props.ApiManagerStore.initData(1,appId,moduleId)\n        }else if(pageType == \"insertApi\"){\n            this.props.ApiManagerStore.setTreeParams(appId,moduleId,appName,moduleName)\n        }else if(pageType == \"updateApi\"){\n            this.props.ApiManagerStore.setTreeParams(appId,moduleId,appName,moduleName)\n        }\n    };\n    /**\n     * 点击某个节点展开\n     */\n    onExpand = expandedKeys => {\n        this.setState({\n            expandedKeys\n        });\n    };\n\n    /**\n     * 新增节点\n     */\n    handleAddTree = (e,parentId,item) => {\n        e.stopPropagation();\n        if (item.id) {\n            console.log(e.target.value)\n            this.props.TreeManagerStore.showTreeModal({\n                moduleName:\"添加模块\",\n                type:\"insert\",\n                item:item,\n                parentId:parentId\n            })\n        }\n    };\n    /**\n     * 编辑节点\n     */\n    handleEditTree = (e,parentId,item) => {\n        e.stopPropagation();\n        if (item.id) {\n            this.props.TreeManagerStore.showTreeModal({\n                moduleName:\"修改模块\",\n                type:\"update\",\n                item:item,\n                parentId:parentId\n            });\n        }\n    };\n    /**\n     * 编辑节点\n     */\n    handleDeleteTree = (item) => {\n        if (item.id) {\n            this.props.TreeManagerStore.deleteTree(item)\n        }\n    };\n    /**\n     * 获取节点的title内容\n     */\n    getNodeTitle = (title, id, level,parentId,item) => {\n        return (\n            <div className=\"tree-title\">\n                <span>\n                    {title}\n                </span>\n                <div className=\"tree-parent-div \">\n                    <span className=\"tree-span\" onClick={e => this.handleAddTree(e,parentId,item)}>\n                       {level !== 5 &&\n                            <Icon type=\"plus-circle\" theme=\"outlined\"/>\n                       }\n                    </span>\n                    <span className=\"tree-span\"  onClick={e => this.handleEditTree(e,parentId,item)}>\n                       {level != 1 &&\n                            <Icon type=\"form\" theme=\"outlined\" />\n                       }\n                    </span>\n                    <span className=\"tree-span\" >\n                         {level != 1 &&\n                              <Popconfirm title=\"确定删除此参数吗？\" onConfirm={() => this.handleDeleteTree(item)}>\n                                 <Icon type=\"delete\" theme=\"outlined\"/>\n                              </Popconfirm>\n                         }\n                    </span>\n                </div>\n            </div>\n        );\n    };\n    /**\n     * 递归生成树节点\n     */\n    renderTree = (data, level, parentId) => {\n        return (\n            data &&\n            data.map(item => {\n                const title = this.getNodeTitle(item.name, item.id, level,parentId, item);\n                if (item.modules && item.modules.length > 0) {\n                    return (\n                        <TreeNode title={title} key={item.id} level={level} appId={item.appId} moduleId={item.id} appName={item.appName} moduleName={item.name} >\n                            {this.renderTree(item.modules, level + 1, item.id, item.id)}\n                        </TreeNode>\n                    );\n                }\n                return <TreeNode title={title} key={item.id} level={level} appId={item.appId} appName={item.appName} moduleId={item.id} moduleName={item.name} />;\n            })\n        );\n    };\n\n    render(){\n        const {treeAppDataSource,treeModalVisible,tableRequestData,modalName} = this.props.TreeManagerStore\n        return(\n            <div style={{'maxHeight':this.props.maxHeight,'overflow-y':'auto' }}>\n                <Tree expandedKeys={this.state.expandedKeys} onSelect={this.onNodeSelect} onExpand={this.onExpand}>{this.renderTree(treeAppDataSource,1,0)}</Tree>\n                <InsertTreeModal modalName={modalName} treeModalVisible={treeModalVisible} tableRequestData={tableRequestData}></InsertTreeModal>\n            </div>\n        )\n    }\n}\n\nexport default TreeManager;","import React, { Component } from 'react';\nimport { observer, inject } from 'mobx-react';\nimport {  Button, Select,Icon, Row, Col, Form, Input } from 'antd';\n\nconst FormItem = Form.Item;\nconst Option = Select.Option;\n\n@inject('TestCaseManagerStore','CommonStore')\n@observer\nclass SearchForm extends Component{\n    constructor(props){\n        super(props);\n        this.state={\n            data: [],\n            value: undefined,\n        }\n    }\n    componentDidMount() {\n        this.props.CommonStore.getAllTags();\n    }\n\n    inputChange(n,e) {\n        this.props.TestCaseManagerStore.changeTableRequestData(n,e.target.value);\n    }\n    optionChange(n,v) {\n        this.props.TestCaseManagerStore.changeTableRequestData(n,v || '');\n    }\n    handleSearch = () => {\n        this.props.TestCaseManagerStore.initData(1);\n    }\n    handleCreatorSearch = value => {\n        if (value) {\n            this.props.CommonStore.getAllCreators(value)\n        } else {\n            this.setState({ data: [] });\n        }\n    };\n\n    handleCreatorChange = value => {\n        this.setState({ value });\n        this.props.TestCaseManagerStore.changeTableRequestData('creatorId',value);\n    };\n    formItemLayout = {\n        labelCol: { span: 5 },\n        wrapperCol: { span: 19 },\n    }\n\n    render(){\n        const {allTags,allCreators} = this.props.CommonStore\n\n        return (\n            <Form className=\"ant-advanced-search-form p-xs pb-0\" >\n                <Row gutter={48}>\n\n                    <Col span={7}>\n                        <FormItem {...this.formItemLayout} label=\"用例名\">\n                            <Input placeholder=\"请输入用例名\"  allowClear={true} onChange={this.inputChange.bind(this,'name')}/>\n                        </FormItem>\n                    </Col>\n                    <Col span={7}>\n                        <FormItem {...this.formItemLayout} label=\"标签\">\n                            <Select name=\"tagId\" allowClear={true} placeholder=\"请选择标签搜索\"\n                                    onChange={this.optionChange.bind(this,'tagId')}>\n                                {allTags.map(item => <Option key={item.id} value={item.id}>{item.value}</Option>)}\n                            </Select>\n                        </FormItem>\n                    </Col>\n                    <Col span={7}>\n                        <FormItem {...this.formItemLayout} label=\"创建人\">\n                            <Select\n                                showSearch  allowClear={true}\n                                value={this.state.value}\n                                placeholder=\"请输入真名搜索(非花名)\"\n                                style={this.props.style}\n                                defaultActiveFirstOption={false}\n                                showArrow={false}\n                                filterOption={false}\n                                onSearch={this.handleCreatorSearch}\n                                onChange={this.handleCreatorChange}\n                                notFoundContent={null}\n                            >\n                                {allCreators.map(d => <Option key={d.userId}>{d.realName}</Option>)}\n                            </Select>\n                        </FormItem>\n                    </Col>\n                </Row>\n                <Row gutter={48}>\n                    <Col span={7}>\n                        <FormItem {...this.formItemLayout} label=\"接口ID\">\n                            <Input placeholder=\"请输入接口ID\" allowClear={true} onChange={this.inputChange.bind(this,'apiId')}/>\n                        </FormItem>\n                    </Col>\n\n                    <Col span={7}>\n                        <FormItem {...this.formItemLayout} label=\"优先级\">\n                            <Select  placeholder=\"请选择优先级搜索\"  allowClear={true} onChange={this.optionChange.bind(this,'priority')}>\n                                <Option value=\"0\">0</Option>\n                                <Option value=\"1\">1</Option>\n                                <Option value=\"2\">2</Option>\n                                <Option value=\"3\">3</Option>\n                            </Select>\n                        </FormItem>\n                    </Col>\n                    <Col span={3} style={{'marginTop':'3px'}}>\n                        <Button type=\"primary\"  onClick={this.handleSearch}>\n                            <Icon type=\"search\" /> 搜索\n                        </Button>\n                    </Col>\n                </Row>\n            </Form>\n        )\n    }\n}\n\nexport default Form.create()(SearchForm)\n\n","import React, { Component } from 'react';\nimport { observer, inject } from 'mobx-react';\nimport { Row,Col,Form, Drawer, Tag ,Alert,Input,Spin} from 'antd';\nimport ReactJson from 'react-json-view'\nimport {toJS} from \"mobx/lib/mobx\";\nimport {message} from \"antd/lib/index\";\nconst { TextArea } = Input;\n\n@inject('TestCaseManagerStore')\n@observer\nclass ExeCaseDrawer extends Component{\n    constructor(props){\n        super(props);\n        this.state={\n            visible:false\n        }\n    }\n\n    onClose = () => {\n        this.props.TestCaseManagerStore.hideCaseDrawer()\n    };\n    handleCopy(copy){\n        message.success(\"复制成功\")\n    }\n    render(){\n        const {exeDetailData,drawerVisible} = this.props\n        let caseData = toJS(exeDetailData.caseExeRecords)\n        let statusStr = <Tag color=\"#2db7f5\">执行中</Tag>\n        if(exeDetailData.status == 0){\n            statusStr = <Tag color=\"#f50\">待执行</Tag>\n        }else if(exeDetailData.status == 1){\n            statusStr = <Tag color=\"#2db7f5\">执行中</Tag>\n        }else if(exeDetailData.status == 2){\n            statusStr = <Tag color=\"#87d068\">已完成</Tag>\n        }\n        let resultStatus = \"\"\n        if(typeof caseData != \"undefined\"){\n            if(caseData[0].succeed == true){\n                resultStatus = <Tag color=\"#87d068\">执行成功</Tag>\n            }else if(caseData[0].succeed == false){\n                resultStatus = <Tag color=\"#f50\">执行失败</Tag>\n            }\n        }\n\n        console.log(typeof caseData == 'undefined' ? \"\" : caseData[0].testCase)\n        const style = {\n            'marginBottom':'8px'\n        }\n        return (\n\n            <Drawer\n                title=\"执行结果\" width={720}\n                placement=\"right\"\n                onClose={this.onClose}\n                visible={drawerVisible}\n            >\n                <Spin spinning={exeDetailData.status == 1 ? true : false}>\n                <Row gutter={48} style={style}>\n                    <Col span={13}>\n                        {typeof caseData == 'undefined' ? \"\" : caseData[0].testCase.name}\n                    </Col>\n                    <Col span={6}>\n                        任务状态：{statusStr}\n                    </Col>\n                </Row>\n                <Row gutter={48} style={style}>\n                    <Col span={13}>\n                        操作人：{exeDetailData.operatorName}\n                    </Col>\n                    <Col span={10}>\n                        执行环境：{exeDetailData.env}\n                    </Col>\n                </Row>\n                <Row gutter={48} style={style}>\n                    <Col span={13}>\n                        执行时间：{exeDetailData.exeTimeStr}\n                    </Col>\n                    <Col span={8}>\n                        执行结果：{resultStatus}\n                    </Col>\n                </Row>\n                <Row gutter={48} style={style}>\n                    <Col span={13}>\n                        接口名： {typeof caseData == 'undefined' ? \"\" : caseData[0].testCase.testApi.name}\n                    </Col>\n                </Row>\n                <Alert message=\"校验结果\" type=\"info\" style={{backgroundColor:'#c7e7ff',border:'0px','marginBottom':'10px'}}/>\n                <pre>\n                    {typeof caseData == 'undefined' ? \"\" : caseData[0].message == null ? \"暂无结果\":caseData[0].message}\n                </pre>\n                <Alert message=\"接口实际返回结果\" type=\"info\" style={{backgroundColor:'#c7e7ff',border:'0px','marginBottom':'10px'}}/>\n                <ReactJson src={typeof caseData == 'undefined' ? \"\" : eval(\"(\"+caseData[0].sampleResult+\")\")} name={null}  enableClipboard={this.handleCopy} style={{border:'1px solid #ccc','height':'153px','marginBottom':'5px','maxHeight':'153px','overflow-y':'auto'  }}/>\n\n                <Alert message=\"请求入参\" type=\"info\" style={{backgroundColor:'#c7e7ff',border:'0px','marginBottom':'10px'}}/>\n                <TextArea rows={5} style={{'width':'670px','marginBottom':'6px'}} value={typeof caseData == 'undefined' ? \"\" : caseData[0].param}/>\n                <Alert message=\"dubbo contextParams\" type=\"info\" style={{backgroundColor:'#c7e7ff',border:'0px','marginBottom':'10px'}}/>\n                <TextArea rows={3} style={{'width':'670px','marginBottom':'6px'}} value={typeof caseData == 'undefined' ? \"\" : caseData[0].testCase.contextParamScript}/>\n                </Spin>\n            </Drawer>\n\n        )\n    }\n}\n\nexport default Form.create()(ExeCaseDrawer)\n","import React  from 'react';\nimport { Popover,Popconfirm,Tag,Tooltip} from 'antd';\nimport common from \"../../style/common.css\";\nimport {getUrlParam} from \"../../utils/common\";\n\nexport const columns = (context) => [\n\n    {\n        title: '用例ID',\n        dataIndex: 'id',\n        key: 'id',\n        width:80,\n        fixed: 'left',\n    },\n    {\n        title: '用例名称',\n        dataIndex: 'name',\n        key: 'name',\n        width:350,\n    },\n    {\n        title: '应用',\n        dataIndex: 'appName',\n        key: 'appName',\n        width:100,\n        ...context.getColumnSearchProps('appName'),\n    },\n    {\n        title: '接口路径',\n        dataIndex: 'apiClassName',\n        key: 'apiClassName',\n        width:300,\n        render:function(text, record){\n            let str = <div>\n                <span>接口名：{record.testApi.name}</span><br/>\n                <span>接口路径：{record.testApi.apiClassName}</span><br/>\n                <span>方法名：{record.testApi.apiMethodName}</span><br/>\n                <span>参数类型：{record.testApi.argsTypeNames}</span><br/>\n            </div>\n            return (\n                <span>\n                    <Popover content={str} >\n                       {record.testApi.apiClassName}\n                    </Popover>\n                </span>\n            )\n        }\n    },\n    {\n        title: '方法名',\n        dataIndex: 'apiMethodName',\n        key: 'apiMethodName',\n        width:170,\n        render:function(text, record){\n            return (\n                <span>\n                    {record.testApi.apiMethodName}\n                </span>\n            )\n        }\n    },\n    {\n        title: '优先级',\n        dataIndex: 'priority',\n        key: 'priority',\n        width:80\n    },\n    {\n        title: '用例标签',\n        dataIndex: 'tags',\n        key: 'tags',\n        width:230,\n        render:(row,record) => {\n\n            return (\n                <span>\n                    {record.tags.map((tag, index) => {\n                        const isLongTag = tag.length > 20;\n                        const tagElem = (\n                            <Tag key={tag.id} color=\"purple\">\n                                {isLongTag ? `${tag.value.slice(0, 20)}...` : tag.value}\n                            </Tag>\n                        );\n                        return isLongTag ? (\n                            <Tooltip title={tag.value} key={tag.id}>\n                                {tagElem}\n                            </Tooltip>\n                        ) : (\n                            tagElem\n                        );\n                    })}\n                </span>\n            )\n        }\n    },\n    {\n        title: '创建人',\n        dataIndex: 'creatorName',\n        key: 'creatorName',\n        width:150,\n    },\n    {\n        title: '更新时间',\n        dataIndex: 'editTimeStr',\n        key: 'editTimeStr',\n        width:200\n    },\n    {\n        title: '操作',\n        key: 'operation',\n        width:280,\n        fixed: 'right',\n        render:(row,record) => {\n            let insertHref = '/edit_testcase?apiId=' + record.apiId\n            let apiHref = '/update_api?apiId=' + record.apiId\n            let updateHref = '/edit_testcase?apiId=' + record.apiId + \"&caseId=\" + record.id\n            return (\n                <span>\n                    <a href={updateHref} target=\"_blank\">修改</a>&nbsp;\n                    <a onClick={()=>{window.open(\"/edit_testcase?type=copy&apiId=\" + record.apiId + \"&caseId=\" + record.id)}} className=\"vLine\"> 复制</a>&nbsp;\n                    <a href={insertHref} target=\"_blank\" className=\"vLine\"> 追加</a>&nbsp;\n                    <a href={apiHref} target=\"_blank\" className=\"vLine\"> 接口</a>&nbsp;\n                    <a onClick={context.showExeCaseModal.bind(context,[record.id])} className=\"vLine\"> 执行</a>&nbsp;\n                    <Popconfirm title=\"确定删除此用例吗？\" onConfirm={() => context.deleteCase([record.id])} >\n                        <a href=\"#\"  className=\"vLine\"> 删除</a>\n                    </Popconfirm>\n                </span>\n            )\n        }\n    }\n];\n\n\n\n","import React, { PureComponent } from 'react';\nimport { observer, inject } from 'mobx-react';\nimport { Form, Input, Modal, Tag } from 'antd';\nimport { message } from \"antd/lib/index\";\n\nconst FormItem = Form.Item;\n\n@inject('TestCaseManagerStore', 'ExeRecordStore', 'GlobalManagerStore')\n@observer\nclass ExeCaseModal extends PureComponent {\n    constructor(props) {\n        super(props);\n        this.state = {\n            scheduleType: '',\n            recordId: 0,\n            loading: false,\n        };\n    }\n\n\n    okModal = () => {\n        this.props.form.validateFieldsAndScroll(async (err, values) => {\n            if (!err) {\n                let params = { \"id\": null, \"caseIds\": this.props.caseIds, \"scheduleType\": 1, \"env\": this.props.GlobalManagerStore.varValue };\n\n                this.setState({ loading: true });\n                let result = await this.props.TestCaseManagerStore.exeCase(params, 'case');\n                this.setState({ loading: false });\n\n                if (result.code == 200) {\n                    this.setState({\n                        recordId: result.data\n                    });\n\n                    // action\n                    this.hideExeCaseModal();\n                    this.props.TestCaseManagerStore.showCaseDrawer();\n\n                    // async\n                    this.props.ExeRecordStore.getDetailData(this.state.recordId);\n                    this.timerExe();\n\n                } else {\n                    message.warn(\"执行出现错误\");\n                }\n            }\n        });\n    }\n    timerExe = () => {\n        this.timerDate = setInterval(() => this.tick(), 3000);\n    }\n    handleClearTimeout = () => {\n        this.timerDate && clearInterval(this.timerDate);\n    }\n    componentWillUnmount() {\n        this.handleClearTimeout();\n    }\n\n    tick = async () => {\n        let detailData = await this.props.ExeRecordStore.getDetailData(this.state.recordId);\n\n        if (detailData.status == 2) {\n            this.handleClearTimeout();\n        }\n    }\n    changeInput(e) {\n        this.props.GlobalManagerStore.varValue = e.target.value;\n    }\n    hideExeCaseModal() {\n        this.props.TestCaseManagerStore.hideExeCaseModal();\n    }\n\n    formItemLayout = {\n        labelCol: { span: 5 },\n        wrapperCol: { span: 19 },\n    }\n\n    render() {\n        const { getFieldDecorator } = this.props.form;\n        const { exeCaseModalVisible } = this.props;\n        const { loading } = this.state;\n        const { varValue } = this.props.GlobalManagerStore;\n\n        return (\n            <Modal\n                destroyOnClose\n                title=\"执行用例\"\n                width=\"800px\"\n                visible={exeCaseModalVisible}\n                onOk={this.okModal.bind(this)}\n                onCancel={this.hideExeCaseModal.bind(this)}\n                okText=\"执行\"\n                cancelText=\"取消\"\n                confirmLoading={loading}\n                className=\"model\">\n                <Form className=\"ant-advanced-search-form p-xs pb-0\" >\n                    <FormItem {...this.formItemLayout} label=\"执行环境\">\n                        {getFieldDecorator('env', {\n                            initialValue: varValue,\n                            rules: [{ required: true, message: '请输入执行环境!' }],\n                        })(\n                            <Input placeholder=\"请输入执行环境\" allowClear={true} style={{ width: 220 }} onChange={this.changeInput.bind(this)} />\n                        )}\n                    </FormItem>\n                    <span style={{ 'paddingLeft': '160px' }}><Tag color=\"orange\">可以在参数管理中配置默认的环境变量，参数名称必须为:default_env <a href=\"/global_manager\" target=\"_blank\">前往配置</a></Tag></span>\n                    <FormItem {...this.formItemLayout} label=\"执行方式\">\n                        <span>并行执行</span>\n                    </FormItem>\n                </Form>\n\n            </Modal>\n        );\n    }\n}\n\nexport default Form.create()(ExeCaseModal);\n","import React, {Component} from 'react';\nimport { observable, action, computed } from 'mobx';\nimport { observer, inject } from 'mobx-react';\nimport { Table,Pagination,Row, Col,Button,Input,Icon,Layout,message} from 'antd';\nimport Highlighter from 'react-highlight-words';\n\nimport {columns} from './config';\nimport SearchForm from './SearchForm';\nimport ExeCaseModal from './ExeCaseModal';\nimport ExeCaseDrawer from './ExeCaseDrawer'\nimport TreeManager from '../TreeManager/TreeManager';\nconst { Sider } = Layout;\nmessage.config({\n    top: 200\n});\n@inject('TestCaseManagerStore','CommonStore','SceneManagerStore','ExeRecordStore','GlobalManagerStore')\n@observer\nclass TestCaseManagerList extends Component {\n    componentDidMount() {\n        this.props.setBreadcrumb([\n            {name: '用例管理'},\n        ]);\n        this.props.TestCaseManagerStore.initData(1);\n        this.props.GlobalManagerStore.getVarDetail(\"default_env\");\n    }\n    constructor(props){\n        super(props);\n        this.state= {\n            selectedRowKeys:[],\n            selectedRows:[],\n            collapsed:false\n        }\n    }\n    /**\n     * 执行用例\n     */\n    batchExeCase = () => {\n        if(this.state.selectedRowKeys.length <= 0){\n            message.warn(\"请先勾选需要执行的用例\")\n            return\n        }\n        let rows = this.state.selectedRows\n        let caseIds = []\n        for (let i = 0; i < rows.length ; i++) {\n            caseIds.push(rows[i].id)\n        }\n        this.showExeCaseModal(caseIds)\n        // let params =  {\"id\":null,\"caseIds\":this.props.caseIds,\"scheduleType\":1,\"env\":this.state.env}\n        // this.props.TestCaseManagerStore.exeCase(params,\"case\");\n        // this.props.SceneManagerStore.insertCase(this.state.selectedRows);\n        // this.props.history.push(\"/insert_scene\")\n\n        // <Button type=\"primary\" style={{'marginBottom':'7px'}} onClick={this.batchExeCase.bind(this)} >\n        // 批量执行\n        // </Button>\n    }\n    onChangePage = page => {\n        this.props.TestCaseManagerStore.initData(page);\n    };\n    showExeCaseModal(caseIds){\n        this.props.TestCaseManagerStore.showExeCaseModal(caseIds);\n    }\n    deleteCase(caseIds){\n        this.props.TestCaseManagerStore.deleteCase(caseIds);\n    }\n    /**\n     * 表头搜索触发\n     * @param dataIndex\n     * @returns {{filterDropdown: (function({setSelectedKeys: *, selectedKeys?: *, confirm?: *, clearFilters?: *}): *), filterIcon: (function(*): *), onFilter: (function(*, *): boolean), onFilterDropdownVisibleChange: onFilterDropdownVisibleChange, render: (function(*): *)}}\n     */\n    getColumnSearchProps = dataIndex => ({\n        filterDropdown: ({ setSelectedKeys, selectedKeys, confirm, clearFilters }) => (\n            <div style={{ padding: 8 }}>\n                <Input\n                    ref={node => {\n                        this.searchInput = node;\n                    }}\n                    placeholder={`Search ${dataIndex}`}\n                    value={selectedKeys[0]}\n                    onChange={e => setSelectedKeys(e.target.value ? [e.target.value] : [])}\n                    onPressEnter={() => this.handleSearch(selectedKeys, confirm, dataIndex)}\n                    style={{ width: 188, marginBottom: 8, display: 'block' }}\n                />\n                <Button\n                    type=\"primary\"\n                    onClick={() => this.handleSearch(selectedKeys, confirm, dataIndex)}\n                    icon=\"search\"\n                    size=\"small\"\n                    style={{ width: 90, marginRight: 8 }}\n                >\n                    Search\n                </Button>\n                <Button onClick={() => this.handleReset(clearFilters)} size=\"small\" style={{ width: 90 }}>\n                    Reset\n                </Button>\n            </div>\n        ),\n        filterIcon: filtered => (\n            <Icon type=\"search\" style={{ color: filtered ? '#1890ff' : undefined }} />\n        ),\n        onFilter: (value, record) =>\n            record[dataIndex]\n                .toString()\n                .toLowerCase()\n                .includes(value.toLowerCase()),\n        onFilterDropdownVisibleChange: visible => {\n            if (visible) {\n                setTimeout(() => this.searchInput.select());\n            }\n        },\n        render: text =>\n            this.state.searchedColumn === dataIndex ? (\n                <Highlighter\n                    highlightStyle={{ backgroundColor: '#ffc069', padding: 0 }}\n                    searchWords={[this.state.searchText]}\n                    autoEscape\n                    textToHighlight={text.toString()}\n                />\n            ) : (\n                text\n            ),\n    });\n    handleSearch = (selectedKeys, confirm, dataIndex) => {\n        confirm();\n        this.setState({\n            searchText: selectedKeys[0],\n            searchedColumn: dataIndex,\n        });\n    };\n\n    handleReset = clearFilters => {\n        clearFilters();\n        this.setState({ searchText: '' });\n    };\n    onCollapse = collapsed => {\n        console.log(collapsed);\n        this.setState({ collapsed });\n    };\n    /**\n     * 表头搜索触发 end\n     */\n    render(){\n        const {dataSource,pageNo,pageSize,totalCount,exeCaseModalVisible,caseIds,drawerVisible} = this.props.TestCaseManagerStore\n        const mydataSource = dataSource.toJS()\n        const rowSelection = {\n            onChange: (selectedRowKeys, selectedRows) => {\n                console.log(`selectedRowKeys: ${selectedRowKeys}`, 'selectedRows: ', selectedRows);\n                this.setState({\n                    selectedRowKeys: selectedRowKeys,\n                    selectedRows: selectedRows\n                });\n            }\n        };\n        const {exeDetailData} = this.props.ExeRecordStore\n\n        return(\n            <Layout style={{ minHeight: '100vh' }}>\n                <Sider collapsible collapsed={this.state.collapsed} onCollapse={this.onCollapse}>\n                    <TreeManager pageType=\"case\" maxHeight=\"700px\"/>\n                </Sider>\n                <Layout>\n                    <SearchForm/>\n                    <Table\n                        bordered\n                        columns={columns(this)} pagination={false} scroll={{ x: 1930, y: 600 }}\n                        dataSource={mydataSource}  />\n                    <Pagination onChange={this.onChangePage} pageSize={pageSize} current={pageNo}  total={totalCount} style={{'marginTop':'6px','float':'right'}}/>\n                    <ExeCaseModal exeCaseModalVisible={exeCaseModalVisible} caseIds={caseIds}   ></ExeCaseModal>\n                    <ExeCaseDrawer exeDetailData={exeDetailData} drawerVisible={drawerVisible}></ExeCaseDrawer>\n\n                </Layout>\n            </Layout>\n        )\n    }\n}\n\nexport default TestCaseManagerList;"],"sourceRoot":""}