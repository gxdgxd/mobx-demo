{"version":3,"sources":["container/TreeManager/InsertTreeModal.js","container/TreeManager/TreeManager.js","container/TagManager/SingleTag.js","container/ApiManager/Update/TreeModal.js","container/ApiManager/Update/index.js"],"names":["FormItem","Item","InsertTreeModal","inject","observer","props","state","this","form","validateFieldsAndScroll","err","values","TreeManagerStore","insertTreeModule","hideTreeModal","n","e","target","value","changeTableRequestData","getFieldDecorator","treeModalVisible","tableRequestData","modalName","destroyOnClose","title","width","visible","onOk","okModal","bind","onCancel","hideModal","okText","cancelText","className","layout","formItemLayout","label","initialValue","name","rules","required","message","style","placeholder","onChange","inputChange","Component","create","TreeNode","TreeManager","onSelect","selectedKeys","info","console","log","appId","node","dataRef","moduleId","appName","moduleName","pageType","TestCaseManagerStore","initData","ApiManagerStore","setTreeParams","handleAddTree","id","parentId","stopPropagation","showTreeModal","type","handleEditTree","parentIdF","handleDeleteTree","deleteTree","getNodeTitle","level","onClick","theme","onConfirm","onLoadData","treeNode","a","children","getTreeModuleDataSouce","renderTreeNodes","data","map","item","key","getTreeAppDataSouce","treeAppDataSource","maxHeight","loadData","SingleTag","handleClose","removedTag","tags","filter","tag","setState","showInput","inputVisible","input","focus","handleInputChange","inputValue","handleInputConfirm","indexOf","TagManagerStore","postInsertTag","result","getTags","saveInputRef","index","isLongTag","length","tagElem","closable","onClose","slice","ref","size","onBlur","onPressEnter","background","borderStyle","TreeModal","setDetailDataTreeParams","TextArea","DetailIndex","insertTags","handleSubmit","preventDefault","updateApi","setBreadcrumb","getApiDetailData","obj","changeDetailData","detailData","onSubmit","backgroundColor","border","groupId","disabled","artifactId","color","href","apiClassName","apiMethodName","creatorName","desc","rows","htmlType"],"mappings":"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","file":"static/js/9.58126915.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport { observer, inject } from 'mobx-react';\nimport {Row, Form, Input, Modal} from 'antd';\nconst FormItem = Form.Item;\n\n\n@inject('TreeManagerStore')\n@observer\nclass InsertTreeModal extends Component{\n    constructor(props){\n        super(props);\n        this.state={\n        }\n    }\n\n    okModal(){\n        this.props.form.validateFieldsAndScroll((err, values) => {\n            if (!err) {\n                this.props.TreeManagerStore.insertTreeModule();\n            }\n        });\n    }\n\n    hideModal(){\n        this.props.TreeManagerStore.hideTreeModal();\n    }\n    /**\n     * 输入框和单选按钮产生的change事件\n     * @param n\n     * @param e\n     */\n    inputChange(n,e) {\n        let obj={};\n        obj[n]=e.target.value;\n        this.props.TreeManagerStore.changeTableRequestData(n,e.target.value);\n    }\n\n    render(){\n        const { getFieldDecorator } = this.props.form;\n        const { treeModalVisible,tableRequestData,modalName} = this.props\n        return (\n            <Modal\n                destroyOnClose\n                title={modalName}\n                width=\"900px\"\n                visible={treeModalVisible}\n                onOk={this.okModal.bind(this)}\n                onCancel={this.hideModal.bind(this)}\n                okText=\"保存\"\n                cancelText=\"取消\"\n                className=\"model\" width={500} >\n\n                <Form  layout=\"inline\" className=\"ant-advanced-search-form p-xs pb-0\">\n                    <Row>\n                        <FormItem {...this.formItemLayout} label=\"模块名称\" >\n                            {getFieldDecorator('name', {\n                                initialValue: tableRequestData.name,\n                                rules: [{ required: true, message: '请填写模块名称!' }],\n                            })(\n                                <Input  style={{ width: 250 }} placeholder='请填写模块名称!' onChange={this.inputChange.bind(this,'name')}/>\n                            )}\n                        </FormItem>\n                    </Row>\n                </Form>\n            </Modal>\n        )\n    }\n}\n\nexport default Form.create()(InsertTreeModal)\n","import React, {Component} from 'react';\nimport { observable, action, computed } from 'mobx';\nimport { observer, inject } from 'mobx-react';\nimport {  Icon,Tree, Popconfirm} from 'antd';\nimport InsertTreeModal from './InsertTreeModal';\nimport TreeManagerStore from \"../../stores/TreeManager/TreeManagerStore\";\n\nconst { TreeNode } = Tree;\n\n@inject('TreeManagerStore','TestCaseManagerStore','ApiManagerStore')\n@observer\nclass TreeManager extends Component {\n    componentDidMount() {\n        this.props.TreeManagerStore.getTreeAppDataSouce();\n    }\n    constructor(props){\n        super(props);\n    }\n    onSelect = (selectedKeys, info) => {\n        console.log(info)\n        let appId = info.node.props.dataRef.appId\n        let moduleId = info.node.props.dataRef.moduleId\n        let appName = info.node.props.dataRef.appName\n        let moduleName = info.node.props.dataRef.moduleName\n        let pageType = this.props.pageType\n        if(pageType == 'case'){\n            this.props.TestCaseManagerStore.initData(1,appId,moduleId)\n        }else if(pageType == \"api\"){\n            this.props.ApiManagerStore.initData(1,appId,moduleId)\n        }else if(pageType == \"insertApi\"){\n            this.props.ApiManagerStore.setTreeParams(appId,moduleId,appName,moduleName)\n        }else if(pageType == \"updateApi\"){\n            this.props.ApiManagerStore.setTreeParams(appId,moduleId,appName,moduleName)\n        }\n    };\n    /**\n     * 新增节点\n     */\n    handleAddTree = (e,id,parentId,appId) => {\n        e.stopPropagation();\n        if (id) {\n            console.log(e.target.value)\n            this.props.TreeManagerStore.showTreeModal({\n                moduleName:\"添加模块\",\n                parentId:parentId,\n                appId:appId,\n                type:\"insert\"\n            })\n        }\n    };\n    /**\n     * 编辑节点\n     */\n    handleEditTree = (e, name,id,parentIdF,appId) => {\n        e.stopPropagation();\n        if (id) {\n            this.props.TreeManagerStore.showTreeModal({\n                id:id,\n                moduleName:\"修改模块\",\n                parentIdF:parentIdF,\n                appId:appId,\n                name:name,\n                type:\"update\"\n            });\n        }\n    };\n    /**\n     * 编辑节点\n     */\n    handleDeleteTree = (id,appId,parentId) => {\n        if (id) {\n            this.props.TreeManagerStore.deleteTree(id,appId,parentId)\n        }\n    };\n    /**\n     * 获取节点的title内容\n     */\n    getNodeTitle = (title, id, level,parentId,parentIdF,appId) => {\n        return (\n            <div className=\"tree-title\">\n                <span>\n                    {title}\n                </span>\n                <div className=\"tree-parent-div \">\n                    <span className=\"tree-span\" onClick={e => this.handleAddTree(e,id,parentId,appId)}>\n                       {level !== 4 &&\n                            <Icon type=\"plus-circle\" theme=\"outlined\"/>\n                       }\n                    </span>\n                    <span className=\"tree-span\"  onClick={e => this.handleEditTree(e, title,id,parentIdF,appId)}>\n                       {level != 1 &&\n                            <Icon type=\"form\" theme=\"outlined\" />\n                       }\n                    </span>\n                    <span className=\"tree-span\" >\n                         {level != 1 &&\n                              <Popconfirm title=\"确定删除此参数吗？\" onConfirm={() => this.handleDeleteTree(id,appId,parentId)}>\n                                 <Icon type=\"delete\" theme=\"outlined\"/>\n                              </Popconfirm>\n                         }\n                    </span>\n                </div>\n            </div>\n        );\n    };\n    onLoadData = async (treeNode) => {\n        if (treeNode.props.children) {\n            return;\n        }\n        this.props.TreeManagerStore.getTreeModuleDataSouce(treeNode.props.dataRef)\n    }\n\n    renderTreeNodes = (data, level) => {\n        return (\n            data.map(item => {\n                const title = this.getNodeTitle(item.title, item.id, level,item.parentId,item.parentIdF,item.appId);\n                if (item.children) {\n                    return (\n                        <TreeNode title={title} key={item.id} dataRef={item}>\n                            {this.renderTreeNodes(item.children,level + 1)}\n                        </TreeNode>\n                    );\n                }\n                return <TreeNode {...item} title={title} key={item.id} dataRef={item} />;\n            })\n        );\n    };\n\n    render(){\n        const {treeAppDataSource,treeModalVisible,tableRequestData,modalName} = this.props.TreeManagerStore\n        return(\n            <div style={{'maxHeight':this.props.maxHeight,'overflow-y':'auto' }}>\n                <Tree onSelect={this.onSelect} loadData={this.onLoadData}>{this.renderTreeNodes(treeAppDataSource,1)}</Tree>\n                <InsertTreeModal modalName={modalName} treeModalVisible={treeModalVisible} tableRequestData={tableRequestData}></InsertTreeModal>\n            </div>\n        )\n    }\n}\n\nexport default TreeManager;","import React, { Component } from 'react';\nimport { observer, inject } from 'mobx-react';\nimport { Tag,Icon, Input,Tooltip } from 'antd';\n\n@inject('TagManagerStore','ApiManagerStore')\n@observer\nclass SingleTag extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            tags:[],\n            inputVisible: false,\n            inputValue: '',\n        }\n    }\n\n    handleClose = removedTag => {\n        debugger\n        const tags = this.props.tags.filter(tag => tag.id !== removedTag);\n        console.log(tags);\n        this.setState({ tags });\n    };\n\n    showInput = () => {\n        this.setState({ inputVisible: true }, () => this.input.focus());\n    };\n\n    handleInputChange = e => {\n        this.setState({ inputValue: e.target.value });\n    };\n\n    handleInputConfirm = async () => {\n        const { inputValue } = this.state;\n        let { tags } = this.state\n        if (inputValue && tags.indexOf(inputValue) === -1) {\n            tags = [...tags, inputValue];\n        }\n        const result = await this.props.TagManagerStore.postInsertTag(tags[0])\n        let tag = {'id':result.data,'value':tags[0]}\n        this.props.getTags(tag)\n        this.setState({\n            inputVisible: false,\n            inputValue: '',\n        });\n    };\n\n    saveInputRef = input => (this.input = input);\n\n    render(){\n        const { inputVisible, inputValue} = this.state;\n        return(\n            <div>\n                {this.props.tags.map((tag, index) => {\n                    const isLongTag = tag.length > 20;\n                    const tagElem = (\n                        <Tag key={tag.id} closable onClose={() => this.handleClose(tag.id)}>\n                            {isLongTag ? `${tag.value.slice(0, 20)}...` : tag.value}\n                        </Tag>\n                    );\n                    return isLongTag ? (\n                        <Tooltip title={tag.value} key={tag.id}>\n                            {tagElem}\n                        </Tooltip>\n                    ) : (\n                        tagElem\n                    );\n                })}\n                {inputVisible && (\n                    <Input\n                        ref={this.saveInputRef}\n                        type=\"text\"\n                        size=\"small\"\n                        style={{ width: 78 }}\n                        value={inputValue}\n                        onChange={this.handleInputChange}\n                        onBlur={this.handleInputConfirm}\n                        onPressEnter={this.handleInputConfirm}\n                    />\n                )}\n                {!inputVisible && (\n                    <Tag onClick={this.showInput} style={{ background: '#fff', borderStyle: 'dashed' }}>\n                        <Icon type=\"plus\" /> New Tag\n                    </Tag>\n                )}\n            </div>\n        )\n    }\n}\n\nexport default SingleTag","import React, { Component } from 'react';\nimport { observer, inject } from 'mobx-react';\nimport { Table,Tag, Button,Alert, Radio, Select, Row, Col, Form, DatePicker, Input, Modal,Icon,Upload } from 'antd';\nimport TreeManager from '../../TreeManager/TreeManager';\nimport common from \"../../../style/common.css\";\n\n\n\n@inject('ApiManagerStore')\n@observer\nclass TreeModal extends Component{\n    constructor(props){\n        super(props);\n        this.state={\n        }\n    }\n\n    okModal(){\n        this.props.ApiManagerStore.setDetailDataTreeParams();\n    }\n\n    hideTreeModal(){\n        this.props.ApiManagerStore.hideTreeModal();\n    }\n\n    render(){\n        const { treeModalVisible} = this.props\n        return (\n            <Modal\n                destroyOnClose\n                title=\"添加\"\n                width=\"900px\"\n                visible={treeModalVisible}\n                onOk={this.okModal.bind(this)}\n                onCancel={this.hideTreeModal.bind(this)}\n                okText=\"保存\"\n                cancelText=\"取消\"\n                className=\"model\" width={500} >\n                <span>重新选择应用和模块（点击对应的应用和模块即为选中）</span>\n                <TreeManager pageType=\"updateApi\" maxHeight=\"420px\"/>\n            </Modal>\n        )\n    }\n}\n\nexport default Form.create()(TreeModal)\n","import React, { Component } from 'react';\nimport { observable, action, computed,toJS } from 'mobx';\nimport { observer, inject } from 'mobx-react';\nimport TreeModal from './TreeModal'\nimport { Tag, Button,Alert, Row, Form, Input,Icon } from 'antd';\nimport SingleTag from \"../../TagManager/SingleTag\";\nconst FormItem = Form.Item;\nconst { TextArea } = Input;\n\n\n@inject('ApiManagerStore','TagManagerStore')\n@observer\nclass DetailIndex extends Component{\n    componentDidMount() {\n        this.props.setBreadcrumb([\n            {name: '接口管理'},\n            {name: '修改接口'},\n        ]);\n        this.props.ApiManagerStore.getApiDetailData()\n    }\n    constructor(props){\n        super(props);\n        this.state={\n\n        }\n    }\n\n    /**\n     * 获取子组件SingleTag中用户输入的tag标签\n     */\n    getTags = (tags) => {\n        debugger\n        this.props.ApiManagerStore.insertTags(tags)\n    };\n    /**\n     * 输入框和单选按钮产生的change事件\n     * @param n\n     * @param e\n     */\n    inputChange(n,e) {\n        let obj={};\n        obj[n]=e.target.value;\n        this.setState(obj);\n        this.props.ApiManagerStore.changeDetailData(n,e.target.value);\n    }\n    handleSubmit = (e) => {\n\n        e.preventDefault();\n        this.props.form.validateFieldsAndScroll((err, values) => {\n            if (!err) {\n                this.props.ApiManagerStore.updateApi(1);\n            }\n        });\n    }\n\n    showTreeModal(){\n        this.props.ApiManagerStore.showTreeModal()\n    }\n    render(){\n        const { getFieldDecorator } = this.props.form;\n        const { detailData,tags,treeModalVisible} = this.props.ApiManagerStore\n\n        return (\n            <div  style={{'marginLeft':'15px'}}>\n                <Form  layout=\"inline\" className=\"ant-advanced-search-form p-xs pb-0\" onSubmit={this.handleSubmit}>\n                    <Alert message=\"api包信息\" type=\"info\" style={{backgroundColor:'#c7e7ff',border:'0px','marginBottom':'10px'}}/>\n                    <Row>\n                        <FormItem {...this.formItemLayout} label=\"groupId\">\n                            {getFieldDecorator('groupId', {\n                                initialValue: detailData.groupId,\n                                rules: [{ required: true, message: '请填写groupId!' }],\n                            })(\n                                <Input disabled style={{ width: 190 }} value={detailData.groupId}/>\n                            )}\n                        </FormItem>\n                        <FormItem {...this.formItemLayout} label=\"artifactId\">\n                            {getFieldDecorator('artifactId', {\n                                initialValue: detailData.artifactId,\n                                rules: [{ required: true, message: '请填写artifactId!' }],\n                            })(\n                                <Input disabled style={{ width: 190 }} value={detailData.groupId}/>\n                            )}\n                        </FormItem>\n                    </Row>\n                    <Alert message=\"接口信息\" type=\"info\" style={{backgroundColor:'#c7e7ff',border:'0px','marginBottom':'10px'}}/>\n                    <Row>\n\n                        <FormItem {...this.formItemLayout} label=\"\">\n                            <Tag color=\"geekblue\">接口归属应用：{detailData.appName}</Tag>\n                        </FormItem>\n                        <FormItem {...this.formItemLayout} label=\"\">\n                            <Tag color=\"geekblue\">接口归属模块：{detailData.moduleName}</Tag>\n                        </FormItem>\n                        <FormItem {...this.formItemLayout} label=\"\">\n                            <a href=\"#\" onClick={this.showTreeModal.bind(this)}><Icon type=\"edit\"></Icon> 编辑</a>\n                            <TreeModal treeModalVisible={treeModalVisible}></TreeModal>\n                        </FormItem>\n                    </Row>\n                    <Row>\n                        <FormItem {...this.formItemLayout} label=\"接口路径\">\n                            {getFieldDecorator('apiClassName', {\n                                initialValue: detailData.apiClassName,\n                                rules: [{ required: true, message: '请填写接口路径!' }],\n                            })(\n                                <Input disabled style={{ width: 823 }} />\n                            )}\n                        </FormItem>\n                    </Row>\n                    <Row>\n                        <FormItem {...this.formItemLayout} label=\"方法名\">\n                            {getFieldDecorator('apiMethodName', {\n                                initialValue: detailData.apiMethodName,\n                                rules: [{ required: true, message: '请填写方法名!' }],\n                            })(\n                                <Input disabled style={{ width: 375 }} />\n                            )}\n                        </FormItem>\n                        <FormItem {...this.formItemLayout} label=\"接口名\">\n                            {getFieldDecorator('name', {\n                                initialValue: detailData.name,\n                                rules: [{ required: true, message: '请填写接口名!' }],\n                            })(\n                                <Input style={{ width: 378 }} onChange={this.inputChange.bind(this,'name')} />\n                            )}\n                        </FormItem>\n                    </Row>\n                    <Row>\n                        <FormItem {...this.formItemLayout} label=\"创建人\">\n                            {getFieldDecorator('creatorName', {\n                                initialValue: detailData.creatorName,\n                                rules: [{ required: true, message: '请填写创建人!' }],\n                            })(\n                                <Input disabled style={{ width: 145 }} />\n                            )}\n                        </FormItem>\n                        <FormItem {...this.formItemLayout} label=\"接口标签\">\n                            <SingleTag tags={tags} getTags={this.getTags}/>\n                        </FormItem>\n                    </Row>\n                    <Row>\n                        <FormItem {...this.formItemLayout} label=\"描述\">\n                            {getFieldDecorator('desc', {\n                                initialValue: detailData.desc,\n                                rules: [{ required: false, message: '请填写描述!' }],\n                            })(\n                                <TextArea rows={3} style={{ width: 852 }} value={detailData.desc} onChange={this.inputChange.bind(this,'desc')}/>\n                            )}\n                        </FormItem>\n                    </Row>\n                    <Row>\n                        <Form.Item>\n                            <Button type=\"primary\" htmlType=\"submit\" >\n                                修改\n                            </Button>\n                        </Form.Item>\n                    </Row>\n                </Form>\n            </div>\n        )\n    }\n}\n\nexport default Form.create()(DetailIndex)\n"],"sourceRoot":""}