{"version":3,"sources":["container/TreeManager/InsertTreeModal.js","container/TreeManager/TreeManager.js","container/ApiManager/config.js","container/ApiManager/SearchForm.js","container/ApiManager/index.js"],"names":["FormItem","Item","InsertTreeModal","inject","observer","props","state","this","form","validateFieldsAndScroll","err","values","TreeManagerStore","insertTreeModule","hideTreeModal","n","e","target","value","changeTableRequestData","getFieldDecorator","treeModalVisible","tableRequestData","modalName","destroyOnClose","title","width","visible","onOk","okModal","bind","onCancel","hideModal","okText","cancelText","className","layout","formItemLayout","label","initialValue","name","rules","required","message","style","placeholder","onChange","inputChange","Component","create","TreeNode","TreeManager","onNodeSelect","selectedKeys","info","console","log","node","appId","moduleId","appName","moduleName","level","pageType","TestCaseManagerStore","initData","ApiManagerStore","setTreeParams","onExpand","expandedKeys","setState","handleAddTree","parentId","item","stopPropagation","id","showTreeModal","type","handleEditTree","handleDeleteTree","deleteTree","getNodeTitle","onClick","theme","onConfirm","renderTree","data","map","modules","length","key","getTreeData","treeAppDataSource","maxHeight","onSelect","columns","context","dataIndex","fixed","render","text","record","substr","content","getColumnSearchProps","str","apiMethodName","apiClassName","groupId","artifactId","row","tags","tag","index","isLongTag","tagElem","color","slice","updateHref","searchCaseHref","insertCaseHref","href","insertColumns","argsTypeNames","editable","desc","insertApi","Option","SearchForm","handleCreatorSearch","CommonStore","getAllCreators","handleCreatorChange","handleSubmit","preventDefault","labelCol","span","wrapperCol","undefined","v","allCreators","onSubmit","gutter","allowClear","showSearch","defaultActiveFirstOption","showArrow","filterOption","onSearch","notFoundContent","d","userId","realName","optionChange","allTags","htmlType","window","open","ApiManagerList","onChangePage","page","filterDropdown","setSelectedKeys","confirm","clearFilters","padding","ref","searchInput","onPressEnter","handleSearch","marginBottom","display","icon","size","marginRight","handleReset","filterIcon","filtered","onFilter","toString","toLowerCase","includes","onFilterDropdownVisibleChange","setTimeout","select","searchedColumn","highlightStyle","backgroundColor","searchWords","searchText","autoEscape","textToHighlight","json_str","autoExpandParent","setBreadcrumb","getAllTags","obj","dataSource","pageNo","pageSize","totalCount","mydataSource","toJS","bordered","scroll","x","y","pagination","current","total"],"mappings":"+XAGMA,EAAW,IAAKC,KAKhBC,EAFLC,YAAO,mB,GACPC,Y,cAEG,WAAYC,GAAO,IAAD,8BACd,4CAAMA,KACDC,MAAM,GAFG,E,uEAMR,IAAD,OACLC,KAAKF,MAAMG,KAAKC,yBAAwB,SAACC,EAAKC,GACrCD,GACD,EAAKL,MAAMO,iBAAiBC,wB,kCAMpCN,KAAKF,MAAMO,iBAAiBE,kB,kCAOpBC,EAAEC,GAEHA,EAAEC,OAAOC,MAChBX,KAAKF,MAAMO,iBAAiBO,uBAAuBJ,EAAEC,EAAEC,OAAOC,S,+BAGzD,IACGE,EAAsBb,KAAKF,MAAMG,KAAjCY,kBADJ,EAEmDb,KAAKF,MAApDgB,EAFJ,EAEIA,iBAAiBC,EAFrB,EAEqBA,iBAAiBC,EAFtC,EAEsCA,UAC1C,OACI,mCACIC,gBAAc,EACdC,MAAOF,EACPG,MAAM,QACNC,QAASN,EACTO,KAAMrB,KAAKsB,QAAQC,KAAKvB,MACxBwB,SAAUxB,KAAKyB,UAAUF,KAAKvB,MAC9B0B,OAAO,eACPC,WAAW,eACXC,UAAU,SATd,QAS6B,KAEzB,uBAAOC,OAAO,SAASD,UAAU,sCAC7B,2BACI,kBAACnC,EAAD,iBAAcO,KAAK8B,eAAnB,CAAmCC,MAAM,6BACpClB,EAAkB,OAAQ,CACvBmB,aAAcjB,EAAiBkB,KAC/BC,MAAO,CAAC,CAAEC,UAAU,EAAMC,QAAS,iDAFtCvB,CAIG,uBAAQwB,MAAO,CAAElB,MAAO,KAAOmB,YAAY,8CAAWC,SAAUvC,KAAKwC,YAAYjB,KAAKvB,KAAK,mB,GAnD7FyC,e,MA6Df,MAAKC,QAAL,CAAc/C,GC9DrBgD,G,WAAAA,UAIFC,EAFLhD,YAAO,mBAAmB,uBAAuB,kB,GACjDC,Y,cAKG,WAAYC,GAAO,IAAD,8BACd,4CAAMA,KAKV+C,aAAe,SAACC,EAAcC,GAC1BC,QAAQC,IAAIH,EAAaC,EAAKG,KAAKpD,OACnC,IACIqD,EAAQ,GACRC,EAAW,GACXC,EAAU,GACVC,EAAa,GACL,GALAP,EAAKG,KAAKpD,MAAMyD,OAMxBJ,EAAQL,EAAa,GACrBO,EAAUN,EAAKG,KAAKpD,MAAMoB,QAE1BiC,EAAQJ,EAAKG,KAAKpD,MAAMqD,MACxBC,EAAWL,EAAKG,KAAKpD,MAAMsD,SAC3BC,EAAUN,EAAKG,KAAKpD,MAAMuD,QAC1BC,EAAaP,EAAKG,KAAKpD,MAAMwD,YAEjCN,QAAQC,IAAI,QAAQE,EAAM,WAAWC,EAAS,UAAUC,EAAQ,aAAaC,GAK7E,IAAIE,EAAW,EAAK1D,MAAM0D,SACX,QAAZA,EACC,EAAK1D,MAAM2D,qBAAqBC,SAAS,EAAEP,EAAMC,GAEjC,OAAZI,EACJ,EAAK1D,MAAM6D,gBAAgBD,SAAS,EAAEP,EAAMC,GAC3B,aAAZI,EACL,EAAK1D,MAAM6D,gBAAgBC,cAAcT,EAAMC,EAASC,EAAQC,GAC/C,aAAZE,GACL,EAAK1D,MAAM6D,gBAAgBC,cAAcT,EAAMC,EAASC,EAAQC,IApCtD,EA0ClBO,SAAW,SAAAC,GACP,EAAKC,SAAS,CACVD,kBA5CU,EAmDlBE,cAAgB,SAACvD,EAAEwD,EAASC,GACxBzD,EAAE0D,kBACED,EAAKE,KACLpB,QAAQC,IAAIxC,EAAEC,OAAOC,OACrB,EAAKb,MAAMO,iBAAiBgE,cAAc,CACtCf,WAAW,2BACXgB,KAAK,SACLJ,KAAKA,EACLD,SAASA,MA3DH,EAkElBM,eAAiB,SAAC9D,EAAEwD,EAASC,GACzBzD,EAAE0D,kBACED,EAAKE,IACL,EAAKtE,MAAMO,iBAAiBgE,cAAc,CACtCf,WAAW,2BACXgB,KAAK,SACLJ,KAAKA,EACLD,SAASA,KAzEH,EAgFlBO,iBAAmB,SAACN,GACZA,EAAKE,IACL,EAAKtE,MAAMO,iBAAiBoE,WAAWP,IAlF7B,EAwFlBQ,aAAe,SAACxD,EAAOkD,EAAIb,EAAMU,EAASC,GACtC,OACI,yBAAKtC,UAAU,cACX,8BACKV,GAEL,yBAAKU,UAAU,oBACX,0BAAMA,UAAU,YAAY+C,QAAS,SAAAlE,GAAC,OAAI,EAAKuD,cAAcvD,EAAEwD,EAASC,KAC1D,IAAVX,GACI,uBAAMe,KAAK,cAAcM,MAAM,cAGvC,0BAAMhD,UAAU,YAAa+C,QAAS,SAAAlE,GAAC,OAAI,EAAK8D,eAAe9D,EAAEwD,EAASC,KAC7D,GAATX,GACI,uBAAMe,KAAK,OAAOM,MAAM,cAGhC,0BAAMhD,UAAU,aACD,GAAT2B,GACI,uBAAYrC,MAAM,yDAAY2D,UAAW,kBAAM,EAAKL,iBAAiBN,KAClE,uBAAMI,KAAK,SAASM,MAAM,kBA5GrC,EAuHlBE,WAAa,SAACC,EAAMxB,EAAOU,GACvB,OACIc,GACAA,EAAKC,KAAI,SAAAd,GACL,IAAMhD,EAAQ,EAAKwD,aAAaR,EAAKjC,KAAMiC,EAAKE,GAAIb,EAAMU,EAAUC,GACpE,OAAIA,EAAKe,SAAWf,EAAKe,QAAQC,OAAS,EAElC,kBAACvC,EAAD,CAAUzB,MAAOA,EAAOiE,IAAKjB,EAAKE,GAAIb,MAAOA,EAAOJ,MAAOe,EAAKf,MAAOC,SAAUc,EAAKE,GAAIf,QAASa,EAAKb,QAASC,WAAYY,EAAKjC,MAC7H,EAAK6C,WAAWZ,EAAKe,QAAS1B,EAAQ,EAAGW,EAAKE,GAAIF,EAAKE,KAI7D,kBAACzB,EAAD,CAAUzB,MAAOA,EAAOiE,IAAKjB,EAAKE,GAAIb,MAAOA,EAAOJ,MAAOe,EAAKf,MAAOE,QAASa,EAAKb,QAASD,SAAUc,EAAKE,GAAId,WAAYY,EAAKjC,WAjIjJ,EAAKlC,MAAM,CACP+D,aAAc,IAHJ,E,iFAFd9D,KAAKF,MAAMO,iBAAiB+E,kB,8CA0IvB,IAAD,EACoEpF,KAAKF,MAAMO,iBAA5EgF,EADH,EACGA,kBAAkBvE,EADrB,EACqBA,iBAAiBC,EADtC,EACsCA,iBAAiBC,EADvD,EACuDA,UAC3D,OACI,yBAAKqB,MAAO,CAAC,UAAYrC,KAAKF,MAAMwF,UAAU,aAAa,SACvD,uBAAMxB,aAAc9D,KAAKD,MAAM+D,aAAcyB,SAAUvF,KAAK6C,aAAcgB,SAAU7D,KAAK6D,UAAW7D,KAAK8E,WAAWO,EAAkB,EAAE,IACxI,kBAAC,EAAD,CAAiBrE,UAAWA,EAAWF,iBAAkBA,EAAkBC,iBAAkBA,S,GAjJnF0B,e,MAuJXG,O,6wBC9JR,IAAM4C,EAAU,SAACC,GAAD,MAAa,CAChC,CACIvE,MAAO,iBACPwE,UAAW,KACXP,IAAK,KACLhE,MAAM,GACNwE,MAAO,QAGX,CACIzE,MAAO,qBACPwE,UAAW,OACXP,IAAK,OACLhE,MAAM,IACNyE,OAAO,SAASC,EAAMC,GAClB,IAAI7D,EAAO6D,EAAO7D,KAAKiD,OAAS,GAAKY,EAAO7D,KAAK8D,OAAO,EAAE,IAAM,MAAQD,EAAO7D,KAC/E,OACI,8BACI,uBAAS+D,QAASF,EAAO7D,MACpBA,MAnBW,GA0B5Bf,MAAO,eACPwE,UAAW,UACXP,IAAK,UACLhE,MAAM,KACHsE,EAAQQ,qBAAqB,YAEpC,CACI/E,MAAO,2BACPwE,UAAW,eACXP,IAAK,eACLhE,MAAM,KAEV,CACID,MAAO,qBACPwE,UAAW,gBACXP,IAAK,gBACLhE,MAAM,IACNyE,OAAO,SAASC,EAAMC,GAClB,IAAII,EAAM,6BACE,yDAAWJ,EAAOK,eAAqB,6BACvC,+DAAYL,EAAOM,cAAoB,6BACvC,mDAAUN,EAAOzC,SAAe,6BAChC,8CAAeyC,EAAOO,SAAe,6BACrC,iDAAkBP,EAAOQ,YAAkB,6BAC3C,mDAAUR,EAAOxC,aAE7B,OACI,8BACI,uBAAS0C,QAASE,GACdJ,EAAOK,kBAM3B,CACIjF,MAAO,2BACPwE,UAAW,gBACXP,IAAK,gBACLhE,MAAM,KAEV,CACID,MAAO,2BACPwE,UAAW,cACXP,IAAK,cACLhE,MAAM,KAEV,CACID,MAAO,qBACPwE,UAAW,cACXP,IAAK,cACLhE,MAAM,KAEV,CACID,MAAO,2BACPwE,UAAW,OACXP,IAAK,OACLhE,MAAM,IACNyE,OAAO,SAACW,EAAIT,GAER,OACI,8BACKA,EAAOU,KAAKxB,KAAI,SAACyB,EAAKC,GACnB,IAAMC,EAAYF,EAAIvB,OAAS,GACzB0B,EACF,uBAAKzB,IAAKsB,EAAIrC,GAAIyC,MAAM,UACnBF,EAAS,UAAMF,EAAI9F,MAAMmG,MAAM,EAAG,IAAzB,OAAoCL,EAAI9F,OAG1D,OAAOgG,EACH,uBAASzF,MAAOuF,EAAI9F,MAAOwE,IAAKsB,EAAIrC,IAC/BwC,GAGLA,QAOxB,CACI1F,MAAO,eACPC,MAAM,IACNgE,IAAK,YACLQ,MAAO,QACPC,OAAO,SAACW,EAAIT,GACR,IAAIiB,EAAa,qBAAuBjB,EAAO1B,GAC3C4C,EAAiB,2BAA6BlB,EAAO1B,GACrD6C,EAAiB,wBAA0BnB,EAAO1B,GAEtD,OACI,8BACI,uBAAG8C,KAAMH,EAAYrG,OAAO,UAA5B,4BADJ,OAEI,uBAAGwG,KAAMF,EAAgBtG,OAAO,SAASkB,UAAU,SAAnD,6BAFJ,OAGI,uBAAGsF,KAAMD,EAAgBvG,OAAO,SAASkB,UAAU,SAAnD,kCAMPuF,EAAgB,SAAC1B,GAAD,MAAa,CAAC,EAAD,CAElCvE,MAAO,2BACPwE,UAAW,eACXP,IAAK,eACLhE,MAAM,OACHsE,EAAQQ,qBAAqB,gBANE,CAOlCL,OAAO,SAASC,EAAMC,GAClB,IAAI7D,EAAO6D,EAAOM,aAAalB,OAAS,GAAKY,EAAOM,aAAaL,OAAO,EAAE,IAAM,MAAQD,EAAOM,aAE3FF,EAAM,6BACN,+DAAYJ,EAAOM,cAAoB,6BACvC,yDAAWN,EAAOK,eAAqB,6BACvC,+DAAYL,EAAOsB,eAAqB,8BAE5C,OACI,8BACI,uBAASpB,QAASE,GACdjE,OAlBkB,GAyBlCf,MAAO,qBACPwE,UAAW,gBACXP,IAAK,gBACLhE,MAAM,OACHsE,EAAQQ,qBAAqB,iBA7BE,CA8BlCL,OAAO,SAASC,EAAMC,GAClB,OACI,8BACI,uBAASE,QAASF,EAAOK,eACpBL,EAAOK,mBAO5B,CACIjF,MAAO,qBACPwE,UAAW,OACXP,IAAK,OACLhE,MAAM,MACNkG,UAAU,EACVzB,OAAO,SAACW,EAAIT,GACR,OAAkB,MAAfA,EAAO7D,KAEF,8BAAO6D,EAAO7D,MAId,8BAAM,0BAAM4E,MAAM,UAAZ,aAKtB,CACI3F,MAAO,eACPwE,UAAW,OACXP,IAAK,OACLhE,MAAM,MACNkG,UAAU,EACVzB,OAAO,SAACW,EAAIT,GACR,OAAkB,MAAfA,EAAOwB,KAEF,8BAAOxB,EAAOwB,MAId,8BAAM,0BAAMT,MAAM,UAAZ,aAmDtB,CACI3F,MAAO,eACPC,MAAO,KACPgE,IAAK,YACLS,OAAO,SAACW,EAAIT,GACR,OACI,6BACI,8BACI,uBAAY5E,MAAM,yDAAY2D,UAAW,kBAAMY,EAAQ8B,UAAUzB,KAC7D,uBAAGoB,KAAK,KAAR,wB,iTCnQtBzH,EAAW,IAAKC,KAChB8H,EAAS,IAAOA,OAIhBC,EAFL7H,YAAO,kBAAkB,c,GACzBC,Y,cAEG,WAAYC,GAAO,IAAD,8BACd,4CAAMA,KAgBV4H,oBAAsB,SAAA/G,GACdA,EACA,EAAKb,MAAM6H,YAAYC,eAAejH,GAEtC,EAAKoD,SAAS,CAAEgB,KAAM,MArBZ,EAyBlB8C,oBAAsB,SAAAlH,GAClB,EAAKoD,SAAS,CAAEpD,UAChB,EAAKb,MAAM6D,gBAAgB/C,uBAAuB,YAAYD,IA3BhD,EA6BlBmH,aAAe,SAACrH,GACZA,EAAEsH,iBACF,EAAKjI,MAAM6D,gBAAgBD,SAAS,IA/BtB,EAiClB5B,eAAiB,CACbkG,SAAU,CAAEC,KAAM,GAClBC,WAAY,CAAED,KAAM,KAjCpB,EAAKlI,MAAM,CACPgF,KAAM,GACNpE,WAAOwH,GAJG,E,sHAWN3H,EAAEC,GACVT,KAAKF,MAAM6D,gBAAgB/C,uBAAuBJ,EAAEC,EAAEC,OAAOC,S,mCAEpDH,EAAE4H,GACXpI,KAAKF,MAAM6D,gBAAgB/C,uBAAuBJ,EAAE4H,GAAK,M,+BAsBpD,IACEC,EAAerI,KAAKF,MAAM6H,YAA1BU,YACP,OACI,uBAAOzG,UAAU,qCAAsC0G,SAAUtI,KAAK8H,cAClE,uBAAKS,OAAQ,IACT,uBAAKN,KAAM,GACP,kBAACxI,EAAD,iBAAcO,KAAK8B,eAAnB,CAAmCC,MAAM,uBACrC,uBAAOO,YAAY,uCAASC,SAAUvC,KAAKwC,YAAYjB,KAAKvB,KAAK,YAGzE,uBAAKiI,KAAM,GACP,kBAACxI,EAAD,iBAAcO,KAAK8B,eAAnB,CAAmCC,MAAM,uBACrC,uBAAOO,YAAY,uCAASC,SAAUvC,KAAKwC,YAAYjB,KAAKvB,KAAK,qBAGzE,uBAAKiI,KAAM,GACP,kBAACxI,EAAD,iBAAcO,KAAK8B,eAAnB,CAAmCC,MAAM,mBACrC,uBAAOO,YAAY,mCAAUC,SAAUvC,KAAKwC,YAAYjB,KAAKvB,KAAK,MAAOwI,YAAY,OAIjG,uBAAKD,OAAQ,IACT,uBAAKN,KAAM,GACP,kBAACxI,EAAD,iBAAcO,KAAK8B,eAAnB,CAAmCC,MAAM,uBACrC,uBACI0G,YAAU,EACV9H,MAAOX,KAAKD,MAAMY,MAClB2B,YAAY,iEACZD,MAAOrC,KAAKF,MAAMuC,MAClBqG,0BAA0B,EAC1BC,WAAW,EAAOH,YAAY,EAC9BI,cAAc,EACdC,SAAU7I,KAAK0H,oBACfnF,SAAUvC,KAAK6H,oBACfiB,gBAAiB,MAEhBT,EAAYrD,KAAI,SAAA+D,GAAC,OAAI,kBAACvB,EAAD,CAAQrC,IAAK4D,EAAEC,QAASD,EAAEE,gBAI5D,uBAAKhB,KAAM,GACP,kBAACxI,EAAD,iBAAcO,KAAK8B,eAAnB,CAAmCC,MAAM,iBACrC,uBAAQE,KAAK,QAAQuG,YAAY,EAAMlG,YAAY,6CAC3CC,SAAUvC,KAAKkJ,aAAa3H,KAAKvB,KAAK,UACzCA,KAAKF,MAAMqJ,QAAQnE,KAAI,SAAAd,GAAI,OAAI,kBAACsD,EAAD,CAAQrC,IAAKjB,EAAKE,GAAIzD,MAAOuD,EAAKE,IAAKF,EAAKvD,aAIxF,uBAAKsH,KAAM,GACP,sBAAMvI,KAAN,KACI,uBAAQ4E,KAAK,UAAU8E,SAAS,UAC5B,uBAAM9E,KAAK,WADf,mBAKR,uBAAK2D,KAAM,GACP,sBAAMvI,KAAN,KACI,uBAAQ4E,KAAK,UAAWK,QAAS,WAAK0E,OAAOC,KAAK,iBAAiB,uBAAMhF,KAAK,SAA9E,qC,GA/FH7B,e,MAwGV,MAAKC,QAAL,CAAc+E,G,6BCpGvB8B,G,QAFL3J,YAAO,kBAAkB,c,GACzBC,Y,cASG,WAAYC,GAAO,IAAD,8BACd,4CAAMA,KAiBV0J,aAAe,SAAAC,GACXzG,QAAQC,IAAIwG,GACZ,EAAK3J,MAAM6D,gBAAgBD,SAAS+F,IApBtB,EA2BlBxD,qBAAuB,SAAAP,GAAS,MAAK,CACjCgE,eAAgB,gBAAGC,EAAH,EAAGA,gBAAiB7G,EAApB,EAAoBA,aAAc8G,EAAlC,EAAkCA,QAASC,EAA3C,EAA2CA,aAA3C,OACZ,yBAAKxH,MAAO,CAAEyH,QAAS,IACnB,uBACIC,IAAK,SAAA7G,GACD,EAAK8G,YAAc9G,GAEvBZ,YAAW,iBAAYoD,GACvB/E,MAAOmC,EAAa,GACpBP,SAAU,SAAA9B,GAAC,OAAIkJ,EAAgBlJ,EAAEC,OAAOC,MAAQ,CAACF,EAAEC,OAAOC,OAAS,KACnEsJ,aAAc,kBAAM,EAAKC,aAAapH,EAAc8G,EAASlE,IAC7DrD,MAAO,CAAElB,MAAO,IAAKgJ,aAAc,EAAGC,QAAS,WAEnD,uBACI9F,KAAK,UACLK,QAAS,kBAAM,EAAKuF,aAAapH,EAAc8G,EAASlE,IACxD2E,KAAK,SACLC,KAAK,QACLjI,MAAO,CAAElB,MAAO,GAAIoJ,YAAa,IALrC,UASA,uBAAQ5F,QAAS,kBAAM,EAAK6F,YAAYX,IAAeS,KAAK,QAAQjI,MAAO,CAAElB,MAAO,KAApF,WAKRsJ,WAAY,SAAAC,GAAQ,OAChB,uBAAMpG,KAAK,SAASjC,MAAO,CAAEwE,MAAO6D,EAAW,eAAYvC,MAE/DwC,SAAU,SAAChK,EAAOmF,GAAR,OACNA,EAAOJ,GACFkF,WACAC,cACAC,SAASnK,EAAMkK,gBACxBE,8BAA+B,SAAA3J,GACvBA,GACA4J,YAAW,kBAAM,EAAKhB,YAAYiB,aAG1CrF,OAAQ,SAAAC,GAAI,OACR,EAAK9F,MAAMmL,iBAAmBxF,EAC1B,kBAAC,IAAD,CACIyF,eAAgB,CAAEC,gBAAiB,UAAWtB,QAAS,GACvDuB,YAAa,CAAC,EAAKtL,MAAMuL,YACzBC,YAAU,EACVC,gBAAiB3F,EAAK+E,aAG1B/E,KA5EM,EA+ElBqE,aAAe,SAACpH,EAAc8G,EAASlE,GACnCkE,IACA,EAAK7F,SAAS,CACVuH,WAAYxI,EAAa,GACzBoI,eAAgBxF,KAnFN,EAuFlB8E,YAAc,SAAAX,GACVA,IACA,EAAK9F,SAAS,CAAEuH,WAAY,MAvF5B,EAAKvL,MAAO,CACR0L,SAAS,GACT3H,aAAc,GACd4H,kBAAkB,EAClB5I,aAAc,GACdwI,WAAY,GACZJ,eAAgB,IARN,E,iFANdlL,KAAKF,MAAM6L,cAAc,CACrB,CAAC1J,KAAM,8BAEXjC,KAAKF,MAAM6D,gBAAgBD,SAAS,GACpC1D,KAAKF,MAAM6H,YAAYiE,iB,iDAcfpL,EAAEC,GACV,IAAIoL,EAAI,GACRA,EAAIrL,GAAGC,EAAEC,OAAOC,MAChBX,KAAK+D,SAAS8H,K,+BAgFT,IAAD,EAC4C7L,KAAKF,MAAM6D,gBAApDmI,EADH,EACGA,WAAWC,EADd,EACcA,OAAOC,EADrB,EACqBA,SAASC,EAD9B,EAC8BA,WAD9B,EAE0BjM,KAAKF,MAAM6H,YAAlCwB,EAFH,EAEGA,QAAQd,EAFX,EAEWA,YACT6D,EAAeJ,EAAWK,OAEhC,OACI,yBAAKvK,UAAU,gBACX,2BACI,uBAAKqG,KAAM,GACP,kBAACrF,EAAA,EAAD,CAAaY,SAAS,MAAM8B,UAAU,WAE1C,uBAAK2C,KAAM,IACP,kBAAC,EAAD,CAAYkB,QAASA,EAASd,YAAaA,IAC3C,uBACI+D,UAAQ,EACR5G,QAASA,YAAQxF,MAAOqM,OAAQ,CAAEC,EAAG,KAAMC,EAAG,KAC9CT,WAAYI,EAAcM,YAAY,IAE1C,uBAAYjK,SAAUvC,KAAKwJ,aAAcwC,SAAUA,EAAUS,QAASV,EAASW,MAAOT,EAAY5J,MAAO,CAAC,UAAY,MAAM,MAAQ,kB,GAzH/HI,e,OAiId8G","file":"static/js/12.0647c724.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport { observer, inject } from 'mobx-react';\nimport {Row, Form, Input, Modal} from 'antd';\nconst FormItem = Form.Item;\n\n\n@inject('TreeManagerStore')\n@observer\nclass InsertTreeModal extends Component{\n    constructor(props){\n        super(props);\n        this.state={\n        }\n    }\n\n    okModal(){\n        this.props.form.validateFieldsAndScroll((err, values) => {\n            if (!err) {\n                this.props.TreeManagerStore.insertTreeModule();\n            }\n        });\n    }\n\n    hideModal(){\n        this.props.TreeManagerStore.hideTreeModal();\n    }\n    /**\n     * 输入框和单选按钮产生的change事件\n     * @param n\n     * @param e\n     */\n    inputChange(n,e) {\n        let obj={};\n        obj[n]=e.target.value;\n        this.props.TreeManagerStore.changeTableRequestData(n,e.target.value);\n    }\n\n    render(){\n        const { getFieldDecorator } = this.props.form;\n        const { treeModalVisible,tableRequestData,modalName} = this.props\n        return (\n            <Modal\n                destroyOnClose\n                title={modalName}\n                width=\"900px\"\n                visible={treeModalVisible}\n                onOk={this.okModal.bind(this)}\n                onCancel={this.hideModal.bind(this)}\n                okText=\"保存\"\n                cancelText=\"取消\"\n                className=\"model\" width={500} >\n\n                <Form  layout=\"inline\" className=\"ant-advanced-search-form p-xs pb-0\">\n                    <Row>\n                        <FormItem {...this.formItemLayout} label=\"模块名称\" >\n                            {getFieldDecorator('name', {\n                                initialValue: tableRequestData.name,\n                                rules: [{ required: true, message: '请填写模块名称!' }],\n                            })(\n                                <Input  style={{ width: 250 }} placeholder='请填写模块名称!' onChange={this.inputChange.bind(this,'name')}/>\n                            )}\n                        </FormItem>\n                    </Row>\n                </Form>\n            </Modal>\n        )\n    }\n}\n\nexport default Form.create()(InsertTreeModal)\n","import React, {Component} from 'react';\nimport { observable, action, computed } from 'mobx';\nimport { observer, inject } from 'mobx-react';\nimport {  Icon,Tree, Popconfirm} from 'antd';\nimport InsertTreeModal from './InsertTreeModal';\nimport TreeManagerStore from \"../../stores/TreeManager/TreeManagerStore\";\n\nconst { TreeNode } = Tree;\n\n@inject('TreeManagerStore','TestCaseManagerStore','ApiManagerStore')\n@observer\nclass TreeManager extends Component {\n    componentDidMount() {\n        this.props.TreeManagerStore.getTreeData();\n    }\n    constructor(props){\n        super(props);\n        this.state={\n            expandedKeys: []\n        }\n    }\n    onNodeSelect = (selectedKeys, info) => {\n        console.log(selectedKeys,info.node.props)\n        let level = info.node.props.level\n        let appId = \"\";\n        let moduleId = \"\"\n        let appName = \"\"\n        let moduleName = \"\"\n        if(level == 1){\n            appId = selectedKeys[0]\n            appName = info.node.props.title\n        }else{\n            appId = info.node.props.appId\n            moduleId = info.node.props.moduleId\n            appName = info.node.props.appName\n            moduleName = info.node.props.moduleName\n        }\n        console.log(\"appid\",appId,\"moduleId\",moduleId,\"appName\",appName,\"moduleName\",moduleName)\n        // let appId = info.node.props.dataRef.appId\n        // let moduleId = info.node.props.dataRef.moduleId\n        // let appName = info.node.props.dataRef.appName\n        // let moduleName = info.node.props.dataRef.moduleName\n        let pageType = this.props.pageType\n        if(pageType == 'case'){\n            this.props.TestCaseManagerStore.initData(1,appId,moduleId)\n        }\n        else if(pageType == \"api\"){\n            this.props.ApiManagerStore.initData(1,appId,moduleId)\n        }else if(pageType == \"insertApi\"){\n            this.props.ApiManagerStore.setTreeParams(appId,moduleId,appName,moduleName)\n        }else if(pageType == \"updateApi\"){\n            this.props.ApiManagerStore.setTreeParams(appId,moduleId,appName,moduleName)\n        }\n    };\n    /**\n     * 点击某个节点展开\n     */\n    onExpand = expandedKeys => {\n        this.setState({\n            expandedKeys\n        });\n    };\n\n    /**\n     * 新增节点\n     */\n    handleAddTree = (e,parentId,item) => {\n        e.stopPropagation();\n        if (item.id) {\n            console.log(e.target.value)\n            this.props.TreeManagerStore.showTreeModal({\n                moduleName:\"添加模块\",\n                type:\"insert\",\n                item:item,\n                parentId:parentId\n            })\n        }\n    };\n    /**\n     * 编辑节点\n     */\n    handleEditTree = (e,parentId,item) => {\n        e.stopPropagation();\n        if (item.id) {\n            this.props.TreeManagerStore.showTreeModal({\n                moduleName:\"修改模块\",\n                type:\"update\",\n                item:item,\n                parentId:parentId\n            });\n        }\n    };\n    /**\n     * 编辑节点\n     */\n    handleDeleteTree = (item) => {\n        if (item.id) {\n            this.props.TreeManagerStore.deleteTree(item)\n        }\n    };\n    /**\n     * 获取节点的title内容\n     */\n    getNodeTitle = (title, id, level,parentId,item) => {\n        return (\n            <div className=\"tree-title\">\n                <span>\n                    {title}\n                </span>\n                <div className=\"tree-parent-div \">\n                    <span className=\"tree-span\" onClick={e => this.handleAddTree(e,parentId,item)}>\n                       {level !== 5 &&\n                            <Icon type=\"plus-circle\" theme=\"outlined\"/>\n                       }\n                    </span>\n                    <span className=\"tree-span\"  onClick={e => this.handleEditTree(e,parentId,item)}>\n                       {level != 1 &&\n                            <Icon type=\"form\" theme=\"outlined\" />\n                       }\n                    </span>\n                    <span className=\"tree-span\" >\n                         {level != 1 &&\n                              <Popconfirm title=\"确定删除此参数吗？\" onConfirm={() => this.handleDeleteTree(item)}>\n                                 <Icon type=\"delete\" theme=\"outlined\"/>\n                              </Popconfirm>\n                         }\n                    </span>\n                </div>\n            </div>\n        );\n    };\n    /**\n     * 递归生成树节点\n     */\n    renderTree = (data, level, parentId) => {\n        return (\n            data &&\n            data.map(item => {\n                const title = this.getNodeTitle(item.name, item.id, level,parentId, item);\n                if (item.modules && item.modules.length > 0) {\n                    return (\n                        <TreeNode title={title} key={item.id} level={level} appId={item.appId} moduleId={item.id} appName={item.appName} moduleName={item.name} >\n                            {this.renderTree(item.modules, level + 1, item.id, item.id)}\n                        </TreeNode>\n                    );\n                }\n                return <TreeNode title={title} key={item.id} level={level} appId={item.appId} appName={item.appName} moduleId={item.id} moduleName={item.name} />;\n            })\n        );\n    };\n\n    render(){\n        const {treeAppDataSource,treeModalVisible,tableRequestData,modalName} = this.props.TreeManagerStore\n        return(\n            <div style={{'maxHeight':this.props.maxHeight,'overflow-y':'auto' }}>\n                <Tree expandedKeys={this.state.expandedKeys} onSelect={this.onNodeSelect} onExpand={this.onExpand}>{this.renderTree(treeAppDataSource,1,0)}</Tree>\n                <InsertTreeModal modalName={modalName} treeModalVisible={treeModalVisible} tableRequestData={tableRequestData}></InsertTreeModal>\n            </div>\n        )\n    }\n}\n\nexport default TreeManager;","import React  from 'react';\nimport { Icon,Tag,Input,Tooltip,Popconfirm,Popover} from 'antd';\nimport common from \"../../style/common.css\";\n\nexport const columns = (context) => [\n    {\n        title: '接口ID',\n        dataIndex: 'id',\n        key: 'id',\n        width:80,\n        fixed: 'left',\n    },\n\n    {\n        title: '接口名',\n        dataIndex: 'name',\n        key: 'name',\n        width:230,\n        render:function(text, record){\n            var name = record.name.length > 20 ? record.name.substr(0,20) + '...' : record.name;\n            return (\n                <span  >\n                    <Popover content={record.name} >\n                        {name}\n                    </Popover>\n                </span>\n            )\n        }\n    },\n    {\n        title: '应用',\n        dataIndex: 'appName',\n        key: 'appName',\n        width:100,\n        ...context.getColumnSearchProps('appName'),\n    },\n    {\n        title: '接口路径',\n        dataIndex: 'apiClassName',\n        key: 'apiClassName',\n        width:360,\n    },\n    {\n        title: '方法名',\n        dataIndex: 'apiMethodName',\n        key: 'apiMethodName',\n        width:210,\n        render:function(text, record){\n            let str = <div>\n                        <span>方法名：{record.apiMethodName}</span><br/>\n                        <span>接口路径：{record.apiClassName}</span><br/>\n                        <span>应用：{record.appName}</span><br/>\n                        <span>groupId：{record.groupId}</span><br/>\n                        <span>artifactId：{record.artifactId}</span><br/>\n                        <span>模块：{record.moduleName}</span>\n                      </div>\n            return (\n                <span>\n                    <Popover content={str} >\n                       {record.apiMethodName}\n                    </Popover>\n                </span>\n            )\n        }\n    },\n    {\n        title: '方法参数',\n        dataIndex: 'argsTypeNames',\n        key: 'argsTypeNames',\n        width:360,\n    },\n    {\n        title: '更新时间',\n        dataIndex: 'editTimeStr',\n        key: 'editTimeStr',\n        width:220,\n    },\n    {\n        title: '创建人',\n        dataIndex: 'creatorName',\n        key: 'creatorName',\n        width:150,\n    },\n    {\n        title: '接口标签',\n        dataIndex: 'tags',\n        key: 'tags',\n        width:230,\n        render:(row,record) => {\n\n            return (\n                <span>\n                    {record.tags.map((tag, index) => {\n                        const isLongTag = tag.length > 20;\n                        const tagElem = (\n                            <Tag key={tag.id} color=\"purple\">\n                                {isLongTag ? `${tag.value.slice(0, 20)}...` : tag.value}\n                            </Tag>\n                        );\n                        return isLongTag ? (\n                            <Tooltip title={tag.value} key={tag.id}>\n                                {tagElem}\n                            </Tooltip>\n                        ) : (\n                            tagElem\n                        );\n                    })}\n                </span>\n            )\n        }\n    },\n    {\n        title: '操作',\n        width:230,\n        key: 'operation',\n        fixed: 'right',\n        render:(row,record) => {\n            let updateHref = \"/update_api?apiId=\" + record.id\n            let searchCaseHref = \"/testcase_manager?apiId=\" + record.id\n            let insertCaseHref = \"/edit_testcase?apiId=\" + record.id\n\n            return (\n                <span>\n                    <a href={updateHref} target=\"_blank\">修改接口</a>&nbsp;\n                    <a href={searchCaseHref} target=\"_blank\" className=\"vLine\"> 查看用例</a>&nbsp;\n                    <a href={insertCaseHref} target=\"_blank\" className=\"vLine\"> 添加用例</a>\n                </span>\n            )\n        }\n    }\n];\nexport const insertColumns = (context) => [\n    {\n        title: '接口路径',\n        dataIndex: 'apiClassName',\n        key: 'apiClassName',\n        width:'30%',\n        ...context.getColumnSearchProps('apiClassName'),\n        render:function(text, record){\n            var name = record.apiClassName.length > 35 ? record.apiClassName.substr(0,35) + '...' : record.apiClassName;\n\n            let str = <div>\n                <span>接口路径：{record.apiClassName}</span><br/>\n                <span>方法名：{record.apiMethodName}</span><br/>\n                <span>参数类型：{record.argsTypeNames}</span><br/>\n            </div>\n            return (\n                <span>\n                    <Popover content={str} >\n                       {name}\n                    </Popover>\n                </span>\n            )\n        }\n    },\n    {\n        title: '方法名',\n        dataIndex: 'apiMethodName',\n        key: 'apiMethodName',\n        width:'20%',\n        ...context.getColumnSearchProps('apiMethodName'),\n        render:function(text, record){\n            return (\n                <span  >\n                    <Popover content={record.apiMethodName} >\n                        {record.apiMethodName}\n                    </Popover>\n                </span>\n            )\n        }\n    },\n\n    {\n        title: '接口名',\n        dataIndex: 'name',\n        key: 'name',\n        width:'17%',\n        editable: true,\n        render:(row,record) => {\n            if(record.name != null){\n                return (\n                    <span>{record.name}</span>\n                )\n            }else{\n                return (\n                    <span><font color=\"orange\">无</font></span>\n                )\n            }\n        }\n    },\n    {\n        title: '描述',\n        dataIndex: 'desc',\n        key: 'desc',\n        width:'17%',\n        editable: true,\n        render:(row,record) => {\n            if(record.desc != null){\n                return (\n                    <span>{record.desc}</span>\n                )\n            }else{\n                return (\n                    <span><font color=\"orange\">无</font></span>\n                )\n            }\n        }\n    },\n    // {\n    //     title: '打标签',\n    //     dataIndex: 'tag',\n    //     key: 'tag',\n    //     width:'20%',\n        // render:(row,record) => {\n        //     const {tags,inputVisible, inputValue } = context.state;\n        //\n        //     return (\n        //         <div>\n        //             {tags.map((tag, index) => {\n        //                 const isLongTag = tag.length > 20;\n        //                 const tagElem = (\n        //                     <Tag key={tag} closable  onClose={() => context.handleClose(tag)}>\n        //                         {isLongTag ? `${tag.slice(0, 20)}...` : tag}\n        //                     </Tag>\n        //                 );\n        //                 return isLongTag ? (\n        //                     <Tooltip title={tag} key={tag}>\n        //                         {tagElem}\n        //                     </Tooltip>\n        //                 ) : (\n        //                     tagElem\n        //                 );\n        //             })}\n        //             {inputVisible && (\n        //                 <Input\n        //                 ref={context.saveInputRef}\n        //                 type=\"text\"\n        //                 size=\"small\"\n        //                 style={{ width: 78 }}\n        //                 value={inputValue}\n        //                 onChange={context.handleInputChange}\n        //                 onBlur={context.handleInputConfirm}\n        //                 onPressEnter={context.handleInputConfirm}\n        //                 />\n        //             )}\n        //             {!inputVisible && (\n        //                 <Tag onClick={context.showInput} style={{ background: '#fff', borderStyle: 'dashed' }}>\n        //                     <Icon type=\"plus\" /> New Tag\n        //                 </Tag>\n        //             )}\n        //         </div>\n        //     )\n        // }\n    // },\n    {\n        title: '操作',\n        width: '7%',\n        key: 'operation',\n        render:(row,record) => {\n            return (\n                <div>\n                    <span >\n                        <Popconfirm title=\"确定添加此接口吗？\" onConfirm={() => context.insertApi(record)} >\n                            <a href=\"#\" >添加</a>\n                        </Popconfirm>\n                    </span>\n                </div>\n            )\n        }\n    }\n\n]\n\n\n","import React, { Component } from 'react';\nimport { observer, inject } from 'mobx-react';\nimport { Button, Select,Icon, Row, Col, Form, Input } from 'antd';\n\nconst FormItem = Form.Item;\nconst Option = Select.Option;\n\n@inject('ApiManagerStore','CommonStore')\n@observer\nclass SearchForm extends Component{\n    constructor(props){\n        super(props);\n        this.state={\n            data: [],\n            value: undefined,\n        }\n    }\n\n    componentDidMount() {\n    }\n\n    inputChange(n,e) {\n        this.props.ApiManagerStore.changeTableRequestData(n,e.target.value);\n    }\n    optionChange(n,v) {\n        this.props.ApiManagerStore.changeTableRequestData(n,v || '');\n    }\n    handleCreatorSearch = value => {\n        if (value) {\n            this.props.CommonStore.getAllCreators(value)\n        } else {\n            this.setState({ data: [] });\n        }\n    };\n\n    handleCreatorChange = value => {\n        this.setState({ value });\n        this.props.ApiManagerStore.changeTableRequestData('creatorId',value);\n    };\n    handleSubmit = (e) => {\n        e.preventDefault();\n        this.props.ApiManagerStore.initData(1);\n    }\n    formItemLayout = {\n        labelCol: { span: 5 },\n        wrapperCol: { span: 19 },\n    }\n    render(){\n        const {allCreators} = this.props.CommonStore\n        return (\n            <Form  className=\"ant-advanced-search-form p-xs pb-0\"  onSubmit={this.handleSubmit}>\n                <Row gutter={48}>\n                    <Col span={7}>\n                        <FormItem {...this.formItemLayout} label=\"接口名\">\n                            <Input placeholder=\"请输入接口名\" onChange={this.inputChange.bind(this,'name')}/>\n                        </FormItem>\n                    </Col>\n                    <Col span={7}>\n                        <FormItem {...this.formItemLayout} label=\"方法名\">\n                            <Input placeholder=\"请输入方法名\" onChange={this.inputChange.bind(this,'apiMethodName')}/>\n                        </FormItem>\n                    </Col>\n                    <Col span={7}>\n                        <FormItem {...this.formItemLayout} label=\"接口ID\">\n                            <Input placeholder=\"请输入接口ID\" onChange={this.inputChange.bind(this,'id')} allowClear={true}/>\n                        </FormItem>\n                    </Col>\n                </Row>\n                <Row gutter={48}>\n                    <Col span={7}>\n                        <FormItem {...this.formItemLayout} label=\"创建人\">\n                            <Select\n                                showSearch\n                                value={this.state.value}\n                                placeholder=\"请输入真名搜索(非花名)\"\n                                style={this.props.style}\n                                defaultActiveFirstOption={false}\n                                showArrow={false} allowClear={true}\n                                filterOption={false}\n                                onSearch={this.handleCreatorSearch}\n                                onChange={this.handleCreatorChange}\n                                notFoundContent={null}\n                            >\n                                {allCreators.map(d => <Option key={d.userId}>{d.realName}</Option>)}\n                            </Select>\n                        </FormItem>\n                    </Col>\n                    <Col span={7}>\n                        <FormItem {...this.formItemLayout} label=\"标签\">\n                            <Select name=\"tagId\" allowClear={true} placeholder=\"请选择标签搜索\"\n                                    onChange={this.optionChange.bind(this,'tagId')}>\n                                {this.props.allTags.map(item => <Option key={item.id} value={item.id}>{item.value}</Option>)}\n                            </Select>\n                        </FormItem>\n                    </Col>\n                    <Col span={3}>\n                        <Form.Item>\n                            <Button type=\"primary\" htmlType=\"submit\" >\n                                <Icon type=\"search\" /> 搜索\n                            </Button>\n                        </Form.Item>\n                    </Col>\n                    <Col span={3} >\n                        <Form.Item>\n                            <Button type=\"primary\"  onClick={()=>{window.open(\"/insert_api\")}}><Icon type=\"plus\" /> 添加接口</Button>\n                        </Form.Item>\n                    </Col>\n                </Row>\n            </Form>\n        )\n    }\n}\n\nexport default Form.create()(SearchForm)\n\n","import React, {Component} from 'react';\nimport { observable, action, computed } from 'mobx';\nimport { observer, inject } from 'mobx-react';\nimport { Table,Row,Input,Button, Col,Icon,Pagination} from 'antd';\nimport {columns} from './config';\nimport SearchForm from './SearchForm';\nimport TreeManager from '../TreeManager/TreeManager';\nimport Highlighter from 'react-highlight-words';\n\nimport common from \"../../style/common.css\";\n\n@inject('ApiManagerStore','CommonStore',)\n@observer\nclass ApiManagerList extends Component {\n    componentDidMount() {\n        this.props.setBreadcrumb([\n            {name: '接口管理'},\n        ]);\n        this.props.ApiManagerStore.initData(1);\n        this.props.CommonStore.getAllTags();\n    }\n    constructor(props){\n        super(props);\n        this.state= {\n            json_str:{},\n            expandedKeys: [],\n            autoExpandParent: true,\n            selectedKeys: [],\n            searchText: '',\n            searchedColumn: '',\n        }\n    }\n\n    inputChange(n,e) {\n        let obj={};\n        obj[n]=e.target.value;\n        this.setState(obj);\n    }\n\n    onChangePage = page => {\n        console.log(page);\n        this.props.ApiManagerStore.initData(page);\n    };\n    /**\n     * 表头搜索触发\n     * @param dataIndex\n     * @returns {{filterDropdown: (function({setSelectedKeys: *, selectedKeys?: *, confirm?: *, clearFilters?: *}): *), filterIcon: (function(*): *), onFilter: (function(*, *): boolean), onFilterDropdownVisibleChange: onFilterDropdownVisibleChange, render: (function(*): *)}}\n     */\n    getColumnSearchProps = dataIndex => ({\n        filterDropdown: ({ setSelectedKeys, selectedKeys, confirm, clearFilters }) => (\n            <div style={{ padding: 8 }}>\n                <Input\n                    ref={node => {\n                        this.searchInput = node;\n                    }}\n                    placeholder={`Search ${dataIndex}`}\n                    value={selectedKeys[0]}\n                    onChange={e => setSelectedKeys(e.target.value ? [e.target.value] : [])}\n                    onPressEnter={() => this.handleSearch(selectedKeys, confirm, dataIndex)}\n                    style={{ width: 188, marginBottom: 8, display: 'block' }}\n                />\n                <Button\n                    type=\"primary\"\n                    onClick={() => this.handleSearch(selectedKeys, confirm, dataIndex)}\n                    icon=\"search\"\n                    size=\"small\"\n                    style={{ width: 90, marginRight: 8 }}\n                >\n                    Search\n                </Button>\n                <Button onClick={() => this.handleReset(clearFilters)} size=\"small\" style={{ width: 90 }}>\n                    Reset\n                </Button>\n            </div>\n        ),\n        filterIcon: filtered => (\n            <Icon type=\"search\" style={{ color: filtered ? '#1890ff' : undefined }} />\n        ),\n        onFilter: (value, record) =>\n            record[dataIndex]\n                .toString()\n                .toLowerCase()\n                .includes(value.toLowerCase()),\n        onFilterDropdownVisibleChange: visible => {\n            if (visible) {\n                setTimeout(() => this.searchInput.select());\n            }\n        },\n        render: text =>\n            this.state.searchedColumn === dataIndex ? (\n                <Highlighter\n                    highlightStyle={{ backgroundColor: '#ffc069', padding: 0 }}\n                    searchWords={[this.state.searchText]}\n                    autoEscape\n                    textToHighlight={text.toString()}\n                />\n            ) : (\n                text\n            ),\n    });\n    handleSearch = (selectedKeys, confirm, dataIndex) => {\n        confirm();\n        this.setState({\n            searchText: selectedKeys[0],\n            searchedColumn: dataIndex,\n        });\n    };\n\n    handleReset = clearFilters => {\n        clearFilters();\n        this.setState({ searchText: '' });\n    };\n\n    /**\n     * 表头搜索触发 end\n     */\n    render(){\n        const {dataSource,pageNo,pageSize,totalCount} = this.props.ApiManagerStore\n        const {allTags,allCreators} = this.props.CommonStore\n        const mydataSource = dataSource.toJS()\n\n        return(\n            <div className=\"container-bg\">\n                <Row>\n                    <Col span={4}>\n                        <TreeManager pageType=\"api\" maxHeight=\"700px\"/>\n                    </Col>\n                    <Col span={20}>\n                        <SearchForm allTags={allTags} allCreators={allCreators} />\n                        <Table\n                            bordered\n                            columns={columns(this)} scroll={{ x: 1780, y: 600 }}\n                            dataSource={mydataSource} pagination={false}\n                        />\n                        <Pagination onChange={this.onChangePage} pageSize={pageSize} current={pageNo}  total={totalCount} style={{'marginTop':'6px','float':'right'}}/>\n                    </Col>\n                </Row>\n            </div>\n        )\n    }\n}\n\nexport default ApiManagerList;"],"sourceRoot":""}