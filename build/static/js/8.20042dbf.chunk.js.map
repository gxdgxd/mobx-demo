{"version":3,"sources":["container/TreeManager/InsertTreeModal.js","container/TreeManager/TreeManager.js","container/TestCaseManager/SearchForm.js","container/TestCaseManager/ExeCaseDrawer.js","container/TestCaseManager/config.js","container/TestCaseManager/ExeCaseModal.js","container/TestCaseManager/index.js"],"names":["FormItem","Item","InsertTreeModal","inject","observer","props","state","this","form","validateFieldsAndScroll","err","values","TreeManagerStore","insertTreeModule","hideTreeModal","n","e","target","value","changeTableRequestData","getFieldDecorator","treeModalVisible","tableRequestData","modalName","destroyOnClose","title","width","visible","onOk","okModal","bind","onCancel","hideModal","okText","cancelText","className","layout","formItemLayout","label","initialValue","name","rules","required","message","style","placeholder","onChange","inputChange","Component","create","TreeNode","TreeManager","onSelect","selectedKeys","info","console","log","appId","node","dataRef","moduleId","appName","moduleName","pageType","TestCaseManagerStore","initData","ApiManagerStore","setTreeParams","handleAddTree","id","parentId","stopPropagation","showTreeModal","type","handleEditTree","parentIdF","handleDeleteTree","deleteTree","getNodeTitle","level","onClick","theme","onConfirm","onLoadData","treeNode","a","children","getTreeModuleDataSouce","renderTreeNodes","data","map","item","key","getTreeAppDataSouce","treeAppDataSource","maxHeight","loadData","Option","SearchForm","handleSearch","handleCreatorSearch","CommonStore","getAllCreators","setState","handleCreatorChange","labelCol","span","wrapperCol","undefined","getAllTags","v","allTags","allCreators","gutter","allowClear","optionChange","showSearch","defaultActiveFirstOption","showArrow","filterOption","onSearch","notFoundContent","d","userId","realName","TextArea","ExeCaseDrawer","onClose","hideCaseDrawer","exeDetailData","drawerVisible","caseData","toJS","caseExeRecords","statusStr","status","color","resultStatus","testCase","succeed","placement","operatorName","env","exeTimeStr","testApi","backgroundColor","border","rows","resultJsonFormat","paramScript","contextParamScript","columns","context","dataIndex","fixed","render","text","record","length","substr","str","validScript","desc","apiClassName","apiMethodName","content","row","insertHref","apiId","apiHref","updateHref","href","showExeCaseModal","ExeCaseModal","timerExe","result","ExeRecordStore","getDetailData","timerDate","setInterval","tick","scheduleType","params","caseIds","exeCase","code","hideExeCaseModal","showCaseDrawer","warn","clearInterval","handleClearTimeout","exeCaseModalVisible","config","top","TestCaseManagerList","batchExeCase","selectedRowKeys","selectedRows","i","push","onChangePage","page","setBreadcrumb","dataSource","pageNo","pageSize","totalCount","mydataSource","bordered","pagination","scroll","x","y","current","total"],"mappings":"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","file":"static/js/8.20042dbf.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport { observer, inject } from 'mobx-react';\nimport {Row, Form, Input, Modal} from 'antd';\nconst FormItem = Form.Item;\n\n\n@inject('TreeManagerStore')\n@observer\nclass InsertTreeModal extends Component{\n    constructor(props){\n        super(props);\n        this.state={\n        }\n    }\n\n    okModal(){\n        this.props.form.validateFieldsAndScroll((err, values) => {\n            if (!err) {\n                this.props.TreeManagerStore.insertTreeModule();\n            }\n        });\n    }\n\n    hideModal(){\n        this.props.TreeManagerStore.hideTreeModal();\n    }\n    /**\n     * 输入框和单选按钮产生的change事件\n     * @param n\n     * @param e\n     */\n    inputChange(n,e) {\n        let obj={};\n        obj[n]=e.target.value;\n        this.props.TreeManagerStore.changeTableRequestData(n,e.target.value);\n    }\n\n    render(){\n        const { getFieldDecorator } = this.props.form;\n        const { treeModalVisible,tableRequestData,modalName} = this.props\n        return (\n            <Modal\n                destroyOnClose\n                title={modalName}\n                width=\"900px\"\n                visible={treeModalVisible}\n                onOk={this.okModal.bind(this)}\n                onCancel={this.hideModal.bind(this)}\n                okText=\"保存\"\n                cancelText=\"取消\"\n                className=\"model\" width={500} >\n\n                <Form  layout=\"inline\" className=\"ant-advanced-search-form p-xs pb-0\">\n                    <Row>\n                        <FormItem {...this.formItemLayout} label=\"模块名称\" >\n                            {getFieldDecorator('name', {\n                                initialValue: tableRequestData.name,\n                                rules: [{ required: true, message: '请填写模块名称!' }],\n                            })(\n                                <Input  style={{ width: 250 }} placeholder='请填写模块名称!' onChange={this.inputChange.bind(this,'name')}/>\n                            )}\n                        </FormItem>\n                    </Row>\n                </Form>\n            </Modal>\n        )\n    }\n}\n\nexport default Form.create()(InsertTreeModal)\n","import React, {Component} from 'react';\nimport { observable, action, computed } from 'mobx';\nimport { observer, inject } from 'mobx-react';\nimport {  Icon,Tree, Popconfirm} from 'antd';\nimport InsertTreeModal from './InsertTreeModal';\nimport TreeManagerStore from \"../../stores/TreeManager/TreeManagerStore\";\n\nconst { TreeNode } = Tree;\n\n@inject('TreeManagerStore','TestCaseManagerStore','ApiManagerStore')\n@observer\nclass TreeManager extends Component {\n    componentDidMount() {\n        this.props.TreeManagerStore.getTreeAppDataSouce();\n    }\n    constructor(props){\n        super(props);\n    }\n    onSelect = (selectedKeys, info) => {\n        console.log(info)\n        let appId = info.node.props.dataRef.appId\n        let moduleId = info.node.props.dataRef.moduleId\n        let appName = info.node.props.dataRef.appName\n        let moduleName = info.node.props.dataRef.moduleName\n        let pageType = this.props.pageType\n        if(pageType == 'case'){\n            this.props.TestCaseManagerStore.initData(1,appId,moduleId)\n        }else if(pageType == \"api\"){\n            this.props.ApiManagerStore.initData(1,appId,moduleId)\n        }else if(pageType == \"insertApi\"){\n            this.props.ApiManagerStore.setTreeParams(appId,moduleId,appName,moduleName)\n        }else if(pageType == \"updateApi\"){\n            this.props.ApiManagerStore.setTreeParams(appId,moduleId,appName,moduleName)\n        }\n    };\n    /**\n     * 新增节点\n     */\n    handleAddTree = (e,id,parentId,appId) => {\n        e.stopPropagation();\n        if (id) {\n            console.log(e.target.value)\n            this.props.TreeManagerStore.showTreeModal({\n                moduleName:\"添加模块\",\n                parentId:parentId,\n                appId:appId,\n                type:\"insert\"\n            })\n        }\n    };\n    /**\n     * 编辑节点\n     */\n    handleEditTree = (e, name,id,parentIdF,appId) => {\n        e.stopPropagation();\n        if (id) {\n            this.props.TreeManagerStore.showTreeModal({\n                id:id,\n                moduleName:\"修改模块\",\n                parentIdF:parentIdF,\n                appId:appId,\n                name:name,\n                type:\"update\"\n            });\n        }\n    };\n    /**\n     * 编辑节点\n     */\n    handleDeleteTree = (id,appId,parentId) => {\n        if (id) {\n            this.props.TreeManagerStore.deleteTree(id,appId,parentId)\n        }\n    };\n    /**\n     * 获取节点的title内容\n     */\n    getNodeTitle = (title, id, level,parentId,parentIdF,appId) => {\n        return (\n            <div className=\"tree-title\">\n                <span>\n                    {title}\n                </span>\n                <div className=\"tree-parent-div \">\n                    <span className=\"tree-span\" onClick={e => this.handleAddTree(e,id,parentId,appId)}>\n                       {level !== 4 &&\n                            <Icon type=\"plus-circle\" theme=\"outlined\"/>\n                       }\n                    </span>\n                    <span className=\"tree-span\"  onClick={e => this.handleEditTree(e, title,id,parentIdF,appId)}>\n                       {level != 1 &&\n                            <Icon type=\"form\" theme=\"outlined\" />\n                       }\n                    </span>\n                    <span className=\"tree-span\" >\n                         {level != 1 &&\n                              <Popconfirm title=\"确定删除此参数吗？\" onConfirm={() => this.handleDeleteTree(id,appId,parentId)}>\n                                 <Icon type=\"delete\" theme=\"outlined\"/>\n                              </Popconfirm>\n                         }\n                    </span>\n                </div>\n            </div>\n        );\n    };\n    onLoadData = async (treeNode) => {\n        if (treeNode.props.children) {\n            return;\n        }\n        this.props.TreeManagerStore.getTreeModuleDataSouce(treeNode.props.dataRef)\n    }\n\n    renderTreeNodes = (data, level) => {\n        return (\n            data.map(item => {\n                const title = this.getNodeTitle(item.title, item.id, level,item.parentId,item.parentIdF,item.appId);\n                if (item.children) {\n                    return (\n                        <TreeNode title={title} key={item.id} dataRef={item}>\n                            {this.renderTreeNodes(item.children,level + 1)}\n                        </TreeNode>\n                    );\n                }\n                return <TreeNode {...item} title={title} key={item.id} dataRef={item} />;\n            })\n        );\n    };\n\n    render(){\n        const {treeAppDataSource,treeModalVisible,tableRequestData,modalName} = this.props.TreeManagerStore\n        return(\n            <div style={{'maxHeight':this.props.maxHeight,'overflow-y':'auto' }}>\n                <Tree onSelect={this.onSelect} loadData={this.onLoadData}>{this.renderTreeNodes(treeAppDataSource,1)}</Tree>\n                <InsertTreeModal modalName={modalName} treeModalVisible={treeModalVisible} tableRequestData={tableRequestData}></InsertTreeModal>\n            </div>\n        )\n    }\n}\n\nexport default TreeManager;","import React, { Component } from 'react';\nimport { observer, inject } from 'mobx-react';\nimport {  Button, Select,Icon, Row, Col, Form, Input } from 'antd';\n\nconst FormItem = Form.Item;\nconst Option = Select.Option;\n\n@inject('TestCaseManagerStore','CommonStore')\n@observer\nclass SearchForm extends Component{\n    constructor(props){\n        super(props);\n        this.state={\n            data: [],\n            value: undefined,\n        }\n    }\n    componentDidMount() {\n        this.props.CommonStore.getAllTags();\n    }\n\n    inputChange(n,e) {\n        this.props.TestCaseManagerStore.changeTableRequestData(n,e.target.value);\n    }\n    optionChange(n,v) {\n        this.props.TestCaseManagerStore.changeTableRequestData(n,v || '');\n    }\n    handleSearch = () => {\n        this.props.TestCaseManagerStore.initData(1);\n    }\n    handleCreatorSearch = value => {\n        if (value) {\n            this.props.CommonStore.getAllCreators(value)\n        } else {\n            this.setState({ data: [] });\n        }\n    };\n\n    handleCreatorChange = value => {\n        this.setState({ value });\n        this.props.TestCaseManagerStore.changeTableRequestData('creatorId',value);\n    };\n    formItemLayout = {\n        labelCol: { span: 5 },\n        wrapperCol: { span: 19 },\n    }\n\n    render(){\n        const {allTags,allCreators} = this.props.CommonStore\n\n        return (\n            <Form className=\"ant-advanced-search-form p-xs pb-0\" >\n                <Row gutter={48}>\n                    <Col span={7}>\n                        <FormItem {...this.formItemLayout} label=\"接口ID\">\n                            <Input placeholder=\"请输入接口ID\" allowClear={true} onChange={this.inputChange.bind(this,'apiId')}/>\n                        </FormItem>\n                    </Col>\n                    <Col span={7}>\n                        <FormItem {...this.formItemLayout} label=\"用例名\">\n                            <Input placeholder=\"请输入用例名\"  allowClear={true} onChange={this.inputChange.bind(this,'name')}/>\n                        </FormItem>\n                    </Col>\n                    <Col span={7}>\n                        <FormItem {...this.formItemLayout} label=\"标签\">\n                            <Select name=\"tagId\" allowClear={true} placeholder=\"请选择标签搜索\"\n                                    onChange={this.optionChange.bind(this,'tagId')}>\n                                {allTags.map(item => <Option key={item.id} value={item.id}>{item.value}</Option>)}\n                            </Select>\n                        </FormItem>\n                    </Col>\n                </Row>\n                <Row gutter={48}>\n                    <Col span={7}>\n                        <FormItem {...this.formItemLayout} label=\"创建人\">\n                            <Select\n                                showSearch  allowClear={true}\n                                value={this.state.value}\n                                placeholder=\"请输入真名搜索(非花名)\"\n                                style={this.props.style}\n                                defaultActiveFirstOption={false}\n                                showArrow={false}\n                                filterOption={false}\n                                onSearch={this.handleCreatorSearch}\n                                onChange={this.handleCreatorChange}\n                                notFoundContent={null}\n                            >\n                                {allCreators.map(d => <Option key={d.userId}>{d.realName}</Option>)}\n                            </Select>\n                        </FormItem>\n                    </Col>\n                    <Col span={7}>\n                        <FormItem {...this.formItemLayout} label=\"优先级\">\n                            <Select  placeholder=\"请选择优先级搜索\"  allowClear={true} onChange={this.optionChange.bind(this,'priority')}>\n                                <Option value=\"1\">1</Option>\n                                <Option value=\"2\">2</Option>\n                                <Option value=\"3\">3</Option>\n                                <Option value=\"4\">4</Option>\n                            </Select>\n                        </FormItem>\n                    </Col>\n                    <Col span={3} style={{'marginTop':'3px'}}>\n                        <Button type=\"primary\"  onClick={this.handleSearch}>\n                            <Icon type=\"search\" /> 搜索\n                        </Button>\n                    </Col>\n                </Row>\n            </Form>\n        )\n    }\n}\n\nexport default Form.create()(SearchForm)\n\n","import React, { Component } from 'react';\nimport { observer, inject } from 'mobx-react';\nimport { Row,Col,Form, Drawer, Tag ,Alert,Input} from 'antd';\nimport {toJS} from \"mobx/lib/mobx\";\nconst { TextArea } = Input;\n\n@inject('TestCaseManagerStore')\n@observer\nclass ExeCaseDrawer extends Component{\n    constructor(props){\n        super(props);\n        this.state={\n            visible:false\n        }\n    }\n\n    onClose = () => {\n        this.props.TestCaseManagerStore.hideCaseDrawer()\n    };\n\n    render(){\n        const {exeDetailData,drawerVisible} = this.props\n        let caseData = toJS(exeDetailData.caseExeRecords)\n        let statusStr = \"\"\n        if(exeDetailData.status == 0){\n            statusStr = <Tag color=\"#f50\">待执行</Tag>\n        }else if(exeDetailData.status == 1){\n            statusStr = <Tag color=\"#2db7f5\">执行中</Tag>\n        }else if(exeDetailData.status == 2){\n            statusStr = <Tag color=\"#87d068\">已完成</Tag>\n        }\n        let resultStatus = \"\"\n        if(typeof caseData != \"undefined\"){\n            if(caseData[0].testCase.succeed == true){\n                resultStatus = <Tag color=\"#87d068\">执行成功</Tag>\n            }else{\n                resultStatus = <Tag color=\"#f50\">执行失败</Tag>\n            }\n        }\n\n        console.log(typeof caseData == 'undefined' ? \"\" : caseData[0].testCase)\n        const style = {\n            'marginBottom':'8px'\n        }\n        return (\n            <Drawer\n                title=\"执行结果\" width={720}\n                placement=\"right\"\n                onClose={this.onClose}\n                visible={drawerVisible}\n            >\n                <Row gutter={48} style={style}>\n                    <Col span={13}>\n                        {typeof caseData == 'undefined' ? \"\" : caseData[0].testCase.name}\n                    </Col>\n                    <Col span={6}>\n                        任务状态：{statusStr}\n                    </Col>\n                </Row>\n                <Row gutter={48} style={style}>\n                    <Col span={13}>\n                        操作人：{exeDetailData.operatorName}\n                    </Col>\n                    <Col span={10}>\n                        执行环境：{exeDetailData.env}\n                    </Col>\n                </Row>\n                <Row gutter={48} style={style}>\n                    <Col span={13}>\n                        执行时间：{exeDetailData.exeTimeStr}\n                    </Col>\n                    <Col span={8}>\n                        执行结果：{resultStatus}\n                    </Col>\n                </Row>\n                <Row gutter={48} style={style}>\n                    <Col span={13}>\n                        接口名： {typeof caseData == 'undefined' ? \"\" : caseData[0].testCase.testApi.name}\n                    </Col>\n                </Row>\n                <Alert message=\"校验结果\" type=\"info\" style={{backgroundColor:'#c7e7ff',border:'0px','marginBottom':'10px'}}/>\n                <pre>\n                    {typeof caseData == 'undefined' ? \"\" : caseData[0].message == null ? \"暂无结果\":caseData[0].message}\n                </pre>\n                <Alert message=\"返回结果\" type=\"info\" style={{backgroundColor:'#c7e7ff',border:'0px','marginBottom':'10px'}}/>\n                <TextArea rows={5} style={{'width':'670px','marginBottom':'6px'}} value={typeof caseData == 'undefined' ? \"\" : caseData[0].testCase.testApi.resultJsonFormat}/>\n                <Alert message=\"请求入参\" type=\"info\" style={{backgroundColor:'#c7e7ff',border:'0px','marginBottom':'10px'}}/>\n                <TextArea rows={5} style={{'width':'670px','marginBottom':'6px'}} value={typeof caseData == 'undefined' ? \"\" : caseData[0].testCase.paramScript}/>\n                <Alert message=\"dubbo contextParams\" type=\"info\" style={{backgroundColor:'#c7e7ff',border:'0px','marginBottom':'10px'}}/>\n                <TextArea rows={3} style={{'width':'670px','marginBottom':'6px'}} value={typeof caseData == 'undefined' ? \"\" : caseData[0].testCase.contextParamScript}/>\n            </Drawer>\n        )\n    }\n}\n\nexport default Form.create()(ExeCaseDrawer)\n","import React  from 'react';\nimport { Popover} from 'antd';\nimport common from \"../../style/common.css\";\n\nexport const columns = (context) => [\n\n    {\n        title: '用例ID',\n        dataIndex: 'id',\n        key: 'id',\n        width:80,\n        fixed: 'left',\n    },\n    {\n        title: '用例名称',\n        dataIndex: 'name',\n        key: 'name',\n        width:200,\n        render:function(text, record){\n            var name = record.name.length > 16 ? record.name.substr(0,16) + '...' : record.name;\n            let str = <div>\n                        <span>用例名称：{record.name}</span><br/>\n                        <span>校验规则：{record.validScript}</span><br/>\n                        <span>入参：{record.paramScript}</span><br/>\n                        <span>其他参数：{record.contextParamScript}</span><br/>\n                        <span>描述：{record.desc}</span><br/>\n                        <span>接口路径：{record.testApi.apiClassName}</span><br/>\n                        <span>方法名：{record.testApi.apiMethodName}</span><br/>\n                        <span>接口名：{record.testApi.name}</span><br/>\n                      </div>\n            return (\n                <span  >\n                    <Popover content={str} >\n                       <font color=\"#d2a216\">{name}</font>\n                    </Popover>\n                </span>\n            )\n        }\n    },\n    {\n        title: '优先级',\n        dataIndex: 'priority',\n        key: 'priority',\n        width:80\n    },\n    {\n        title: '应用',\n        dataIndex: 'appName',\n        key: 'appName',\n        width:100,\n    },\n    {\n        title: '模块',\n        dataIndex: 'moduleName',\n        key: 'moduleName',\n        width:150,\n    },\n    {\n        title: '接口ID',\n        dataIndex: 'apiId',\n        key: 'apiId',\n        width:80\n    },\n    {\n        title: '创建人',\n        dataIndex: 'creatorName',\n        key: 'creatorName',\n        width:150,\n    },\n    {\n        title: '更新时间',\n        dataIndex: 'editTimeStr',\n        key: 'editTimeStr',\n        width:200\n    },\n    {\n        title: '操作',\n        width: '27%',\n        key: 'operation',\n        width:267,\n        fixed: 'right',\n        render:(row,record) => {\n            let insertHref = '/edit_testcase?apiId=' + record.apiId\n            let apiHref = '/update_api?apiId=' + record.apiId\n            let updateHref = '/edit_testcase?apiId=' + record.apiId + \"&caseId=\" + record.id\n            return (\n                <span>\n                    <a href={updateHref} target=\"_blank\">修改用例</a>&nbsp;\n                    <a href={insertHref} target=\"_blank\" className=\"vLine\"> 追加用例</a>&nbsp;\n                    <a href={apiHref} target=\"_blank\" className=\"vLine\"> 查看接口</a>&nbsp;\n                    <a onClick={context.showExeCaseModal.bind(context,[record.id])} className=\"vLine\"> 执行</a>\n                </span>\n            )\n        }\n    }\n];\n\n\n\n","import React, { Component } from 'react';\nimport { observer, inject } from 'mobx-react';\nimport { Select,Form, Input, Modal } from 'antd';\nimport {message} from \"antd/lib/index\";\n\nconst FormItem = Form.Item;\n\n@inject('TestCaseManagerStore','ExeRecordStore')\n@observer\nclass ExeCaseModal extends Component{\n    constructor(props){\n        super(props);\n        this.state={\n            scheduleType:'',\n            env:''\n        }\n    }\n\n    okModal(){\n        this.props.form.validateFieldsAndScroll( async (err, values) => {\n            if (!err) {\n                let params =  {\"id\":null,\"caseIds\":this.props.caseIds,\"scheduleType\":1,\"env\":this.state.env}\n                let result = await this.props.TestCaseManagerStore.exeCase(params,'case');\n                if(result.code == 200){\n                    this.hideExeCaseModal()\n                    this.timerExe(result)\n                    await this.props.TestCaseManagerStore.showCaseDrawer()\n                }else{\n                    message.warn(\"执行出现错误\")\n                }\n\n            }\n        });\n    }\n    timerExe = async(result) => {\n        let data = await this.props.ExeRecordStore.getDetailData(result.data)\n        this.timerDate = setInterval(()=> this.tick(data.status),1000);\n    }\n    handleClearTimeout(){\n        this.timerDate && clearInterval(this.timerDate);\n    }\n    componentWillUnmount(){\n        this.handleClearTimeout()\n    }\n    tick(status){\n        if(status == 2){\n            this.handleClearTimeout()\n        }\n    }\n\n    hideExeCaseModal(){\n        this.props.TestCaseManagerStore.hideExeCaseModal();\n    }\n\n    formItemLayout = {\n        labelCol: { span: 5 },\n        wrapperCol: { span: 19 },\n    }\n    render(){\n        const { getFieldDecorator } = this.props.form;\n        const { exeCaseModalVisible} = this.props\n\n        return (\n            <Modal\n                destroyOnClose\n                title=\"执行用例\"\n                width=\"800px\"\n                visible={exeCaseModalVisible}\n                onOk={this.okModal.bind(this)}\n                onCancel={this.hideExeCaseModal.bind(this)}\n                okText=\"执行\"\n                cancelText=\"取消\"\n                className=\"model\">\n                <Form className=\"ant-advanced-search-form p-xs pb-0\" >\n                    <FormItem {...this.formItemLayout} label=\"执行环境\">\n                        {getFieldDecorator('env', {\n                            rules: [{ required: true, message: '请输入执行环境!' }],\n                        })(\n                            <Input placeholder=\"请输入执行环境\"  style={{ width: 220 }}  onChange={e => this.setState({ env: e.target.value })}/>\n                        )}\n                    </FormItem>\n                    <FormItem {...this.formItemLayout} label=\"执行方式\">\n                        <span>并行执行</span>\n                    </FormItem>\n                </Form>\n\n            </Modal>\n        )\n    }\n}\n\nexport default Form.create()(ExeCaseModal)\n","import React, {Component} from 'react';\nimport { observable, action, computed } from 'mobx';\nimport { observer, inject } from 'mobx-react';\nimport { Table,Pagination,Row, Col,Button} from 'antd';\nimport {columns} from './config';\nimport SearchForm from './SearchForm';\nimport ExeCaseModal from './ExeCaseModal';\nimport ExeCaseDrawer from './ExeCaseDrawer'\nimport TreeManager from '../TreeManager/TreeManager';\nimport {message} from \"antd/lib/index\";\nmessage.config({\n    top: 200\n});\n@inject('TestCaseManagerStore','CommonStore','SceneManagerStore','ExeRecordStore')\n@observer\nclass TestCaseManagerList extends Component {\n    componentDidMount() {\n        this.props.setBreadcrumb([\n            {name: '用例管理'},\n        ]);\n        this.props.TestCaseManagerStore.initData(1);\n\n    }\n    constructor(props){\n        super(props);\n        this.state= {\n            selectedRowKeys:[],\n            selectedRows:[]\n        }\n    }\n    /**\n     * 执行用例\n     */\n    batchExeCase = () => {\n        if(this.state.selectedRowKeys.length <= 0){\n            message.warn(\"请先勾选需要执行的用例\")\n            return\n        }\n        let rows = this.state.selectedRows\n        let caseIds = []\n        for (let i = 0; i < rows.length ; i++) {\n            caseIds.push(rows[i].id)\n        }\n        this.showExeCaseModal(caseIds)\n        // let params =  {\"id\":null,\"caseIds\":this.props.caseIds,\"scheduleType\":1,\"env\":this.state.env}\n        // this.props.TestCaseManagerStore.exeCase(params,\"case\");\n        // this.props.SceneManagerStore.insertCase(this.state.selectedRows);\n        // this.props.history.push(\"/insert_scene\")\n\n        // <Button type=\"primary\" style={{'marginBottom':'7px'}} onClick={this.batchExeCase.bind(this)} >\n        // 批量执行\n        // </Button>\n    }\n    onChangePage = page => {\n        this.props.TestCaseManagerStore.initData(page);\n    };\n    showExeCaseModal(caseIds){\n        this.props.TestCaseManagerStore.showExeCaseModal(caseIds);\n    }\n    render(){\n        const {dataSource,pageNo,pageSize,totalCount,exeCaseModalVisible,caseIds,drawerVisible} = this.props.TestCaseManagerStore\n        const mydataSource = dataSource.toJS()\n        const rowSelection = {\n            onChange: (selectedRowKeys, selectedRows) => {\n                console.log(`selectedRowKeys: ${selectedRowKeys}`, 'selectedRows: ', selectedRows);\n                this.setState({\n                    selectedRowKeys: selectedRowKeys,\n                    selectedRows: selectedRows\n                });\n            }\n        };\n        const {exeDetailData} = this.props.ExeRecordStore\n        return(\n            <div className=\"container-bg\">\n                <Row>\n                    <Col span={4}>\n                        <TreeManager pageType=\"case\" maxHeight=\"700px\"/>\n                    </Col>\n                    <Col span={20}>\n                        <SearchForm/>\n\n                        <Table\n                            bordered\n                            columns={columns(this)} pagination={false} scroll={{ x: 1380, y: 600 }}\n                            dataSource={mydataSource}  />\n                        <Pagination onChange={this.onChangePage} pageSize={pageSize} current={pageNo}  total={totalCount} style={{'marginTop':'6px','float':'right'}}/>\n                        <ExeCaseModal exeCaseModalVisible={exeCaseModalVisible} caseIds={caseIds}></ExeCaseModal>\n                        <ExeCaseDrawer exeDetailData={exeDetailData} drawerVisible={drawerVisible}></ExeCaseDrawer>\n\n                    </Col>\n                </Row>\n            </div>\n        )\n    }\n}\n\nexport default TestCaseManagerList;"],"sourceRoot":""}