{"version":3,"sources":["container/TreeManager/InsertTreeModal.js","container/TreeManager/TreeManager.js","container/TestCaseManager/SearchForm.js","container/TestCaseManager/ExeCaseDrawer.js","container/TestCaseManager/config.js","container/TestCaseManager/ExeCaseModal.js","container/TestCaseManager/index.js"],"names":["FormItem","Item","InsertTreeModal","inject","observer","props","state","this","form","validateFieldsAndScroll","err","values","TreeManagerStore","insertTreeModule","hideTreeModal","n","e","target","value","changeTableRequestData","getFieldDecorator","treeModalVisible","tableRequestData","modalName","destroyOnClose","title","width","visible","onOk","okModal","bind","onCancel","hideModal","okText","cancelText","className","layout","formItemLayout","label","initialValue","name","rules","required","message","style","placeholder","onChange","inputChange","Component","create","TreeNode","TreeManager","onNodeSelect","selectedKeys","info","console","log","node","appId","moduleId","appName","moduleName","level","pageType","TestCaseManagerStore","initData","ApiManagerStore","setTreeParams","onExpand","expandedKeys","setState","handleAddTree","parentId","item","stopPropagation","id","showTreeModal","type","handleEditTree","handleDeleteTree","deleteTree","getNodeTitle","onClick","theme","onConfirm","renderTree","data","map","modules","length","key","getTreeData","treeAppDataSource","maxHeight","onSelect","Option","SearchForm","handleSearch","handleCreatorSearch","CommonStore","getAllCreators","handleCreatorChange","labelCol","span","wrapperCol","undefined","getAllTags","v","allTags","allCreators","gutter","allowClear","optionChange","showSearch","defaultActiveFirstOption","showArrow","filterOption","onSearch","notFoundContent","d","userId","realName","TextArea","ExeCaseDrawer","onClose","hideCaseDrawer","copy","success","exeDetailData","drawerVisible","caseData","toJS","caseExeRecords","statusStr","status","color","resultStatus","succeed","testCase","placement","operatorName","env","exeTimeStr","testApi","backgroundColor","border","src","eval","sampleResult","enableClipboard","handleCopy","rows","param","contextParamScript","columns","context","dataIndex","fixed","getColumnSearchProps","render","text","record","str","apiClassName","apiMethodName","argsTypeNames","content","row","insertHref","apiId","apiHref","updateHref","href","window","open","showExeCaseModal","deleteCase","ExeCaseModal","a","params","caseIds","GlobalManagerStore","varValue","exeCase","result","code","hideExeCaseModal","timerExe","showCaseDrawer","warn","ExeRecordStore","getDetailData","timerDate","setInterval","tick","scheduleType","clearInterval","handleClearTimeout","exeCaseModalVisible","changeInput","config","top","TestCaseManagerList","batchExeCase","selectedRowKeys","selectedRows","i","push","onChangePage","page","filterDropdown","setSelectedKeys","confirm","clearFilters","padding","ref","searchInput","onPressEnter","marginBottom","display","icon","size","marginRight","handleReset","filterIcon","filtered","onFilter","toString","toLowerCase","includes","onFilterDropdownVisibleChange","setTimeout","select","searchedColumn","highlightStyle","searchWords","searchText","autoEscape","textToHighlight","setBreadcrumb","getVarDetail","dataSource","pageNo","pageSize","totalCount","mydataSource","bordered","pagination","scroll","x","y","current","total"],"mappings":"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","file":"static/js/9.e24b4c32.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport { observer, inject } from 'mobx-react';\nimport {Row, Form, Input, Modal} from 'antd';\nconst FormItem = Form.Item;\n\n\n@inject('TreeManagerStore')\n@observer\nclass InsertTreeModal extends Component{\n    constructor(props){\n        super(props);\n        this.state={\n        }\n    }\n\n    okModal(){\n        this.props.form.validateFieldsAndScroll((err, values) => {\n            if (!err) {\n                this.props.TreeManagerStore.insertTreeModule();\n            }\n        });\n    }\n\n    hideModal(){\n        this.props.TreeManagerStore.hideTreeModal();\n    }\n    /**\n     * 输入框和单选按钮产生的change事件\n     * @param n\n     * @param e\n     */\n    inputChange(n,e) {\n        let obj={};\n        obj[n]=e.target.value;\n        this.props.TreeManagerStore.changeTableRequestData(n,e.target.value);\n    }\n\n    render(){\n        const { getFieldDecorator } = this.props.form;\n        const { treeModalVisible,tableRequestData,modalName} = this.props\n        return (\n            <Modal\n                destroyOnClose\n                title={modalName}\n                width=\"900px\"\n                visible={treeModalVisible}\n                onOk={this.okModal.bind(this)}\n                onCancel={this.hideModal.bind(this)}\n                okText=\"保存\"\n                cancelText=\"取消\"\n                className=\"model\" width={500} >\n\n                <Form  layout=\"inline\" className=\"ant-advanced-search-form p-xs pb-0\">\n                    <Row>\n                        <FormItem {...this.formItemLayout} label=\"模块名称\" >\n                            {getFieldDecorator('name', {\n                                initialValue: tableRequestData.name,\n                                rules: [{ required: true, message: '请填写模块名称!' }],\n                            })(\n                                <Input  style={{ width: 250 }} placeholder='请填写模块名称!' onChange={this.inputChange.bind(this,'name')}/>\n                            )}\n                        </FormItem>\n                    </Row>\n                </Form>\n            </Modal>\n        )\n    }\n}\n\nexport default Form.create()(InsertTreeModal)\n","import React, {Component} from 'react';\nimport { observable, action, computed } from 'mobx';\nimport { observer, inject } from 'mobx-react';\nimport {  Icon,Tree, Popconfirm} from 'antd';\nimport InsertTreeModal from './InsertTreeModal';\nimport TreeManagerStore from \"../../stores/TreeManager/TreeManagerStore\";\n\nconst { TreeNode } = Tree;\n\n@inject('TreeManagerStore','TestCaseManagerStore','ApiManagerStore')\n@observer\nclass TreeManager extends Component {\n    componentDidMount() {\n        this.props.TreeManagerStore.getTreeData();\n    }\n    constructor(props){\n        super(props);\n        this.state={\n            expandedKeys: []\n        }\n    }\n    onNodeSelect = (selectedKeys, info) => {\n        console.log(selectedKeys,info.node.props)\n        let level = info.node.props.level\n        let appId = \"\";\n        let moduleId = \"\"\n        let appName = \"\"\n        let moduleName = \"\"\n        if(level == 1){\n            appId = selectedKeys[0]\n            appName = info.node.props.title\n        }else{\n            appId = info.node.props.appId\n            moduleId = info.node.props.moduleId\n            appName = info.node.props.appName\n            moduleName = info.node.props.moduleName\n        }\n        console.log(\"appid\",appId,\"moduleId\",moduleId,\"appName\",appName,\"moduleName\",moduleName)\n        // let appId = info.node.props.dataRef.appId\n        // let moduleId = info.node.props.dataRef.moduleId\n        // let appName = info.node.props.dataRef.appName\n        // let moduleName = info.node.props.dataRef.moduleName\n        let pageType = this.props.pageType\n        if(pageType == 'case'){\n            this.props.TestCaseManagerStore.initData(1,appId,moduleId)\n        }\n        else if(pageType == \"api\"){\n            this.props.ApiManagerStore.initData(1,appId,moduleId)\n        }else if(pageType == \"insertApi\"){\n            this.props.ApiManagerStore.setTreeParams(appId,moduleId,appName,moduleName)\n        }else if(pageType == \"updateApi\"){\n            this.props.ApiManagerStore.setTreeParams(appId,moduleId,appName,moduleName)\n        }\n    };\n    /**\n     * 点击某个节点展开\n     */\n    onExpand = expandedKeys => {\n        this.setState({\n            expandedKeys\n        });\n    };\n\n    /**\n     * 新增节点\n     */\n    handleAddTree = (e,parentId,item) => {\n        e.stopPropagation();\n        debugger\n        if (item.id) {\n            console.log(e.target.value)\n            this.props.TreeManagerStore.showTreeModal({\n                moduleName:\"添加模块\",\n                type:\"insert\",\n                item:item,\n                parentId:parentId\n            })\n        }\n    };\n    /**\n     * 编辑节点\n     */\n    handleEditTree = (e,parentId,item) => {\n        e.stopPropagation();\n        if (item.id) {\n            this.props.TreeManagerStore.showTreeModal({\n                moduleName:\"修改模块\",\n                type:\"update\",\n                item:item,\n                parentId:parentId\n            });\n        }\n    };\n    /**\n     * 编辑节点\n     */\n    handleDeleteTree = (item) => {\n        if (item.id) {\n            this.props.TreeManagerStore.deleteTree(item)\n        }\n    };\n    /**\n     * 获取节点的title内容\n     */\n    getNodeTitle = (title, id, level,parentId,item) => {\n        return (\n            <div className=\"tree-title\">\n                <span>\n                    {title}\n                </span>\n                <div className=\"tree-parent-div \">\n                    <span className=\"tree-span\" onClick={e => this.handleAddTree(e,parentId,item)}>\n                       {level !== 5 &&\n                            <Icon type=\"plus-circle\" theme=\"outlined\"/>\n                       }\n                    </span>\n                    <span className=\"tree-span\"  onClick={e => this.handleEditTree(e,parentId,item)}>\n                       {level != 1 &&\n                            <Icon type=\"form\" theme=\"outlined\" />\n                       }\n                    </span>\n                    <span className=\"tree-span\" >\n                         {level != 1 &&\n                              <Popconfirm title=\"确定删除此参数吗？\" onConfirm={() => this.handleDeleteTree(item)}>\n                                 <Icon type=\"delete\" theme=\"outlined\"/>\n                              </Popconfirm>\n                         }\n                    </span>\n                </div>\n            </div>\n        );\n    };\n    /**\n     * 递归生成树节点\n     */\n    renderTree = (data, level, parentId) => {\n        return (\n            data &&\n            data.map(item => {\n                const title = this.getNodeTitle(item.name, item.id, level,parentId, item);\n                if (item.modules && item.modules.length > 0) {\n                    return (\n                        <TreeNode title={title} key={item.id} level={level} appId={item.appId} moduleId={item.id} appName={item.appName} moduleName={item.name} >\n                            {this.renderTree(item.modules, level + 1, item.id, item.id)}\n                        </TreeNode>\n                    );\n                }\n                return <TreeNode title={title} key={item.id} level={level} appId={item.appId} appName={item.appName} moduleId={item.id} moduleName={item.name} />;\n            })\n        );\n    };\n\n    render(){\n        const {treeAppDataSource,treeModalVisible,tableRequestData,modalName} = this.props.TreeManagerStore\n        return(\n            <div style={{'maxHeight':this.props.maxHeight,'overflow-y':'auto' }}>\n                <Tree expandedKeys={this.state.expandedKeys} onSelect={this.onNodeSelect} onExpand={this.onExpand}>{this.renderTree(treeAppDataSource,1,0)}</Tree>\n                <InsertTreeModal modalName={modalName} treeModalVisible={treeModalVisible} tableRequestData={tableRequestData}></InsertTreeModal>\n            </div>\n        )\n    }\n}\n\nexport default TreeManager;","import React, { Component } from 'react';\nimport { observer, inject } from 'mobx-react';\nimport {  Button, Select,Icon, Row, Col, Form, Input } from 'antd';\n\nconst FormItem = Form.Item;\nconst Option = Select.Option;\n\n@inject('TestCaseManagerStore','CommonStore')\n@observer\nclass SearchForm extends Component{\n    constructor(props){\n        super(props);\n        this.state={\n            data: [],\n            value: undefined,\n        }\n    }\n    componentDidMount() {\n        this.props.CommonStore.getAllTags();\n    }\n\n    inputChange(n,e) {\n        this.props.TestCaseManagerStore.changeTableRequestData(n,e.target.value);\n    }\n    optionChange(n,v) {\n        this.props.TestCaseManagerStore.changeTableRequestData(n,v || '');\n    }\n    handleSearch = () => {\n        this.props.TestCaseManagerStore.initData(1);\n    }\n    handleCreatorSearch = value => {\n        if (value) {\n            this.props.CommonStore.getAllCreators(value)\n        } else {\n            this.setState({ data: [] });\n        }\n    };\n\n    handleCreatorChange = value => {\n        this.setState({ value });\n        this.props.TestCaseManagerStore.changeTableRequestData('creatorId',value);\n    };\n    formItemLayout = {\n        labelCol: { span: 5 },\n        wrapperCol: { span: 19 },\n    }\n\n    render(){\n        const {allTags,allCreators} = this.props.CommonStore\n\n        return (\n            <Form className=\"ant-advanced-search-form p-xs pb-0\" >\n                <Row gutter={48}>\n\n                    <Col span={7}>\n                        <FormItem {...this.formItemLayout} label=\"用例名\">\n                            <Input placeholder=\"请输入用例名\"  allowClear={true} onChange={this.inputChange.bind(this,'name')}/>\n                        </FormItem>\n                    </Col>\n                    <Col span={7}>\n                        <FormItem {...this.formItemLayout} label=\"标签\">\n                            <Select name=\"tagId\" allowClear={true} placeholder=\"请选择标签搜索\"\n                                    onChange={this.optionChange.bind(this,'tagId')}>\n                                {allTags.map(item => <Option key={item.id} value={item.id}>{item.value}</Option>)}\n                            </Select>\n                        </FormItem>\n                    </Col>\n                    <Col span={7}>\n                        <FormItem {...this.formItemLayout} label=\"创建人\">\n                            <Select\n                                showSearch  allowClear={true}\n                                value={this.state.value}\n                                placeholder=\"请输入真名搜索(非花名)\"\n                                style={this.props.style}\n                                defaultActiveFirstOption={false}\n                                showArrow={false}\n                                filterOption={false}\n                                onSearch={this.handleCreatorSearch}\n                                onChange={this.handleCreatorChange}\n                                notFoundContent={null}\n                            >\n                                {allCreators.map(d => <Option key={d.userId}>{d.realName}</Option>)}\n                            </Select>\n                        </FormItem>\n                    </Col>\n                </Row>\n                <Row gutter={48}>\n                    <Col span={7}>\n                        <FormItem {...this.formItemLayout} label=\"接口ID\">\n                            <Input placeholder=\"请输入接口ID\" allowClear={true} onChange={this.inputChange.bind(this,'apiId')}/>\n                        </FormItem>\n                    </Col>\n\n                    <Col span={7}>\n                        <FormItem {...this.formItemLayout} label=\"优先级\">\n                            <Select  placeholder=\"请选择优先级搜索\"  allowClear={true} onChange={this.optionChange.bind(this,'priority')}>\n                                <Option value=\"0\">0</Option>\n                                <Option value=\"1\">1</Option>\n                                <Option value=\"2\">2</Option>\n                                <Option value=\"3\">3</Option>\n                            </Select>\n                        </FormItem>\n                    </Col>\n                    <Col span={3} style={{'marginTop':'3px'}}>\n                        <Button type=\"primary\"  onClick={this.handleSearch}>\n                            <Icon type=\"search\" /> 搜索\n                        </Button>\n                    </Col>\n                </Row>\n            </Form>\n        )\n    }\n}\n\nexport default Form.create()(SearchForm)\n\n","import React, { Component } from 'react';\nimport { observer, inject } from 'mobx-react';\nimport { Row,Col,Form, Drawer, Tag ,Alert,Input} from 'antd';\nimport ReactJson from 'react-json-view'\nimport {toJS} from \"mobx/lib/mobx\";\nimport {message} from \"antd/lib/index\";\nconst { TextArea } = Input;\n\n@inject('TestCaseManagerStore')\n@observer\nclass ExeCaseDrawer extends Component{\n    constructor(props){\n        super(props);\n        this.state={\n            visible:false\n        }\n    }\n\n    onClose = () => {\n        this.props.TestCaseManagerStore.hideCaseDrawer()\n    };\n    handleCopy(copy){\n        message.success(\"复制成功\")\n    }\n    render(){\n        const {exeDetailData,drawerVisible} = this.props\n        let caseData = toJS(exeDetailData.caseExeRecords)\n        let statusStr = \"\"\n        if(exeDetailData.status == 0){\n            statusStr = <Tag color=\"#f50\">待执行</Tag>\n        }else if(exeDetailData.status == 1){\n            statusStr = <Tag color=\"#2db7f5\">执行中</Tag>\n        }else if(exeDetailData.status == 2){\n            statusStr = <Tag color=\"#87d068\">已完成</Tag>\n        }\n        let resultStatus = \"\"\n        if(typeof caseData != \"undefined\"){\n            if(caseData[0].succeed == true){\n                resultStatus = <Tag color=\"#87d068\">执行成功</Tag>\n            }else if(caseData[0].succeed == false){\n                resultStatus = <Tag color=\"#f50\">执行失败</Tag>\n            }\n        }\n\n        console.log(typeof caseData == 'undefined' ? \"\" : caseData[0].testCase)\n        const style = {\n            'marginBottom':'8px'\n        }\n        return (\n            <Drawer\n                title=\"执行结果\" width={720}\n                placement=\"right\"\n                onClose={this.onClose}\n                visible={drawerVisible}\n            >\n                <Row gutter={48} style={style}>\n                    <Col span={13}>\n                        {typeof caseData == 'undefined' ? \"\" : caseData[0].testCase.name}\n                    </Col>\n                    <Col span={6}>\n                        任务状态：{statusStr}\n                    </Col>\n                </Row>\n                <Row gutter={48} style={style}>\n                    <Col span={13}>\n                        操作人：{exeDetailData.operatorName}\n                    </Col>\n                    <Col span={10}>\n                        执行环境：{exeDetailData.env}\n                    </Col>\n                </Row>\n                <Row gutter={48} style={style}>\n                    <Col span={13}>\n                        执行时间：{exeDetailData.exeTimeStr}\n                    </Col>\n                    <Col span={8}>\n                        执行结果：{resultStatus}\n                    </Col>\n                </Row>\n                <Row gutter={48} style={style}>\n                    <Col span={13}>\n                        接口名： {typeof caseData == 'undefined' ? \"\" : caseData[0].testCase.testApi.name}\n                    </Col>\n                </Row>\n                <Alert message=\"校验结果\" type=\"info\" style={{backgroundColor:'#c7e7ff',border:'0px','marginBottom':'10px'}}/>\n                <pre>\n                    {typeof caseData == 'undefined' ? \"\" : caseData[0].message == null ? \"暂无结果\":caseData[0].message}\n                </pre>\n                <Alert message=\"接口实际返回结果\" type=\"info\" style={{backgroundColor:'#c7e7ff',border:'0px','marginBottom':'10px'}}/>\n                <ReactJson src={typeof caseData == 'undefined' ? \"\" : eval(\"(\"+caseData[0].sampleResult+\")\")} name={null}  enableClipboard={this.handleCopy} style={{border:'1px solid #ccc','height':'153px','marginBottom':'5px','maxHeight':'153px','overflow-y':'auto'  }}/>\n\n                <Alert message=\"请求入参\" type=\"info\" style={{backgroundColor:'#c7e7ff',border:'0px','marginBottom':'10px'}}/>\n                <TextArea rows={5} style={{'width':'670px','marginBottom':'6px'}} value={typeof caseData == 'undefined' ? \"\" : caseData[0].param}/>\n                <Alert message=\"dubbo contextParams\" type=\"info\" style={{backgroundColor:'#c7e7ff',border:'0px','marginBottom':'10px'}}/>\n                <TextArea rows={3} style={{'width':'670px','marginBottom':'6px'}} value={typeof caseData == 'undefined' ? \"\" : caseData[0].testCase.contextParamScript}/>\n            </Drawer>\n        )\n    }\n}\n\nexport default Form.create()(ExeCaseDrawer)\n","import React  from 'react';\nimport { Popover,Popconfirm} from 'antd';\nimport common from \"../../style/common.css\";\nimport {getUrlParam} from \"../../utils/common\";\n\nexport const columns = (context) => [\n\n    {\n        title: '用例ID',\n        dataIndex: 'id',\n        key: 'id',\n        width:80,\n        fixed: 'left',\n    },\n    {\n        title: '用例名称',\n        dataIndex: 'name',\n        key: 'name',\n        width:350,\n    },\n    {\n        title: '应用',\n        dataIndex: 'appName',\n        key: 'appName',\n        width:100,\n        ...context.getColumnSearchProps('appName'),\n    },\n    {\n        title: '接口路径',\n        dataIndex: 'apiClassName',\n        key: 'apiClassName',\n        width:300,\n        render:function(text, record){\n            let str = <div>\n                <span>接口名：{record.testApi.name}</span><br/>\n                <span>接口路径：{record.testApi.apiClassName}</span><br/>\n                <span>方法名：{record.testApi.apiMethodName}</span><br/>\n                <span>参数类型：{record.testApi.argsTypeNames}</span><br/>\n            </div>\n            return (\n                <span>\n                    <Popover content={str} >\n                       {record.testApi.apiClassName}\n                    </Popover>\n                </span>\n            )\n        }\n    },\n    {\n        title: '方法名',\n        dataIndex: 'apiMethodName',\n        key: 'apiMethodName',\n        width:170,\n        render:function(text, record){\n            return (\n                <span>\n                    {record.testApi.apiMethodName}\n                </span>\n            )\n        }\n    },\n    {\n        title: '优先级',\n        dataIndex: 'priority',\n        key: 'priority',\n        width:80\n    },\n    {\n        title: '创建人',\n        dataIndex: 'creatorName',\n        key: 'creatorName',\n        width:150,\n    },\n    {\n        title: '更新时间',\n        dataIndex: 'editTimeStr',\n        key: 'editTimeStr',\n        width:200\n    },\n    {\n        title: '操作',\n        width: '27%',\n        key: 'operation',\n        width:250,\n        fixed: 'right',\n        render:(row,record) => {\n            let insertHref = '/edit_testcase?apiId=' + record.apiId\n            let apiHref = '/update_api?apiId=' + record.apiId\n            let updateHref = '/edit_testcase?apiId=' + record.apiId + \"&caseId=\" + record.id\n            return (\n                <span>\n                    <a href={updateHref} target=\"_blank\">修改</a>&nbsp;\n                    <a onClick={()=>{window.open(\"/edit_testcase?type=copy&apiId=\" + record.apiId + \"&caseId=\" + record.id)}} className=\"vLine\"> 复制</a>&nbsp;\n                    <a href={insertHref} target=\"_blank\" className=\"vLine\"> 追加</a>&nbsp;\n                    <a href={apiHref} target=\"_blank\" className=\"vLine\"> 接口</a>&nbsp;\n                    <a onClick={context.showExeCaseModal.bind(context,[record.id])} className=\"vLine\"> 执行</a>&nbsp;\n                    <Popconfirm title=\"确定删除此用例吗？\" onConfirm={() => context.deleteCase([record.id])} >\n                        <a href=\"#\"  className=\"vLine\"> 删除</a>\n                    </Popconfirm>\n                </span>\n            )\n        }\n    }\n];\n\n\n\n","import React, { Component } from 'react';\nimport { observer, inject } from 'mobx-react';\nimport { Select,Form, Input, Modal,Tag } from 'antd';\nimport {message} from \"antd/lib/index\";\n\nconst FormItem = Form.Item;\n\n@inject('TestCaseManagerStore','ExeRecordStore','GlobalManagerStore')\n@observer\nclass ExeCaseModal extends Component{\n    constructor(props){\n        super(props);\n        this.state={\n            scheduleType:'',\n            // env:this.props.varValue\n        }\n    }\n\n    okModal = () =>{\n        this.props.form.validateFieldsAndScroll( async (err, values) => {\n            if (!err) {\n                let params =  {\"id\":null,\"caseIds\":this.props.caseIds,\"scheduleType\":1,\"env\":this.props.GlobalManagerStore.varValue}\n                let result = await this.props.TestCaseManagerStore.exeCase(params,'case');\n                if(result.code == 200){\n                    this.hideExeCaseModal()\n                    this.timerExe(result)\n                    await this.props.TestCaseManagerStore.showCaseDrawer()\n                }else{\n                    message.warn(\"执行出现错误\")\n                }\n\n            }\n        });\n    }\n    timerExe = async(result) => {\n        let data = await this.props.ExeRecordStore.getDetailData(result.data)\n        this.timerDate = setInterval(()=> this.tick(data.status),1000);\n    }\n    handleClearTimeout(){\n        this.timerDate && clearInterval(this.timerDate);\n    }\n    componentWillUnmount(){\n        this.handleClearTimeout()\n    }\n    tick(status){\n        if(status == 2){\n            this.handleClearTimeout()\n        }\n    }\n    changeInput(e){\n        this.props.GlobalManagerStore.varValue = e.target.value\n    }\n    hideExeCaseModal(){\n        this.props.TestCaseManagerStore.hideExeCaseModal();\n    }\n\n    formItemLayout = {\n        labelCol: { span: 5 },\n        wrapperCol: { span: 19 },\n    }\n    render(){\n        const { getFieldDecorator } = this.props.form;\n        const { exeCaseModalVisible} = this.props\n        const {varValue} = this.props.GlobalManagerStore\n        // this.state.env = varValue\n        return (\n            <Modal\n                destroyOnClose\n                title=\"执行用例\"\n                width=\"800px\"\n                visible={exeCaseModalVisible}\n                onOk={this.okModal.bind(this)}\n                onCancel={this.hideExeCaseModal.bind(this)}\n                okText=\"执行\"\n                cancelText=\"取消\"\n                className=\"model\">\n                <Form className=\"ant-advanced-search-form p-xs pb-0\" >\n                    <FormItem {...this.formItemLayout} label=\"执行环境\">\n                        {getFieldDecorator('env', {\n                            initialValue: varValue,\n                            rules: [{ required: true, message: '请输入执行环境!' }],\n                        })(\n                            <Input placeholder=\"请输入执行环境\"   allowClear={true} style={{ width: 220 }}  onChange={this.changeInput.bind(this) }/>\n                        )}\n                    </FormItem>\n                    <span style={{'paddingLeft':'160px'}}><Tag color=\"orange\">可以在参数管理中配置默认的环境变量，参数名称必须为:default_env <a href=\"/global_manager\" target=\"_blank\">前往配置</a></Tag></span>\n                    <FormItem {...this.formItemLayout} label=\"执行方式\">\n                        <span>并行执行</span>\n                    </FormItem>\n                </Form>\n\n            </Modal>\n        )\n    }\n}\n\nexport default Form.create()(ExeCaseModal)\n","import React, {Component} from 'react';\nimport { observable, action, computed } from 'mobx';\nimport { observer, inject } from 'mobx-react';\nimport { Table,Pagination,Row, Col,Button,Input,Icon} from 'antd';\nimport Highlighter from 'react-highlight-words';\n\nimport {columns} from './config';\nimport SearchForm from './SearchForm';\nimport ExeCaseModal from './ExeCaseModal';\nimport ExeCaseDrawer from './ExeCaseDrawer'\nimport TreeManager from '../TreeManager/TreeManager';\nimport {message} from \"antd/lib/index\";\nmessage.config({\n    top: 200\n});\n@inject('TestCaseManagerStore','CommonStore','SceneManagerStore','ExeRecordStore','GlobalManagerStore')\n@observer\nclass TestCaseManagerList extends Component {\n    componentDidMount() {\n        this.props.setBreadcrumb([\n            {name: '用例管理'},\n        ]);\n        this.props.TestCaseManagerStore.initData(1);\n        this.props.GlobalManagerStore.getVarDetail(\"default_env\");\n    }\n    constructor(props){\n        super(props);\n        this.state= {\n            selectedRowKeys:[],\n            selectedRows:[]\n        }\n    }\n    /**\n     * 执行用例\n     */\n    batchExeCase = () => {\n        if(this.state.selectedRowKeys.length <= 0){\n            message.warn(\"请先勾选需要执行的用例\")\n            return\n        }\n        let rows = this.state.selectedRows\n        let caseIds = []\n        for (let i = 0; i < rows.length ; i++) {\n            caseIds.push(rows[i].id)\n        }\n        this.showExeCaseModal(caseIds)\n        // let params =  {\"id\":null,\"caseIds\":this.props.caseIds,\"scheduleType\":1,\"env\":this.state.env}\n        // this.props.TestCaseManagerStore.exeCase(params,\"case\");\n        // this.props.SceneManagerStore.insertCase(this.state.selectedRows);\n        // this.props.history.push(\"/insert_scene\")\n\n        // <Button type=\"primary\" style={{'marginBottom':'7px'}} onClick={this.batchExeCase.bind(this)} >\n        // 批量执行\n        // </Button>\n    }\n    onChangePage = page => {\n        this.props.TestCaseManagerStore.initData(page);\n    };\n    showExeCaseModal(caseIds){\n        this.props.TestCaseManagerStore.showExeCaseModal(caseIds);\n    }\n    deleteCase(caseIds){\n        this.props.TestCaseManagerStore.deleteCase(caseIds);\n    }\n    /**\n     * 表头搜索触发\n     * @param dataIndex\n     * @returns {{filterDropdown: (function({setSelectedKeys: *, selectedKeys?: *, confirm?: *, clearFilters?: *}): *), filterIcon: (function(*): *), onFilter: (function(*, *): boolean), onFilterDropdownVisibleChange: onFilterDropdownVisibleChange, render: (function(*): *)}}\n     */\n    getColumnSearchProps = dataIndex => ({\n        filterDropdown: ({ setSelectedKeys, selectedKeys, confirm, clearFilters }) => (\n            <div style={{ padding: 8 }}>\n                <Input\n                    ref={node => {\n                        this.searchInput = node;\n                    }}\n                    placeholder={`Search ${dataIndex}`}\n                    value={selectedKeys[0]}\n                    onChange={e => setSelectedKeys(e.target.value ? [e.target.value] : [])}\n                    onPressEnter={() => this.handleSearch(selectedKeys, confirm, dataIndex)}\n                    style={{ width: 188, marginBottom: 8, display: 'block' }}\n                />\n                <Button\n                    type=\"primary\"\n                    onClick={() => this.handleSearch(selectedKeys, confirm, dataIndex)}\n                    icon=\"search\"\n                    size=\"small\"\n                    style={{ width: 90, marginRight: 8 }}\n                >\n                    Search\n                </Button>\n                <Button onClick={() => this.handleReset(clearFilters)} size=\"small\" style={{ width: 90 }}>\n                    Reset\n                </Button>\n            </div>\n        ),\n        filterIcon: filtered => (\n            <Icon type=\"search\" style={{ color: filtered ? '#1890ff' : undefined }} />\n        ),\n        onFilter: (value, record) =>\n            record[dataIndex]\n                .toString()\n                .toLowerCase()\n                .includes(value.toLowerCase()),\n        onFilterDropdownVisibleChange: visible => {\n            if (visible) {\n                setTimeout(() => this.searchInput.select());\n            }\n        },\n        render: text =>\n            this.state.searchedColumn === dataIndex ? (\n                <Highlighter\n                    highlightStyle={{ backgroundColor: '#ffc069', padding: 0 }}\n                    searchWords={[this.state.searchText]}\n                    autoEscape\n                    textToHighlight={text.toString()}\n                />\n            ) : (\n                text\n            ),\n    });\n    handleSearch = (selectedKeys, confirm, dataIndex) => {\n        confirm();\n        this.setState({\n            searchText: selectedKeys[0],\n            searchedColumn: dataIndex,\n        });\n    };\n\n    handleReset = clearFilters => {\n        clearFilters();\n        this.setState({ searchText: '' });\n    };\n\n    /**\n     * 表头搜索触发 end\n     */\n    render(){\n        const {dataSource,pageNo,pageSize,totalCount,exeCaseModalVisible,caseIds,drawerVisible} = this.props.TestCaseManagerStore\n        const mydataSource = dataSource.toJS()\n        const rowSelection = {\n            onChange: (selectedRowKeys, selectedRows) => {\n                console.log(`selectedRowKeys: ${selectedRowKeys}`, 'selectedRows: ', selectedRows);\n                this.setState({\n                    selectedRowKeys: selectedRowKeys,\n                    selectedRows: selectedRows\n                });\n            }\n        };\n        const {exeDetailData} = this.props.ExeRecordStore\n\n        return(\n            <div className=\"container-bg\">\n                <Row>\n                    <Col span={4}>\n                        <TreeManager pageType=\"case\" maxHeight=\"700px\"/>\n                    </Col>\n                    <Col span={20}>\n                        <SearchForm/>\n                        <Table\n                            bordered\n                            columns={columns(this)} pagination={false} scroll={{ x: 1630, y: 600 }}\n                            dataSource={mydataSource}  />\n                        <Pagination onChange={this.onChangePage} pageSize={pageSize} current={pageNo}  total={totalCount} style={{'marginTop':'6px','float':'right'}}/>\n                        <ExeCaseModal exeCaseModalVisible={exeCaseModalVisible} caseIds={caseIds}   ></ExeCaseModal>\n                        <ExeCaseDrawer exeDetailData={exeDetailData} drawerVisible={drawerVisible}></ExeCaseDrawer>\n\n                    </Col>\n                </Row>\n            </div>\n        )\n    }\n}\n\nexport default TestCaseManagerList;"],"sourceRoot":""}