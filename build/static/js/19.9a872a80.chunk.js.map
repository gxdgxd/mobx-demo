{"version":3,"sources":["container/TestCaseManager/Insert/index.js"],"names":["FormItem","Item","Option","TextArea","caseId","getUrlParam","window","location","search","apiId","InsertIndex","inject","observer","props","handleClose","removedTag","tags","ApiManagerStore","filter","tag","id","console","log","setState","showInput","inputVisible","input","focus","handleInputChange","e","inputValue","target","value","handleInputConfirm","state","indexOf","insertTag","saveInputRef","insert","preventDefault","form","validateFieldsAndScroll","err","values","TestCaseManagerStore","handleAdd","add","changeDetailData","JSON","stringify","updated_src","handleEdit","handleDelete","json_str","this","setBreadcrumb","name","getApiDetailData","getDetailData","n","v","toString","getFieldDecorator","detailData","insertButtonStatus","updateButtonStatus","caseDetailData","className","style","layout","onSubmit","message","type","backgroundColor","border","formItemLayout","label","rules","required","width","showSearch","key","initialValue","apiClassName","disabled","apiMethodName","map","index","isLongTag","length","tagElem","closable","onClose","slice","title","ref","size","onChange","onBlur","onPressEnter","onClick","background","borderStyle","inputChange","bind","priority","optionChange","color","desc","rows","float","src","argsJsonFormat","onAdd","onEdit","onDelete","theme","paramScript","contextParamScript","validScript","placeholder","display","htmlType","marginBottom","open","Component","create"],"mappings":"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","file":"static/js/19.9a872a80.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport { observer, inject } from 'mobx-react';\nimport ReactJson from 'react-json-view'\nimport { Tag, Button,Alert, Select, Row,Icon, Form, Input,Tooltip,message } from 'antd';\nimport {getUrlParam,addUrlParam} from '../../../utils/common'\n\nconst FormItem = Form.Item;\nconst Option = Select.Option;\nconst { TextArea } = Input;\nlet caseId = getUrlParam('caseId',window.location.search);\nlet apiId = getUrlParam('apiId',window.location.search);\n\n@inject('ApiManagerStore')\n@inject('TestCaseManagerStore')\n@observer\nclass InsertIndex extends Component {\n    componentDidMount() {\n        this.props.setBreadcrumb([\n            {name: '用例管理'},\n            {name: '编辑用例'},\n        ]);\n        this.props.ApiManagerStore.getApiDetailData()\n        if(caseId != \"\"){\n            this.props.TestCaseManagerStore.getDetailData()\n        }\n        // this.setState({\n        //     json_str:this.props.TestCaseManagerStore.caseDetailData.paramScript\n        // })\n\n    }\n    constructor(props) {\n        super(props);\n        this.state = {\n            tags:[],\n            inputVisible: false,\n            inputValue: '',\n            json_str:\"\"\n        }\n    }\n\n    handleClose = removedTag => {\n        debugger\n        const tags = this.props.ApiManagerStore.tags.filter(tag => tag.id !== removedTag);\n        console.log(tags);\n        this.setState({ tags });\n    };\n\n    showInput = () => {\n        this.setState({ inputVisible: true }, () => this.input.focus());\n    };\n\n    handleInputChange = e => {\n        this.setState({ inputValue: e.target.value });\n    };\n\n    handleInputConfirm = () => {\n        const { inputValue } = this.state;\n        let { tags } = this.state\n        if (inputValue && tags.indexOf(inputValue) === -1) {\n            tags = [...tags, inputValue];\n        }\n        this.props.ApiManagerStore.insertTag(tags[0])\n        this.setState({\n            inputVisible: false,\n            inputValue: '',\n        });\n    };\n\n    saveInputRef = input => (this.input = input);\n\n    /**\n     * 输入框和单选按钮产生的change事件\n     * @param n\n     * @param e\n     */\n    inputChange(n,e) {\n        let obj={};\n        obj[n]=e.target.value;\n        this.props.TestCaseManagerStore.changeDetailData(n,e.target.value);\n    }\n    optionChange(n,v,Option) {\n        this.props.TestCaseManagerStore.changeDetailData(n,v.toString() || '');\n    }\n\n    /**\n     * 批量添加\n     */\n    insert = (e) => {\n        e.preventDefault();\n        this.props.form.validateFieldsAndScroll((err, values) => {\n            if (!err) {\n                this.props.TestCaseManagerStore.insert(this.props.ApiManagerStore.tags)\n            }\n        });\n    }\n\n    /**\n     * json tree 添加、修改、删除\n     * @param add\n     */\n    handleAdd = (add) => {\n        this.props.TestCaseManagerStore.changeDetailData(\"paramScript\",JSON.stringify(add.updated_src));\n    }\n    handleEdit = (add) => {\n        debugger\n        this.props.TestCaseManagerStore.changeDetailData(\"paramScript\",JSON.stringify(add.updated_src));\n    }\n    handleDelete = (add) => {\n        this.props.TestCaseManagerStore.changeDetailData(\"paramScript\",JSON.stringify(add.updated_src));\n    }\n    render(){\n        const { getFieldDecorator} = this.props.form;\n        const {detailData,tags} = this.props.ApiManagerStore\n        const {insertButtonStatus,updateButtonStatus,caseDetailData} = this.props.TestCaseManagerStore\n        const { inputVisible, inputValue} = this.state;\n        return(\n            <div className=\"container-bg\" style={{'marginLeft':'15px'}}>\n                <Form  layout=\"inline\" className=\"ant-advanced-search-form p-xs pb-0\" onSubmit={this.insert}>\n                    <Alert message=\"接口信息\" type=\"info\" style={{backgroundColor:'#c7e7ff',border:'0px','marginBottom':'10px'}}/>\n                    <Row>\n                        <FormItem {...this.formItemLayout} label=\"应用名\">\n                            {getFieldDecorator('version', {\n                                rules: [{ required: false, message: '请填写应用名!' }],\n                            })(\n                                <Select style={{ width: 145 }}  showSearch >\n                                    <Option key=\"1\" value=\"1\">1</Option>\n                                </Select>\n                            )}\n                        </FormItem>\n                        <FormItem {...this.formItemLayout} label=\"一级模块\">\n                            {getFieldDecorator('version', {\n                                rules: [{ required: false, message: '请填写一级模块!' }],\n                            })(\n                                <Select style={{ width: 145 }}  showSearch >\n                                    <Option key=\"1\" value=\"1\">1</Option>\n                                </Select>\n                            )}\n                        </FormItem>\n                        <FormItem {...this.formItemLayout} label=\"二级模块\">\n                            {getFieldDecorator('version', {\n                                rules: [{ required: false, message: '请填写二级模块!' }],\n                            })(\n                                <Select style={{ width: 145 }}  showSearch >\n                                    <Option key=\"1\" value=\"1\">1</Option>\n                                </Select>\n                            )}\n                        </FormItem>\n                        <FormItem {...this.formItemLayout} label=\"三级模块\">\n                            {getFieldDecorator('version', {\n                                rules: [{ required: false, message: '请填写三级模块!' }],\n                            })(\n                                <Select style={{ width: 145 }}  showSearch >\n                                    <Option key=\"1\" value=\"1\">1</Option>\n                                </Select>\n                            )}\n                        </FormItem>\n                    </Row>\n                    <Row>\n                        <FormItem {...this.formItemLayout} label=\"接口路径\">\n                            {getFieldDecorator('apiClassName', {\n                                initialValue: detailData.apiClassName,\n                                rules: [{ required: false, message: '请填写接口路径!' }],\n                            })(\n                                <Input disabled style={{ width: 823 }} />\n                            )}\n                        </FormItem>\n                    </Row>\n                    <Row>\n                        <FormItem {...this.formItemLayout} label=\"方法名\">\n                            {getFieldDecorator('apiMethodName', {\n                                initialValue: detailData.apiMethodName,\n                                rules: [{ required: false, message: '请填写方法名!' }],\n                            })(\n                                <Input disabled style={{ width: 375 }}/>\n                            )}\n                        </FormItem>\n                        <FormItem {...this.formItemLayout} label=\"接口名\">\n                            <Input disabled style={{ width: 389 }} value={detailData.name}/>\n                        </FormItem>\n                    </Row>\n                    <Row>\n                        <FormItem {...this.formItemLayout} label=\"标签\">\n                            <div>\n                                {tags.map((tag, index) => {\n                                    const isLongTag = tag.length > 20;\n                                    const tagElem = (\n                                        <Tag key={tag.id} closable onClose={() => this.handleClose(tag.id)}>\n                                            {isLongTag ? `${tag.value.slice(0, 20)}...` : tag.value}\n                                        </Tag>\n                                    );\n                                    return isLongTag ? (\n                                        <Tooltip title={tag.value} key={tag.id}>\n                                            {tagElem}\n                                        </Tooltip>\n                                    ) : (\n                                        tagElem\n                                    );\n                                })}\n                                {inputVisible && (\n                                    <Input\n                                        ref={this.saveInputRef}\n                                        type=\"text\"\n                                        size=\"small\"\n                                        style={{ width: 78 }}\n                                        value={inputValue}\n                                        onChange={this.handleInputChange}\n                                        onBlur={this.handleInputConfirm}\n                                        onPressEnter={this.handleInputConfirm}\n                                    />\n                                )}\n                                {!inputVisible && (\n                                    <Tag onClick={this.showInput} style={{ background: '#fff', borderStyle: 'dashed' }}>\n                                        <Icon type=\"plus\" /> New Tag\n                                    </Tag>\n                                )}\n\n                            </div>\n                        </FormItem>\n                    </Row>\n                    <Alert message=\"用例信息\" type=\"info\" style={{backgroundColor:'#c7e7ff',border:'0px','marginBottom':'10px'}}/>\n                    <Row>\n                        <FormItem {...this.formItemLayout} label=\"用例名\">\n                            {getFieldDecorator('name', {\n                                initialValue: caseDetailData.name,\n                                rules: [{ required: true, message: '请填写用例名!' }],\n                            })(\n                                <Input style={{ width: 365 }} onChange={this.inputChange.bind(this,'name')}/>\n                            )}\n                        </FormItem>\n                        <FormItem {...this.formItemLayout} label=\"优先级\">\n                            <span>\n                                <Select  value={caseDetailData.priority} style={{ width: 120 }} onChange={this.optionChange.bind(this,'priority')}>\n                                    <Option value=\"1\">1</Option>\n                                    <Option value=\"2\">2</Option>\n                                    <Option value=\"3\">3</Option>\n                                    <Option value=\"4\">4</Option>\n                                </Select>&nbsp;&nbsp;&nbsp;\n                                <Tag color=\"magenta\"> 1为最高，4为最低 </Tag>\n                            </span>\n                        </FormItem>\n                    </Row>\n                    <Row>\n                        <FormItem {...this.formItemLayout} label=\"描述\">\n                            {getFieldDecorator('desc', {\n                                initialValue: caseDetailData.desc,\n                                rules: [{ required: false, message: '请填写用例描述!' }],\n                            })(\n                                <TextArea rows={3} style={{ width: 852 }} onChange={this.inputChange.bind(this,'desc')}/>\n                            )}\n                        </FormItem>\n                    </Row>\n                    <Alert message=\"请求入参\" type=\"info\" style={{backgroundColor:'#c7e7ff',border:'0px','marginBottom':'10px'}}/>\n                    <Row>\n                        <div style={{float:'left',width:'50%'}}>\n                            <ReactJson src={detailData.argsJsonFormat} onAdd={this.handleAdd} onEdit={this.handleEdit} onDelete={this.handleDelete}   theme=\"google\" style={{border:'1px solid #ccc','maxHeight':'325px','overflow-y':'auto' }}/>\n                        </div>\n                        <div style={{float:'right',width:'49%'}}>\n\n                            <TextArea value={caseDetailData.paramScript}  rows={15} style={{'width':'1300px'}} onChange={this.inputChange.bind(this,'paramScript')}/>\n\n                        </div>\n                    </Row>\n                    <Alert message=\"其他参数（dubbo rpc parameter）\" type=\"info\" style={{backgroundColor:'#c7e7ff',border:'0px','marginBottom':'10px'}}/>\n                    <Row>\n                        <FormItem {...this.formItemLayout} label=\"\">\n                            {getFieldDecorator('contextParamScript', {\n                                initialValue: caseDetailData.contextParamScript,\n                                rules: [{ required: false, message: '请填写其他参数!' }],\n                            })(\n                                <TextArea rows={3} style={{ width: 1210 }} onChange={this.inputChange.bind(this,'contextParamScript')}/>\n                            )}\n                        </FormItem>\n                    </Row>\n                    <Alert message=\"结果校验规则\" type=\"info\" style={{backgroundColor:'#c7e7ff',border:'0px','marginBottom':'10px'}}/>\n                    <Row>\n                        <FormItem {...this.formItemLayout} label=\"\">\n                            {getFieldDecorator('validScript', {\n                                initialValue: caseDetailData.validScript,\n                                rules: [{ required: true, message: '请填写用例校验规则!' }],\n                            })(\n                                <TextArea rows={4} style={{ width: 1210 }} placeholder=\"如：result != null  && result.data != null && result.data.size() > 0 && result.data.id == $p.result.id\" onChange={this.inputChange.bind(this,'validScript')}/>\n                            )}\n                        </FormItem>\n                    </Row>\n                    <Row>\n                        <FormItem {...this.formItemLayout} label=\"\" style={{display:insertButtonStatus}}>\n                            <Button type=\"primary\" htmlType=\"submit\" style={{marginBottom:'8px'}}>添加用例</Button>\n                        </FormItem>\n                        <FormItem {...this.formItemLayout} label=\"\" style={{display:updateButtonStatus}}>\n                            <Button type=\"primary\" htmlType=\"submit\" style={{marginBottom:'8px'}}>修改用例</Button>\n                        </FormItem>\n                        <FormItem {...this.formItemLayout} label=\"\" style={{display:updateButtonStatus}}>\n                            <Button type=\"primary\" htmlType=\"submit\" style={{marginBottom:'8px'}} onClick={()=>{window.open(\"/edit_testcase?type=copy&apiId=\" + apiId + \"&caseId=\" + caseId)}}>复制用例</Button>\n                        </FormItem>\n                        <FormItem {...this.formItemLayout} label=\"\">\n                            <Button type=\"primary\" htmlType=\"submit\"  style={{marginBottom:'8px'}}>只测试不保存</Button>\n                        </FormItem>\n                        <FormItem {...this.formItemLayout} label=\"\">\n                            <Input style={{ width: 280 }} placeholder=\"请输入测试用的dubbo分组\"/>\n                        </FormItem>\n                    </Row>\n                </Form>\n            </div>\n        )\n    }\n}\n\nexport default Form.create()(InsertIndex)"],"sourceRoot":""}