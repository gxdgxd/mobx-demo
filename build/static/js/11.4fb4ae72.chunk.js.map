{"version":3,"sources":["container/TreeManager/InsertTreeModal.js","container/TreeManager/TreeManager.js","container/ApiManager/config.js","container/ApiManager/SearchForm.js","container/ApiManager/index.js"],"names":["FormItem","Item","InsertTreeModal","inject","observer","props","state","this","form","validateFieldsAndScroll","err","values","TreeManagerStore","insertTreeModule","hideTreeModal","n","e","target","value","changeTableRequestData","getFieldDecorator","treeModalVisible","tableRequestData","modalName","destroyOnClose","title","width","visible","onOk","okModal","bind","onCancel","hideModal","okText","cancelText","className","layout","formItemLayout","label","initialValue","name","rules","required","message","style","placeholder","onChange","inputChange","Component","create","TreeNode","TreeManager","onSelect","selectedKeys","info","console","log","appId","node","dataRef","moduleId","appName","moduleName","pageType","TestCaseManagerStore","initData","ApiManagerStore","setTreeParams","handleAddTree","item","stopPropagation","id","showTreeModal","type","handleEditTree","handleDeleteTree","deleteTree","getNodeTitle","level","onClick","theme","onConfirm","onLoadData","treeNode","a","children","getTreeModuleDataSouce","parentId","renderTreeNodes","data","map","key","getTreeAppDataSouce","treeAppDataSource","maxHeight","loadData","columns","context","dataIndex","fixed","render","text","record","length","substr","content","str","apiMethodName","apiClassName","groupId","artifactId","row","tags","tag","index","isLongTag","tagElem","color","slice","updateHref","searchCaseHref","insertCaseHref","href","insertColumns","getColumnSearchProps","argsTypeNames","editable","desc","insertApi","Option","SearchForm","handleCreatorSearch","CommonStore","getAllCreators","setState","handleCreatorChange","handleSubmit","preventDefault","labelCol","span","wrapperCol","undefined","v","allCreators","onSubmit","gutter","allowClear","showSearch","defaultActiveFirstOption","showArrow","filterOption","onSearch","notFoundContent","d","userId","realName","optionChange","allTags","htmlType","window","open","ApiManagerList","onChangePage","page","json_str","expandedKeys","autoExpandParent","setBreadcrumb","getAllTags","obj","dataSource","pageNo","pageSize","totalCount","mydataSource","toJS","bordered","scroll","x","y","pagination","current","total"],"mappings":"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","file":"static/js/11.4fb4ae72.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport { observer, inject } from 'mobx-react';\nimport {Row, Form, Input, Modal} from 'antd';\nconst FormItem = Form.Item;\n\n\n@inject('TreeManagerStore')\n@observer\nclass InsertTreeModal extends Component{\n    constructor(props){\n        super(props);\n        this.state={\n        }\n    }\n\n    okModal(){\n        this.props.form.validateFieldsAndScroll((err, values) => {\n            if (!err) {\n                this.props.TreeManagerStore.insertTreeModule();\n            }\n        });\n    }\n\n    hideModal(){\n        this.props.TreeManagerStore.hideTreeModal();\n    }\n    /**\n     * 输入框和单选按钮产生的change事件\n     * @param n\n     * @param e\n     */\n    inputChange(n,e) {\n        let obj={};\n        obj[n]=e.target.value;\n        this.props.TreeManagerStore.changeTableRequestData(n,e.target.value);\n    }\n\n    render(){\n        const { getFieldDecorator } = this.props.form;\n        const { treeModalVisible,tableRequestData,modalName} = this.props\n        return (\n            <Modal\n                destroyOnClose\n                title={modalName}\n                width=\"900px\"\n                visible={treeModalVisible}\n                onOk={this.okModal.bind(this)}\n                onCancel={this.hideModal.bind(this)}\n                okText=\"保存\"\n                cancelText=\"取消\"\n                className=\"model\" width={500} >\n\n                <Form  layout=\"inline\" className=\"ant-advanced-search-form p-xs pb-0\">\n                    <Row>\n                        <FormItem {...this.formItemLayout} label=\"模块名称\" >\n                            {getFieldDecorator('name', {\n                                initialValue: tableRequestData.name,\n                                rules: [{ required: true, message: '请填写模块名称!' }],\n                            })(\n                                <Input  style={{ width: 250 }} placeholder='请填写模块名称!' onChange={this.inputChange.bind(this,'name')}/>\n                            )}\n                        </FormItem>\n                    </Row>\n                </Form>\n            </Modal>\n        )\n    }\n}\n\nexport default Form.create()(InsertTreeModal)\n","import React, {Component} from 'react';\nimport { observable, action, computed } from 'mobx';\nimport { observer, inject } from 'mobx-react';\nimport {  Icon,Tree, Popconfirm} from 'antd';\nimport InsertTreeModal from './InsertTreeModal';\nimport TreeManagerStore from \"../../stores/TreeManager/TreeManagerStore\";\n\nconst { TreeNode } = Tree;\n\n@inject('TreeManagerStore','TestCaseManagerStore','ApiManagerStore')\n@observer\nclass TreeManager extends Component {\n    componentDidMount() {\n        this.props.TreeManagerStore.getTreeAppDataSouce();\n    }\n    constructor(props){\n        super(props);\n    }\n    onSelect = (selectedKeys, info) => {\n        console.log(info)\n        let appId = info.node.props.dataRef.appId\n        let moduleId = info.node.props.dataRef.moduleId\n        let appName = info.node.props.dataRef.appName\n        let moduleName = info.node.props.dataRef.moduleName\n        let pageType = this.props.pageType\n        if(pageType == 'case'){\n            this.props.TestCaseManagerStore.initData(1,appId,moduleId)\n        }else if(pageType == \"api\"){\n            this.props.ApiManagerStore.initData(1,appId,moduleId)\n        }else if(pageType == \"insertApi\"){\n            this.props.ApiManagerStore.setTreeParams(appId,moduleId,appName,moduleName)\n        }else if(pageType == \"updateApi\"){\n            this.props.ApiManagerStore.setTreeParams(appId,moduleId,appName,moduleName)\n        }\n    };\n    /**\n     * 新增节点\n     */\n    handleAddTree = (e,item) => {\n        e.stopPropagation();\n        if (item.id) {\n            console.log(e.target.value)\n            this.props.TreeManagerStore.showTreeModal({\n                moduleName:\"添加模块\",\n                type:\"insert\",\n                item:item\n            })\n        }\n    };\n    /**\n     * 编辑节点\n     */\n    handleEditTree = (e,item) => {\n        e.stopPropagation();\n        if (item.id) {\n            this.props.TreeManagerStore.showTreeModal({\n                moduleName:\"修改模块\",\n                type:\"update\",\n                item:item,\n            });\n        }\n    };\n    /**\n     * 编辑节点\n     */\n    handleDeleteTree = (item) => {\n        if (item.id) {\n            this.props.TreeManagerStore.deleteTree(item)\n        }\n    };\n    /**\n     * 获取节点的title内容\n     */\n    getNodeTitle = (title, id, level,item) => {\n        return (\n            <div className=\"tree-title\">\n                <span>\n                    {title}\n                </span>\n                <div className=\"tree-parent-div \">\n                    <span className=\"tree-span\" onClick={e => this.handleAddTree(e,item)}>\n                       {level !== 4 &&\n                            <Icon type=\"plus-circle\" theme=\"outlined\"/>\n                       }\n                    </span>\n                    <span className=\"tree-span\"  onClick={e => this.handleEditTree(e,item)}>\n                       {level != 1 &&\n                            <Icon type=\"form\" theme=\"outlined\" />\n                       }\n                    </span>\n                    <span className=\"tree-span\" >\n                         {level != 1 &&\n                              <Popconfirm title=\"确定删除此参数吗？\" onConfirm={() => this.handleDeleteTree(item)}>\n                                 <Icon type=\"delete\" theme=\"outlined\"/>\n                              </Popconfirm>\n                         }\n                    </span>\n                </div>\n            </div>\n        );\n    };\n    onLoadData = async (treeNode) => {\n        if (treeNode.props.children) {\n            return;\n        }\n        await this.props.TreeManagerStore.getTreeModuleDataSouce(treeNode.props.dataRef,treeNode.props.dataRef.parentId)\n    }\n\n    renderTreeNodes = (data, level) => {\n        return (\n            data.map(item => {\n                const title = this.getNodeTitle(item.title, item.id, level,item);\n                if (item.children) {\n                    return (\n                        <TreeNode title={title} key={item.id} dataRef={item}>\n                            {this.renderTreeNodes(item.children,level + 1)}\n                        </TreeNode>\n                    );\n                }\n                return <TreeNode {...item} title={title} key={item.id} dataRef={item} />;\n            })\n        );\n    };\n\n    render(){\n        const {treeAppDataSource,treeModalVisible,tableRequestData,modalName} = this.props.TreeManagerStore\n        return(\n            <div style={{'maxHeight':this.props.maxHeight,'overflow-y':'auto' }}>\n                <Tree onSelect={this.onSelect} loadData={this.onLoadData}>{this.renderTreeNodes(treeAppDataSource,1)}</Tree>\n                <InsertTreeModal modalName={modalName} treeModalVisible={treeModalVisible} tableRequestData={tableRequestData}></InsertTreeModal>\n            </div>\n        )\n    }\n}\n\nexport default TreeManager;","import React  from 'react';\nimport { Icon,Tag,Input,Tooltip,Popconfirm,Popover} from 'antd';\nimport common from \"../../style/common.css\";\n\nexport const columns = (context) => [\n    {\n        title: '接口ID',\n        dataIndex: 'id',\n        key: 'id',\n        width:80,\n        fixed: 'left',\n    },\n\n    {\n        title: '接口名',\n        dataIndex: 'name',\n        key: 'name',\n        width:230,\n        render:function(text, record){\n            var name = record.name.length > 20 ? record.name.substr(0,20) + '...' : record.name;\n            return (\n                <span  >\n                    <Popover content={record.name} >\n                        {name}\n                    </Popover>\n                </span>\n            )\n        }\n    },\n    {\n        title: '应用',\n        dataIndex: 'appName',\n        key: 'appName',\n        width:100,\n    },\n    {\n        title: '接口路径',\n        dataIndex: 'apiClassName',\n        key: 'apiClassName',\n        width:360,\n    },\n    {\n        title: '方法名',\n        dataIndex: 'apiMethodName',\n        key: 'apiMethodName',\n        width:210,\n        render:function(text, record){\n            let str = <div>\n                        <span>方法名：{record.apiMethodName}</span><br/>\n                        <span>接口路径：{record.apiClassName}</span><br/>\n                        <span>应用：{record.appName}</span><br/>\n                        <span>groupId：{record.groupId}</span><br/>\n                        <span>artifactId：{record.artifactId}</span><br/>\n                        <span>模块：{record.moduleName}</span>\n                      </div>\n            return (\n                <span>\n                    <Popover content={str} >\n                       {record.apiMethodName}\n                    </Popover>\n                </span>\n            )\n        }\n    },\n    {\n        title: '方法参数',\n        dataIndex: 'argsTypeNames',\n        key: 'argsTypeNames',\n        width:360,\n    },\n    {\n        title: '更新时间',\n        dataIndex: 'editTimeStr',\n        key: 'editTimeStr',\n        width:220,\n    },\n    {\n        title: '创建人',\n        dataIndex: 'creatorName',\n        key: 'creatorName',\n        width:150,\n    },\n    {\n        title: '标签',\n        dataIndex: 'tags',\n        key: 'tags',\n        width:230,\n        render:(row,record) => {\n\n            return (\n                <span>\n                    {record.tags.map((tag, index) => {\n                        const isLongTag = tag.length > 20;\n                        const tagElem = (\n                            <Tag key={tag.id} color=\"purple\">\n                                {isLongTag ? `${tag.value.slice(0, 20)}...` : tag.value}\n                            </Tag>\n                        );\n                        return isLongTag ? (\n                            <Tooltip title={tag.value} key={tag.id}>\n                                {tagElem}\n                            </Tooltip>\n                        ) : (\n                            tagElem\n                        );\n                    })}\n                </span>\n            )\n        }\n    },\n    {\n        title: '操作',\n        width:230,\n        key: 'operation',\n        fixed: 'right',\n        render:(row,record) => {\n            let updateHref = \"/update_api?apiId=\" + record.id\n            let searchCaseHref = \"/testcase_manager?apiId=\" + record.id\n            let insertCaseHref = \"/edit_testcase?apiId=\" + record.id\n\n            return (\n                <span>\n                    <a href={updateHref} target=\"_blank\">修改接口</a>&nbsp;\n                    <a href={searchCaseHref} target=\"_blank\" className=\"vLine\"> 查看用例</a>&nbsp;\n                    <a href={insertCaseHref} target=\"_blank\" className=\"vLine\"> 添加用例</a>\n                </span>\n            )\n        }\n    }\n];\nexport const insertColumns = (context) => [\n    {\n        title: '接口路径',\n        dataIndex: 'apiClassName',\n        key: 'apiClassName',\n        width:'30%',\n        ...context.getColumnSearchProps('apiClassName'),\n        render:function(text, record){\n            var name = record.apiClassName.length > 35 ? record.apiClassName.substr(0,35) + '...' : record.apiClassName;\n\n            let str = <div>\n                <span>接口路径：{record.apiClassName}</span><br/>\n                <span>方法名：{record.apiMethodName}</span><br/>\n                <span>参数类型：{record.argsTypeNames}</span><br/>\n            </div>\n            return (\n                <span>\n                    <Popover content={str} >\n                       {name}\n                    </Popover>\n                </span>\n            )\n        }\n    },\n    {\n        title: '方法名',\n        dataIndex: 'apiMethodName',\n        key: 'apiMethodName',\n        width:'20%',\n        ...context.getColumnSearchProps('apiMethodName'),\n        render:function(text, record){\n            return (\n                <span  >\n                    <Popover content={record.apiMethodName} >\n                        {record.apiMethodName}\n                    </Popover>\n                </span>\n            )\n        }\n    },\n\n    {\n        title: '接口名',\n        dataIndex: 'name',\n        key: 'name',\n        width:'17%',\n        editable: true,\n        render:(row,record) => {\n            if(record.name != null){\n                return (\n                    <span>{record.name}</span>\n                )\n            }else{\n                return (\n                    <span><font color=\"orange\">无</font></span>\n                )\n            }\n        }\n    },\n    {\n        title: '描述',\n        dataIndex: 'desc',\n        key: 'desc',\n        width:'17%',\n        editable: true,\n        render:(row,record) => {\n            if(record.desc != null){\n                return (\n                    <span>{record.desc}</span>\n                )\n            }else{\n                return (\n                    <span><font color=\"orange\">无</font></span>\n                )\n            }\n        }\n    },\n    // {\n    //     title: '打标签',\n    //     dataIndex: 'tag',\n    //     key: 'tag',\n    //     width:'20%',\n        // render:(row,record) => {\n        //     const {tags,inputVisible, inputValue } = context.state;\n        //\n        //     return (\n        //         <div>\n        //             {tags.map((tag, index) => {\n        //                 const isLongTag = tag.length > 20;\n        //                 const tagElem = (\n        //                     <Tag key={tag} closable  onClose={() => context.handleClose(tag)}>\n        //                         {isLongTag ? `${tag.slice(0, 20)}...` : tag}\n        //                     </Tag>\n        //                 );\n        //                 return isLongTag ? (\n        //                     <Tooltip title={tag} key={tag}>\n        //                         {tagElem}\n        //                     </Tooltip>\n        //                 ) : (\n        //                     tagElem\n        //                 );\n        //             })}\n        //             {inputVisible && (\n        //                 <Input\n        //                 ref={context.saveInputRef}\n        //                 type=\"text\"\n        //                 size=\"small\"\n        //                 style={{ width: 78 }}\n        //                 value={inputValue}\n        //                 onChange={context.handleInputChange}\n        //                 onBlur={context.handleInputConfirm}\n        //                 onPressEnter={context.handleInputConfirm}\n        //                 />\n        //             )}\n        //             {!inputVisible && (\n        //                 <Tag onClick={context.showInput} style={{ background: '#fff', borderStyle: 'dashed' }}>\n        //                     <Icon type=\"plus\" /> New Tag\n        //                 </Tag>\n        //             )}\n        //         </div>\n        //     )\n        // }\n    // },\n    {\n        title: '操作',\n        width: '7%',\n        key: 'operation',\n        render:(row,record) => {\n            return (\n                <div>\n                    <span >\n                        <Popconfirm title=\"确定添加此接口吗？\" onConfirm={() => context.insertApi(record)} >\n                            <a href=\"#\" >添加</a>\n                        </Popconfirm>\n                    </span>\n                </div>\n            )\n        }\n    }\n\n]\n\n\n","import React, { Component } from 'react';\nimport { observer, inject } from 'mobx-react';\nimport { Button, Select,Icon, Row, Col, Form, Input } from 'antd';\n\nconst FormItem = Form.Item;\nconst Option = Select.Option;\n\n@inject('ApiManagerStore','CommonStore')\n@observer\nclass SearchForm extends Component{\n    constructor(props){\n        super(props);\n        this.state={\n            data: [],\n            value: undefined,\n        }\n    }\n\n    componentDidMount() {\n    }\n\n    inputChange(n,e) {\n        this.props.ApiManagerStore.changeTableRequestData(n,e.target.value);\n    }\n    optionChange(n,v) {\n        this.props.ApiManagerStore.changeTableRequestData(n,v || '');\n    }\n    handleCreatorSearch = value => {\n        if (value) {\n            this.props.CommonStore.getAllCreators(value)\n        } else {\n            this.setState({ data: [] });\n        }\n    };\n\n    handleCreatorChange = value => {\n        this.setState({ value });\n        this.props.ApiManagerStore.changeTableRequestData('creatorId',value);\n    };\n    handleSubmit = (e) => {\n        e.preventDefault();\n        this.props.ApiManagerStore.initData(1);\n    }\n    formItemLayout = {\n        labelCol: { span: 5 },\n        wrapperCol: { span: 19 },\n    }\n    render(){\n        const {allCreators} = this.props.CommonStore\n        return (\n            <Form  className=\"ant-advanced-search-form p-xs pb-0\"  onSubmit={this.handleSubmit}>\n                <Row gutter={48}>\n                    <Col span={7}>\n                        <FormItem {...this.formItemLayout} label=\"接口名\">\n                            <Input placeholder=\"请输入接口名\" onChange={this.inputChange.bind(this,'name')}/>\n                        </FormItem>\n                    </Col>\n                    <Col span={7}>\n                        <FormItem {...this.formItemLayout} label=\"方法名\">\n                            <Input placeholder=\"请输入方法名\" onChange={this.inputChange.bind(this,'apiMethodName')}/>\n                        </FormItem>\n                    </Col>\n                    <Col span={7}>\n                        <FormItem {...this.formItemLayout} label=\"接口ID\">\n                            <Input placeholder=\"请输入接口ID\" onChange={this.inputChange.bind(this,'id')} allowClear={true}/>\n                        </FormItem>\n                    </Col>\n                </Row>\n                <Row gutter={48}>\n                    <Col span={7}>\n                        <FormItem {...this.formItemLayout} label=\"创建人\">\n                            <Select\n                                showSearch\n                                value={this.state.value}\n                                placeholder=\"请输入真名搜索(非花名)\"\n                                style={this.props.style}\n                                defaultActiveFirstOption={false}\n                                showArrow={false} allowClear={true}\n                                filterOption={false}\n                                onSearch={this.handleCreatorSearch}\n                                onChange={this.handleCreatorChange}\n                                notFoundContent={null}\n                            >\n                                {allCreators.map(d => <Option key={d.userId}>{d.realName}</Option>)}\n                            </Select>\n                        </FormItem>\n                    </Col>\n                    <Col span={7}>\n                        <FormItem {...this.formItemLayout} label=\"标签\">\n                            <Select name=\"tagId\" allowClear={true} placeholder=\"请选择标签搜索\"\n                                    onChange={this.optionChange.bind(this,'tagId')}>\n                                {this.props.allTags.map(item => <Option key={item.id} value={item.id}>{item.value}</Option>)}\n                            </Select>\n                        </FormItem>\n                    </Col>\n                    <Col span={3}>\n                        <Form.Item>\n                            <Button type=\"primary\" htmlType=\"submit\" >\n                                <Icon type=\"search\" /> 搜索\n                            </Button>\n                        </Form.Item>\n                    </Col>\n                    <Col span={3} >\n                        <Form.Item>\n                            <Button type=\"primary\"  onClick={()=>{window.open(\"/insert_api\")}}><Icon type=\"plus\" /> 添加接口</Button>\n                        </Form.Item>\n                    </Col>\n                </Row>\n            </Form>\n        )\n    }\n}\n\nexport default Form.create()(SearchForm)\n\n","import React, {Component} from 'react';\nimport { observable, action, computed } from 'mobx';\nimport { observer, inject } from 'mobx-react';\nimport { Table,Row, Col,Icon,Pagination} from 'antd';\nimport {columns} from './config';\nimport SearchForm from './SearchForm';\nimport TreeManager from '../TreeManager/TreeManager';\nimport common from \"../../style/common.css\";\n\n@inject('ApiManagerStore','CommonStore',)\n@observer\nclass ApiManagerList extends Component {\n    componentDidMount() {\n        this.props.setBreadcrumb([\n            {name: '接口管理'},\n        ]);\n        this.props.ApiManagerStore.initData(1);\n        this.props.CommonStore.getAllTags();\n    }\n    constructor(props){\n        super(props);\n        this.state= {\n            json_str:{},\n            expandedKeys: [],\n            autoExpandParent: true,\n            selectedKeys: [],\n        }\n    }\n\n    inputChange(n,e) {\n        let obj={};\n        obj[n]=e.target.value;\n        this.setState(obj);\n    }\n\n    onChangePage = page => {\n        console.log(page);\n        this.props.ApiManagerStore.initData(page);\n    };\n    render(){\n        const {dataSource,pageNo,pageSize,totalCount} = this.props.ApiManagerStore\n        const {allTags,allCreators} = this.props.CommonStore\n        const mydataSource = dataSource.toJS()\n\n        return(\n            <div className=\"container-bg\">\n                <Row>\n                    <Col span={4}>\n                        <TreeManager pageType=\"api\" maxHeight=\"700px\"/>\n                    </Col>\n                    <Col span={20}>\n                        <SearchForm allTags={allTags} allCreators={allCreators} />\n                        <Table\n                            bordered\n                            columns={columns(this)} scroll={{ x: 1780, y: 600 }}\n                            dataSource={mydataSource} pagination={false}\n                        />\n                        <Pagination onChange={this.onChangePage} pageSize={pageSize} current={pageNo}  total={totalCount} style={{'marginTop':'6px','float':'right'}}/>\n                    </Col>\n                </Row>\n            </div>\n        )\n    }\n}\n\nexport default ApiManagerList;"],"sourceRoot":""}