{"version":3,"sources":["container/TagManager/SingleTag.js","container/TestCaseManager/Insert/index.js"],"names":["SingleTag","inject","observer","props","handleClose","removedTag","tags","filter","tag","id","console","log","setState","showInput","inputVisible","input","focus","handleInputChange","e","inputValue","target","value","handleInputConfirm","a","state","indexOf","TagManagerStore","postInsertTag","result","data","getTags","saveInputRef","this","map","index","isLongTag","length","tagElem","key","closable","onClose","slice","title","ref","type","size","style","width","onChange","onBlur","onPressEnter","onClick","background","borderStyle","Component","FormItem","Item","Option","TextArea","InsertIndex","ApiManagerStore","insertTags","insert","preventDefault","form","validateFieldsAndScroll","err","values","TestCaseManagerStore","detailData","testCaseExe","caseId","getUrlParam","window","location","search","params","dubboGroup","exeCase","warn","handleAdd","add","changeDetailData","JSON","stringify","updated_src","handleEdit","handleDelete","json_str","setBreadcrumb","name","getApiDetailData","getDetailData","n","v","toString","getFieldDecorator","insertButtonStatus","updateButtonStatus","caseDetailData","className","layout","onSubmit","message","backgroundColor","border","formItemLayout","label","color","appName","moduleName","initialValue","apiClassName","rules","required","disabled","apiMethodName","pllaceholder","inputChange","bind","priority","optionChange","desc","rows","float","src","eval","argsJsonFormat","onAdd","onEdit","onDelete","theme","paramScript","contextParamScript","validScript","placeholder","display","htmlType","marginBottom","open","allowClear","create"],"mappings":"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","file":"static/js/16.b1d1d1db.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport { observer, inject } from 'mobx-react';\nimport { Tag,Icon, Input,Tooltip } from 'antd';\n\n@inject('TagManagerStore','ApiManagerStore')\n@observer\nclass SingleTag extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            tags:[],\n            inputVisible: false,\n            inputValue: '',\n        }\n    }\n\n    handleClose = removedTag => {\n        debugger\n        const tags = this.props.tags.filter(tag => tag.id !== removedTag);\n        console.log(tags);\n        this.setState({ tags });\n    };\n\n    showInput = () => {\n        this.setState({ inputVisible: true }, () => this.input.focus());\n    };\n\n    handleInputChange = e => {\n        this.setState({ inputValue: e.target.value });\n    };\n\n    handleInputConfirm = async () => {\n        const { inputValue } = this.state;\n        let { tags } = this.state\n        if (inputValue && tags.indexOf(inputValue) === -1) {\n            tags = [...tags, inputValue];\n        }\n        const result = await this.props.TagManagerStore.postInsertTag(tags[0])\n        let tag = {'id':result.data,'value':tags[0]}\n        this.props.getTags(tag)\n        this.setState({\n            inputVisible: false,\n            inputValue: '',\n        });\n    };\n\n    saveInputRef = input => (this.input = input);\n\n    render(){\n        const { inputVisible, inputValue} = this.state;\n        return(\n            <div>\n                {this.props.tags.map((tag, index) => {\n                    const isLongTag = tag.length > 20;\n                    const tagElem = (\n                        <Tag key={tag.id} closable onClose={() => this.handleClose(tag.id)}>\n                            {isLongTag ? `${tag.value.slice(0, 20)}...` : tag.value}\n                        </Tag>\n                    );\n                    return isLongTag ? (\n                        <Tooltip title={tag.value} key={tag.id}>\n                            {tagElem}\n                        </Tooltip>\n                    ) : (\n                        tagElem\n                    );\n                })}\n                {inputVisible && (\n                    <Input\n                        ref={this.saveInputRef}\n                        type=\"text\"\n                        size=\"small\"\n                        style={{ width: 78 }}\n                        value={inputValue}\n                        onChange={this.handleInputChange}\n                        onBlur={this.handleInputConfirm}\n                        onPressEnter={this.handleInputConfirm}\n                    />\n                )}\n                {!inputVisible && (\n                    <Tag onClick={this.showInput} style={{ background: '#fff', borderStyle: 'dashed' }}>\n                        <Icon type=\"plus\" /> New Tag\n                    </Tag>\n                )}\n            </div>\n        )\n    }\n}\n\nexport default SingleTag","import React, { Component } from 'react';\nimport { observer, inject } from 'mobx-react';\nimport ReactJson from 'react-json-view'\nimport { Tag, Button,Alert, Select, Row,Icon, Form, Input,Tooltip,message } from 'antd';\nimport {getUrlParam} from '../../../utils/common'\nimport SingleTag from \"../../TagManager/SingleTag\";\n\nconst FormItem = Form.Item;\nconst Option = Select.Option;\nconst { TextArea } = Input;\n\n@inject('TestCaseManagerStore','ApiManagerStore')\n@observer\nclass InsertIndex extends Component {\n    componentDidMount() {\n        this.props.setBreadcrumb([\n            {name: '用例管理'},\n            {name: '编辑用例'},\n        ]);\n        this.props.ApiManagerStore.getApiDetailData()\n        if(getUrlParam('caseId',window.location.search) != \"\"){\n            this.props.TestCaseManagerStore.getDetailData()\n        }\n        // this.setState({\n        //     json_str:this.props.TestCaseManagerStore.caseDetailData.paramScript\n        // })\n\n    }\n    constructor(props) {\n        super(props);\n        this.state = {\n            json_str:\"\",\n            dubboGroup:''\n        }\n    }\n    /**\n     * 获取子组件SingleTag中用户输入的tag标签\n     */\n    getTags = (tags) => {\n        debugger\n        this.props.ApiManagerStore.insertTags(tags)\n    };\n    /**\n     * 输入框和单选按钮产生的change事件\n     * @param n\n     * @param e\n     */\n    inputChange(n,e) {\n        let obj={};\n        obj[n]=e.target.value;\n        this.props.TestCaseManagerStore.changeDetailData(n,e.target.value);\n    }\n    optionChange(n,v,Option) {\n        this.props.TestCaseManagerStore.changeDetailData(n,v.toString() || '');\n    }\n\n    /**\n     * 保存用例\n     */\n    insert = (e) => {\n\n        e.preventDefault();\n        this.props.form.validateFieldsAndScroll((err, values) => {\n            if (!err) {\n                this.props.TestCaseManagerStore.insert(this.props.ApiManagerStore.tags,this.props.ApiManagerStore.detailData,true)\n            }\n        });\n    }\n    /**\n     * 只测试不保存\n     */\n    testCaseExe = () => {\n        debugger\n        let caseId = getUrlParam('caseId',window.location.search);\n\n        if(caseId == \"\"){\n            message.warn(\"请先保存用例再执行！\")\n            return\n        }\n        this.props.form.validateFieldsAndScroll((err, values) => {\n            if (!err) {\n                this.props.TestCaseManagerStore.insert(this.props.ApiManagerStore.tags,this.props.ApiManagerStore.detailData,false)\n            }\n        });\n        let params =  {\"id\":null,\"caseIds\":[caseId],\"scheduleType\":1,\"env\":this.state.dubboGroup}\n        this.props.TestCaseManagerStore.exeCase(params,'case');\n    }\n\n    /**\n     * json tree 添加、修改、删除\n     * @param add\n     */\n    handleAdd = (add) => {\n        this.props.TestCaseManagerStore.changeDetailData(\"paramScript\",JSON.stringify(add.updated_src));\n    }\n    handleEdit = (add) => {\n        debugger\n        this.props.TestCaseManagerStore.changeDetailData(\"paramScript\",JSON.stringify(add.updated_src));\n    }\n    handleDelete = (add) => {\n        this.props.TestCaseManagerStore.changeDetailData(\"paramScript\",JSON.stringify(add.updated_src));\n    }\n    render(){\n        const { getFieldDecorator} = this.props.form;\n        const {detailData,tags} = this.props.ApiManagerStore\n        const {insertButtonStatus,updateButtonStatus,caseDetailData} = this.props.TestCaseManagerStore\n\n        return(\n            <div className=\"container-bg\" style={{'marginLeft':'15px'}}>\n                <Form  layout=\"inline\" className=\"ant-advanced-search-form p-xs pb-0\" onSubmit={this.insert}>\n                    <Alert message=\"接口信息\" type=\"info\" style={{backgroundColor:'#c7e7ff',border:'0px','marginBottom':'10px'}}/>\n                    <Row>\n                        <FormItem {...this.formItemLayout} label=\"\">\n                            <Tag color=\"geekblue\">接口归属应用：{detailData.appName}</Tag>\n                        </FormItem>\n                        <FormItem {...this.formItemLayout} label=\"\">\n                            <Tag color=\"geekblue\">接口归属模块：{detailData.moduleName}</Tag>\n                        </FormItem>\n                    </Row>\n                    <Row>\n                        <FormItem {...this.formItemLayout} label=\"接口路径\">\n                            {getFieldDecorator('apiClassName', {\n                                initialValue: detailData.apiClassName,\n                                rules: [{ required: false, message: '请填写接口路径!' }],\n                            })(\n                                <Input disabled style={{ width: 823 }} />\n                            )}\n                        </FormItem>\n                    </Row>\n                    <Row>\n                        <FormItem {...this.formItemLayout} label=\"方法名\">\n                            {getFieldDecorator('apiMethodName', {\n                                initialValue: detailData.apiMethodName,\n                                rules: [{ required: false, message: '请填写方法名!' }],\n                            })(\n                                <Input disabled style={{ width: 375 }}/>\n                            )}\n                        </FormItem>\n                        <FormItem {...this.formItemLayout} label=\"接口名\">\n                            <Input disabled style={{ width: 389 }} value={detailData.name}/>\n                        </FormItem>\n                    </Row>\n                    <Row>\n                        <FormItem {...this.formItemLayout} label=\"接口标签\">\n                            {tags.map((tag, index) => {\n                                const isLongTag = tag.length > 20;\n                                const tagElem = (\n                                    <Tag key={tag.id} >\n                                        {isLongTag ? `${tag.value.slice(0, 20)}...` : tag.value}\n                                    </Tag>\n                                );\n                                return isLongTag ? (\n                                    <Tooltip title={tag.value} key={tag.id}>\n                                        {tagElem}\n                                    </Tooltip>\n                                ) : (\n                                    tagElem\n                                );\n                            })}\n                        </FormItem>\n                    </Row>\n                    <Alert message=\"用例信息\" type=\"info\" style={{backgroundColor:'#c7e7ff',border:'0px','marginBottom':'10px'}}/>\n                    <Row>\n                        <FormItem {...this.formItemLayout} label=\"用例名\">\n                            {getFieldDecorator('name', {\n                                initialValue: caseDetailData.name,\n                                rules: [{ required: true, message: '请填写用例名!' }],\n                            })(\n                                <Input style={{ width: 365 }} pllaceholder=\"请填写用例名\" onChange={this.inputChange.bind(this,'name')}/>\n                            )}\n                        </FormItem>\n                        <FormItem {...this.formItemLayout} label=\"优先级\">\n                            <span>\n                                 {getFieldDecorator('priority', {\n                                     initialValue: caseDetailData.priority,\n                                     rules: [{ required: true, message: '请选择优先级!' }],\n                                 })(\n                                     <Select style={{ width: 120 }} onChange={this.optionChange.bind(this,'priority')}>\n                                         <Option value=\"1\">1</Option>\n                                         <Option value=\"2\">2</Option>\n                                         <Option value=\"3\">3</Option>\n                                         <Option value=\"4\">4</Option>\n                                     </Select>\n                                 )}\n                                &nbsp;&nbsp;&nbsp;\n                                <Tag color=\"magenta\"> 1为最高，4为最低 </Tag>\n                            </span>\n                        </FormItem>\n                    </Row>\n                    <Row>\n                        <FormItem {...this.formItemLayout} label=\"描述\">\n                            {getFieldDecorator('desc', {\n                                initialValue: caseDetailData.desc,\n                                rules: [{ required: false, message: '请填写用例描述!' }],\n                            })(\n                                <TextArea rows={3} style={{ width: 852 }} onChange={this.inputChange.bind(this,'desc')}/>\n                            )}\n                        </FormItem>\n                    </Row>\n                    <Alert message=\"请求入参\" type=\"info\" style={{backgroundColor:'#c7e7ff',border:'0px','marginBottom':'10px'}}/>\n                    <Row>\n                        <div style={{float:'left',width:'50%'}}>\n                            <ReactJson src={eval(detailData.argsJsonFormat)} onAdd={this.handleAdd} onEdit={this.handleEdit} onDelete={this.handleDelete}   theme=\"google\" style={{border:'1px solid #ccc','maxHeight':'325px','overflow-y':'auto' }}/>\n                        </div>\n                        <div style={{float:'right',width:'49%'}}>\n\n                            <TextArea value={caseDetailData.paramScript}  rows={15} style={{'width':'1300px'}} onChange={this.inputChange.bind(this,'paramScript')}/>\n\n                        </div>\n                    </Row>\n                    <Alert message=\"其他参数（dubbo rpc parameter）\" type=\"info\" style={{backgroundColor:'#c7e7ff',border:'0px','marginBottom':'10px'}}/>\n                    <Row>\n                        <FormItem {...this.formItemLayout} label=\"\">\n                            {getFieldDecorator('contextParamScript', {\n                                initialValue: caseDetailData.contextParamScript,\n                                rules: [{ required: false, message: '请填写其他参数!' }],\n                            })(\n                                <TextArea rows={3} style={{ width: 1210 }} onChange={this.inputChange.bind(this,'contextParamScript')}/>\n                            )}\n                        </FormItem>\n                    </Row>\n                    <Alert message=\"结果校验规则（如：assert self.result.data != null:'结果data不能为空'）\" type=\"info\" style={{backgroundColor:'#c7e7ff',border:'0px','marginBottom':'10px'}}/>\n                    <Row>\n                        <FormItem {...this.formItemLayout} label=\"\">\n                            {getFieldDecorator('validScript', {\n                                initialValue: caseDetailData.validScript,\n                                rules: [{ required: true, message: '请填写用例校验规则!' }],\n                            })(\n                                <TextArea rows={4} style={{ width: 1210 }} placeholder=\"如：assert self.result.data != null:'结果data不能为空'\" onChange={this.inputChange.bind(this,'validScript')}/>\n                            )}\n                        </FormItem>\n                    </Row>\n                    <Row>\n                        <FormItem {...this.formItemLayout} label=\"\" style={{display:insertButtonStatus}}>\n                            <Button type=\"primary\" htmlType=\"submit\" style={{marginBottom:'8px'}}>添加用例</Button>\n                        </FormItem>\n                        <FormItem {...this.formItemLayout} label=\"\" style={{display:updateButtonStatus}}>\n                            <Button type=\"primary\" htmlType=\"submit\" style={{marginBottom:'8px'}}>修改用例</Button>\n                        </FormItem>\n                        <FormItem {...this.formItemLayout} label=\"\" style={{display:updateButtonStatus}}>\n                            <Button type=\"primary\" htmlType=\"submit\" style={{marginBottom:'8px'}} onClick={()=>{window.open(\"/edit_testcase?type=copy&apiId=\" + getUrlParam('apiId',window.location.search) + \"&caseId=\" + getUrlParam('caseId',window.location.search))}}>复制用例</Button>\n                        </FormItem>\n                        <FormItem {...this.formItemLayout} label=\"\" style={{display:updateButtonStatus}}>\n                            <Button type=\"primary\" style={{marginBottom:'8px'}} onClick={this.testCaseExe}>保存并执行</Button>\n                        </FormItem>\n                        <FormItem {...this.formItemLayout} label=\"\" style={{display:updateButtonStatus}}>\n                            <Input style={{ width: 280 }} placeholder=\"请输入测试用的dubbo分组\" allowClear={true}  onChange={e => this.setState({ dubboGroup: e.target.value })}/>\n                        </FormItem>\n                    </Row>\n                </Form>\n            </div>\n        )\n    }\n}\n\nexport default Form.create()(InsertIndex)"],"sourceRoot":""}