{"version":3,"sources":["container/TreeManager/InsertTreeModal.js","container/TreeManager/TreeManager.js","container/TagManager/SingleTag.js","container/ApiManager/Update/TreeModal.js","container/ApiManager/Update/index.js"],"names":["FormItem","Item","InsertTreeModal","inject","observer","props","state","this","form","validateFieldsAndScroll","err","values","TreeManagerStore","insertTreeModule","hideTreeModal","n","e","target","value","changeTableRequestData","getFieldDecorator","treeModalVisible","tableRequestData","modalName","destroyOnClose","title","width","visible","onOk","okModal","bind","onCancel","hideModal","okText","cancelText","className","layout","formItemLayout","label","initialValue","name","rules","required","message","style","placeholder","onChange","inputChange","Component","create","TreeNode","TreeManager","onNodeSelect","selectedKeys","info","console","log","node","appId","moduleId","appName","moduleName","level","pageType","TestCaseManagerStore","initData","ApiManagerStore","setTreeParams","onExpand","expandedKeys","setState","handleAddTree","parentId","item","stopPropagation","id","showTreeModal","type","handleEditTree","handleDeleteTree","deleteTree","getNodeTitle","onClick","theme","onConfirm","renderTree","data","map","modules","length","key","getTreeData","treeAppDataSource","maxHeight","onSelect","SingleTag","handleClose","removedTag","tags","filter","tag","showInput","inputVisible","input","focus","handleInputChange","inputValue","handleInputConfirm","a","indexOf","TagManagerStore","postInsertTag","result","getTags","saveInputRef","index","isLongTag","tagElem","closable","onClose","slice","ref","size","onBlur","onPressEnter","background","borderStyle","TreeModal","setDetailDataTreeParams","TextArea","DetailIndex","insertTags","handleSubmit","preventDefault","updateApi","setBreadcrumb","getApiDetailData","obj","changeDetailData","detailData","onSubmit","backgroundColor","border","groupId","disabled","artifactId","color","href","apiClassName","apiMethodName","creatorName","desc","rows","htmlType"],"mappings":"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","file":"static/js/11.956c39d2.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport { observer, inject } from 'mobx-react';\nimport {Row, Form, Input, Modal} from 'antd';\nconst FormItem = Form.Item;\n\n\n@inject('TreeManagerStore')\n@observer\nclass InsertTreeModal extends Component{\n    constructor(props){\n        super(props);\n        this.state={\n        }\n    }\n\n    okModal(){\n        this.props.form.validateFieldsAndScroll((err, values) => {\n            if (!err) {\n                this.props.TreeManagerStore.insertTreeModule();\n            }\n        });\n    }\n\n    hideModal(){\n        this.props.TreeManagerStore.hideTreeModal();\n    }\n    /**\n     * 输入框和单选按钮产生的change事件\n     * @param n\n     * @param e\n     */\n    inputChange(n,e) {\n        let obj={};\n        obj[n]=e.target.value;\n        this.props.TreeManagerStore.changeTableRequestData(n,e.target.value);\n    }\n\n    render(){\n        const { getFieldDecorator } = this.props.form;\n        const { treeModalVisible,tableRequestData,modalName} = this.props\n        return (\n            <Modal\n                destroyOnClose\n                title={modalName}\n                width=\"900px\"\n                visible={treeModalVisible}\n                onOk={this.okModal.bind(this)}\n                onCancel={this.hideModal.bind(this)}\n                okText=\"保存\"\n                cancelText=\"取消\"\n                className=\"model\" width={500} >\n\n                <Form  layout=\"inline\" className=\"ant-advanced-search-form p-xs pb-0\">\n                    <Row>\n                        <FormItem {...this.formItemLayout} label=\"模块名称\" >\n                            {getFieldDecorator('name', {\n                                initialValue: tableRequestData.name,\n                                rules: [{ required: true, message: '请填写模块名称!' }],\n                            })(\n                                <Input  style={{ width: 250 }} placeholder='请填写模块名称!' onChange={this.inputChange.bind(this,'name')}/>\n                            )}\n                        </FormItem>\n                    </Row>\n                </Form>\n            </Modal>\n        )\n    }\n}\n\nexport default Form.create()(InsertTreeModal)\n","import React, {Component} from 'react';\nimport { observable, action, computed } from 'mobx';\nimport { observer, inject } from 'mobx-react';\nimport {  Icon,Tree, Popconfirm} from 'antd';\nimport InsertTreeModal from './InsertTreeModal';\nimport TreeManagerStore from \"../../stores/TreeManager/TreeManagerStore\";\n\nconst { TreeNode } = Tree;\n\n@inject('TreeManagerStore','TestCaseManagerStore','ApiManagerStore')\n@observer\nclass TreeManager extends Component {\n    componentDidMount() {\n        this.props.TreeManagerStore.getTreeData();\n    }\n    constructor(props){\n        super(props);\n        this.state={\n            expandedKeys: []\n        }\n    }\n    onNodeSelect = (selectedKeys, info) => {\n        console.log(selectedKeys,info.node.props)\n        let level = info.node.props.level\n        let appId = \"\";\n        let moduleId = \"\"\n        let appName = \"\"\n        let moduleName = \"\"\n        if(level == 1){\n            appId = selectedKeys[0]\n            appName = info.node.props.title\n        }else{\n            appId = info.node.props.appId\n            moduleId = info.node.props.moduleId\n            appName = info.node.props.appName\n            moduleName = info.node.props.moduleName\n        }\n        console.log(\"appid\",appId,\"moduleId\",moduleId,\"appName\",appName,\"moduleName\",moduleName)\n        // let appId = info.node.props.dataRef.appId\n        // let moduleId = info.node.props.dataRef.moduleId\n        // let appName = info.node.props.dataRef.appName\n        // let moduleName = info.node.props.dataRef.moduleName\n        let pageType = this.props.pageType\n        if(pageType == 'case'){\n            this.props.TestCaseManagerStore.initData(1,appId,moduleId)\n        }\n        else if(pageType == \"api\"){\n            this.props.ApiManagerStore.initData(1,appId,moduleId)\n        }else if(pageType == \"insertApi\"){\n            this.props.ApiManagerStore.setTreeParams(appId,moduleId,appName,moduleName)\n        }else if(pageType == \"updateApi\"){\n            this.props.ApiManagerStore.setTreeParams(appId,moduleId,appName,moduleName)\n        }\n    };\n    /**\n     * 点击某个节点展开\n     */\n    onExpand = expandedKeys => {\n        this.setState({\n            expandedKeys\n        });\n    };\n\n    /**\n     * 新增节点\n     */\n    handleAddTree = (e,parentId,item) => {\n        e.stopPropagation();\n        if (item.id) {\n            console.log(e.target.value)\n            this.props.TreeManagerStore.showTreeModal({\n                moduleName:\"添加模块\",\n                type:\"insert\",\n                item:item,\n                parentId:parentId\n            })\n        }\n    };\n    /**\n     * 编辑节点\n     */\n    handleEditTree = (e,parentId,item) => {\n        e.stopPropagation();\n        if (item.id) {\n            this.props.TreeManagerStore.showTreeModal({\n                moduleName:\"修改模块\",\n                type:\"update\",\n                item:item,\n                parentId:parentId\n            });\n        }\n    };\n    /**\n     * 编辑节点\n     */\n    handleDeleteTree = (item) => {\n        if (item.id) {\n            this.props.TreeManagerStore.deleteTree(item)\n        }\n    };\n    /**\n     * 获取节点的title内容\n     */\n    getNodeTitle = (title, id, level,parentId,item) => {\n        return (\n            <div className=\"tree-title\">\n                <span>\n                    {title}\n                </span>\n                <div className=\"tree-parent-div \">\n                    <span className=\"tree-span\" onClick={e => this.handleAddTree(e,parentId,item)}>\n                       {level !== 5 &&\n                            <Icon type=\"plus-circle\" theme=\"outlined\"/>\n                       }\n                    </span>\n                    <span className=\"tree-span\"  onClick={e => this.handleEditTree(e,parentId,item)}>\n                       {level != 1 &&\n                            <Icon type=\"form\" theme=\"outlined\" />\n                       }\n                    </span>\n                    <span className=\"tree-span\" >\n                         {level != 1 &&\n                              <Popconfirm title=\"确定删除此参数吗？\" onConfirm={() => this.handleDeleteTree(item)}>\n                                 <Icon type=\"delete\" theme=\"outlined\"/>\n                              </Popconfirm>\n                         }\n                    </span>\n                </div>\n            </div>\n        );\n    };\n    /**\n     * 递归生成树节点\n     */\n    renderTree = (data, level, parentId) => {\n        return (\n            data &&\n            data.map(item => {\n                const title = this.getNodeTitle(item.name, item.id, level,parentId, item);\n                if (item.modules && item.modules.length > 0) {\n                    return (\n                        <TreeNode title={title} key={item.id} level={level} appId={item.appId} moduleId={item.id} appName={item.appName} moduleName={item.name} >\n                            {this.renderTree(item.modules, level + 1, item.id, item.id)}\n                        </TreeNode>\n                    );\n                }\n                return <TreeNode title={title} key={item.id} level={level} appId={item.appId} appName={item.appName} moduleId={item.id} moduleName={item.name} />;\n            })\n        );\n    };\n\n    render(){\n        const {treeAppDataSource,treeModalVisible,tableRequestData,modalName} = this.props.TreeManagerStore\n        return(\n            <div style={{'maxHeight':this.props.maxHeight,'overflow-y':'auto' }}>\n                <Tree expandedKeys={this.state.expandedKeys} onSelect={this.onNodeSelect} onExpand={this.onExpand}>{this.renderTree(treeAppDataSource,1,0)}</Tree>\n                <InsertTreeModal modalName={modalName} treeModalVisible={treeModalVisible} tableRequestData={tableRequestData}></InsertTreeModal>\n            </div>\n        )\n    }\n}\n\nexport default TreeManager;","import React, { Component } from 'react';\nimport { observer, inject } from 'mobx-react';\nimport { Tag,Icon, Input,Tooltip } from 'antd';\n\n@inject('TagManagerStore')\n@observer\nclass SingleTag extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            tags:[],\n            inputVisible: false,\n            inputValue: '',\n        }\n    }\n\n    handleClose = removedTag => {\n        debugger\n        const tags = this.props.tags.filter(tag => tag.id !== removedTag);\n        console.log(tags);\n        this.setState({ tags });\n    };\n\n    showInput = () => {\n        this.setState({ inputVisible: true }, () => this.input.focus());\n    };\n\n    handleInputChange = e => {\n        this.setState({ inputValue: e.target.value });\n    };\n\n    handleInputConfirm = async () => {\n        const { inputValue } = this.state;\n        let { tags } = this.state\n        if (inputValue && tags.indexOf(inputValue) === -1) {\n            tags = [...tags, inputValue];\n        }\n        const result = await this.props.TagManagerStore.postInsertTag(tags[0])\n        let tag = {'id':result.data,'value':tags[0]}\n        this.props.getTags(tag)\n        this.setState({\n            inputVisible: false,\n            inputValue: '',\n        });\n    };\n\n    saveInputRef = input => (this.input = input);\n\n    render(){\n        const { inputVisible, inputValue} = this.state;\n        return(\n            <div>\n                {this.props.tags.map((tag, index) => {\n                    const isLongTag = tag.length > 20;\n                    const tagElem = (\n                        <Tag key={tag.id} closable onClose={() => this.handleClose(tag.id)}>\n                            {isLongTag ? `${tag.value.slice(0, 20)}...` : tag.value}\n                        </Tag>\n                    );\n                    return isLongTag ? (\n                        <Tooltip title={tag.value} key={tag.id}>\n                            {tagElem}\n                        </Tooltip>\n                    ) : (\n                        tagElem\n                    );\n                })}\n                {inputVisible && (\n                    <Input\n                        ref={this.saveInputRef}\n                        type=\"text\"\n                        size=\"small\"\n                        style={{ width: 78 }}\n                        value={inputValue}\n                        onChange={this.handleInputChange}\n                        onBlur={this.handleInputConfirm}\n                        onPressEnter={this.handleInputConfirm}\n                    />\n                )}\n                {!inputVisible && (\n                    <Tag onClick={this.showInput} style={{ background: '#fff', borderStyle: 'dashed' }}>\n                        <Icon type=\"plus\" /> New Tag\n                    </Tag>\n                )}\n            </div>\n        )\n    }\n}\n\nexport default SingleTag","import React, { Component } from 'react';\nimport { observer, inject } from 'mobx-react';\nimport { Table,Tag, Button,Alert, Radio, Select, Row, Col, Form, DatePicker, Input, Modal,Icon,Upload } from 'antd';\nimport TreeManager from '../../TreeManager/TreeManager';\nimport common from \"../../../style/common.css\";\n\n\n\n@inject('ApiManagerStore')\n@observer\nclass TreeModal extends Component{\n    constructor(props){\n        super(props);\n        this.state={\n        }\n    }\n\n    okModal(){\n        this.props.ApiManagerStore.setDetailDataTreeParams();\n    }\n\n    hideTreeModal(){\n        this.props.ApiManagerStore.hideTreeModal();\n    }\n\n    render(){\n        const { treeModalVisible} = this.props\n        return (\n            <Modal\n                destroyOnClose\n                title=\"添加\"\n                width=\"900px\"\n                visible={treeModalVisible}\n                onOk={this.okModal.bind(this)}\n                onCancel={this.hideTreeModal.bind(this)}\n                okText=\"保存\"\n                cancelText=\"取消\"\n                className=\"model\" width={500} >\n                <span>重新选择应用和模块（点击对应的应用和模块即为选中）</span>\n                <TreeManager pageType=\"updateApi\" maxHeight=\"420px\"/>\n            </Modal>\n        )\n    }\n}\n\nexport default Form.create()(TreeModal)\n","import React, { Component } from 'react';\nimport { observable, action, computed,toJS } from 'mobx';\nimport { observer, inject } from 'mobx-react';\nimport TreeModal from './TreeModal'\nimport { Tag, Button,Alert, Row, Form, Input,Icon } from 'antd';\nimport SingleTag from \"../../TagManager/SingleTag\";\nconst FormItem = Form.Item;\nconst { TextArea } = Input;\n\n\n@inject('ApiManagerStore','TagManagerStore')\n@observer\nclass DetailIndex extends Component{\n    componentDidMount() {\n        this.props.setBreadcrumb([\n            {name: '接口管理'},\n            {name: '修改接口'},\n        ]);\n        this.props.ApiManagerStore.getApiDetailData()\n    }\n    constructor(props){\n        super(props);\n        this.state={\n\n        }\n    }\n\n    /**\n     * 获取子组件SingleTag中用户输入的tag标签\n     */\n    getTags = (tags) => {\n        debugger\n        this.props.ApiManagerStore.insertTags(tags)\n    };\n    /**\n     * 输入框和单选按钮产生的change事件\n     * @param n\n     * @param e\n     */\n    inputChange(n,e) {\n        let obj={};\n        obj[n]=e.target.value;\n        this.setState(obj);\n        this.props.ApiManagerStore.changeDetailData(n,e.target.value);\n    }\n    handleSubmit = (e) => {\n\n        e.preventDefault();\n        this.props.form.validateFieldsAndScroll((err, values) => {\n            if (!err) {\n                this.props.ApiManagerStore.updateApi(1);\n            }\n        });\n    }\n\n    showTreeModal(){\n        this.props.ApiManagerStore.showTreeModal()\n    }\n    render(){\n        const { getFieldDecorator } = this.props.form;\n        const { detailData,tags,treeModalVisible} = this.props.ApiManagerStore\n\n        return (\n            <div  style={{'marginLeft':'15px'}}>\n                <Form  layout=\"inline\" className=\"ant-advanced-search-form p-xs pb-0\" onSubmit={this.handleSubmit}>\n                    <Alert message=\"api包信息\" type=\"info\" style={{backgroundColor:'#c7e7ff',border:'0px','marginBottom':'10px'}}/>\n                    <Row>\n                        <FormItem {...this.formItemLayout} label=\"groupId\">\n                            {getFieldDecorator('groupId', {\n                                initialValue: detailData.groupId,\n                                rules: [{ required: true, message: '请填写groupId!' }],\n                            })(\n                                <Input disabled style={{ width: 190 }} value={detailData.groupId}/>\n                            )}\n                        </FormItem>\n                        <FormItem {...this.formItemLayout} label=\"artifactId\">\n                            {getFieldDecorator('artifactId', {\n                                initialValue: detailData.artifactId,\n                                rules: [{ required: true, message: '请填写artifactId!' }],\n                            })(\n                                <Input disabled style={{ width: 190 }} value={detailData.groupId}/>\n                            )}\n                        </FormItem>\n                    </Row>\n                    <Alert message=\"接口信息\" type=\"info\" style={{backgroundColor:'#c7e7ff',border:'0px','marginBottom':'10px'}}/>\n                    <Row>\n\n                        <FormItem {...this.formItemLayout} label=\"\">\n                            <Tag color=\"geekblue\">接口归属应用：{detailData.appName}</Tag>\n                        </FormItem>\n                        <FormItem {...this.formItemLayout} label=\"\">\n                            <Tag color=\"geekblue\">接口归属模块：{detailData.moduleName}</Tag>\n                        </FormItem>\n                        <FormItem {...this.formItemLayout} label=\"\">\n                            <a href=\"#\" onClick={this.showTreeModal.bind(this)}><Icon type=\"edit\"></Icon> 编辑</a>\n                            <TreeModal treeModalVisible={treeModalVisible}></TreeModal>\n                        </FormItem>\n                    </Row>\n                    <Row>\n                        <FormItem {...this.formItemLayout} label=\"接口路径\">\n                            {getFieldDecorator('apiClassName', {\n                                initialValue: detailData.apiClassName,\n                                rules: [{ required: true, message: '请填写接口路径!' }],\n                            })(\n                                <Input disabled style={{ width: 823 }} />\n                            )}\n                        </FormItem>\n                    </Row>\n                    <Row>\n                        <FormItem {...this.formItemLayout} label=\"方法名\">\n                            {getFieldDecorator('apiMethodName', {\n                                initialValue: detailData.apiMethodName,\n                                rules: [{ required: true, message: '请填写方法名!' }],\n                            })(\n                                <Input disabled style={{ width: 375 }} />\n                            )}\n                        </FormItem>\n                        <FormItem {...this.formItemLayout} label=\"接口名\">\n                            {getFieldDecorator('name', {\n                                initialValue: detailData.name,\n                                rules: [{ required: true, message: '请填写接口名!' }],\n                            })(\n                                <Input style={{ width: 378 }} onChange={this.inputChange.bind(this,'name')} />\n                            )}\n                        </FormItem>\n                    </Row>\n                    <Row>\n                        <FormItem {...this.formItemLayout} label=\"创建人\">\n                            {getFieldDecorator('creatorName', {\n                                initialValue: detailData.creatorName,\n                                rules: [{ required: true, message: '请填写创建人!' }],\n                            })(\n                                <Input disabled style={{ width: 145 }} />\n                            )}\n                        </FormItem>\n                        <FormItem {...this.formItemLayout} label=\"接口标签\">\n                            <SingleTag tags={tags} getTags={this.getTags}/>\n                        </FormItem>\n                    </Row>\n                    <Row>\n                        <FormItem {...this.formItemLayout} label=\"描述\">\n                            {getFieldDecorator('desc', {\n                                initialValue: detailData.desc,\n                                rules: [{ required: false, message: '请填写描述!' }],\n                            })(\n                                <TextArea rows={3} style={{ width: 852 }} value={detailData.desc} onChange={this.inputChange.bind(this,'desc')}/>\n                            )}\n                        </FormItem>\n                    </Row>\n                    <Row>\n                        <Form.Item>\n                            <Button type=\"primary\" htmlType=\"submit\" >\n                                修改\n                            </Button>\n                        </Form.Item>\n                    </Row>\n                </Form>\n            </div>\n        )\n    }\n}\n\nexport default Form.create()(DetailIndex)\n"],"sourceRoot":""}