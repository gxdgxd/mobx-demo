{"version":3,"sources":["container/SceneManager/config.js","container/SceneManager/SearchForm.js","container/SceneManager/index.js"],"names":["columns","context","title","dataIndex","key","width","fixed","render","row","record","dingding","alarmDingUrls","type","style","clock","cron","name","href","id","target","onConfirm","exeCase","className","insertCaseColumns","text","str","testApi","apiClassName","apiMethodName","argsTypeNames","content","updateHref","apiId","apiHref","deleteSceneCase","caseColumns","FormItem","Item","Option","SearchForm","inject","observer","props","handleCreatorSearch","value","CommonStore","getAllCreators","setState","data","handleCreatorChange","SceneManagerStore","changeTableRequestData","handleSubmit","initData","formItemLayout","labelCol","span","wrapperCol","state","undefined","n","e","this","v","allCreators","gutter","label","placeholder","allowClear","onChange","inputChange","bind","showSearch","defaultActiveFirstOption","showArrow","filterOption","onSearch","notFoundContent","map","d","userId","realName","optionChange","onClick","window","open","Component","create","SceneManagerList","onChangePage","page","notification","message","description","icon","color","TestCaseManagerStore","setBreadcrumb","dataSource","pageNo","pageSize","totalCount","mydataSource","toJS","bordered","pagination","scroll","x","y","current","total"],"mappings":"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","file":"static/js/15.75df67ef.chunk.js","sourcesContent":["import React  from 'react';\nimport { Popover,Popconfirm,Icon } from 'antd';\nimport common from \"../../style/common.css\";\n\nexport const columns = (context) => [\n    {\n        title: '场景ID',\n        dataIndex: 'id',\n        key: 'id',\n        width: 80,\n        fixed: 'left',\n    },\n    {\n        title: '场景名称',\n        dataIndex: 'name',\n        key: 'name',\n        width: 300,\n        render: (row,record) => {\n            let dingding = record.alarmDingUrls != null ? <Icon type=\"dingding\" style={{'color':'#30a4ea'}} /> : \"\"\n            let clock = record.cron != null ? <Icon type=\"clock-circle\" style={{'color':'#30a4ea'}}/> : \"\"\n            if(record.cron != null){}\n            return (\n                <span>{dingding} {clock} {row}</span>\n            )\n        }\n    },\n    {\n        title: '执行方式',\n        dataIndex: 'scheduleType',\n        key: 'scheduleType',\n        width: 120,\n        render: (row) => {\n            var name = ''\n            if(row == 0){\n                name = \"顺序执行\"\n            }else if(row == 1){\n                name = \"并行执行\"\n            }else if(row == 2){\n                name = \"自定义\"\n            }\n            return (\n                <span>{name}</span>\n            )\n        }\n    },\n    {\n        title: '环境',\n        dataIndex: 'env',\n        key: 'env',\n        width: 300,\n    },\n\n    {\n        title: '创建人',\n        dataIndex: 'creatorName',\n        key: 'creatorName',width: 200,\n    },\n    {\n        title: '更新时间',\n        dataIndex: 'editTimeStr',\n        key: 'editTimeStr',\n        width: 200,\n    },\n    {\n        title: '操作',\n        width: 200,\n        key: 'operation',\n        fixed: 'right',\n        render:(row,record) => {\n            let href = \"/update_scene?sceneId=\" + record.id\n\n            return (\n                <div>\n                    <span>\n                        <a href={href} target=\"_blank\">修改场景</a>&nbsp;\n                        <Popconfirm title=\"确定执行此场景吗？\" onConfirm={() => context.exeCase(record)} >\n                            <a href=\"#\"  className=\"vLine\"> 执行场景</a>\n                        </Popconfirm>\n                    </span>\n                </div>\n            )\n        }\n    }\n];\n\nexport const insertCaseColumns = (context) => [\n\n    {\n        title: '用例ID',\n        dataIndex: 'id',\n        key: 'id',\n        width:80,\n        fixed: 'left',\n    },\n    {\n        title: '用例名称',\n        dataIndex: 'name',\n        key: 'name',\n        width:350,\n    },\n\n    {\n        title: '应用',\n        dataIndex: 'appName',\n        key: 'appName',\n        width:100,\n    },\n    {\n        title: '接口路径',\n        dataIndex: 'apiClassName',\n        key: 'apiClassName',\n        width:350,\n        render:function(text, record){\n            let str = <div>\n                <span>接口名：{record.testApi.name}</span><br/>\n                <span>接口路径：{record.testApi.apiClassName}</span><br/>\n                <span>方法名：{record.testApi.apiMethodName}</span><br/>\n                <span>参数类型：{record.testApi.argsTypeNames}</span><br/>\n            </div>\n            return (\n                <span>\n                    <Popover content={str} >\n                       {record.testApi.apiClassName}\n                    </Popover>\n                </span>\n            )\n        }\n    },\n    {\n        title: '方法名',\n        dataIndex: 'apiMethodName',\n        key: 'apiMethodName',\n        width:170,\n        render:function(text, record){\n            return (\n                <span>\n                    {record.testApi.apiMethodName}\n                </span>\n            )\n        }\n    },\n    {\n        title: '优先级',\n        dataIndex: 'priority',\n        key: 'priority',\n        width:80\n    },\n    {\n        title: '创建人',\n        dataIndex: 'creatorName',\n        key: 'creatorName',\n        width:150,\n    },\n    {\n        title: '操作',\n        width: 230,\n        key: 'operation',\n        fixed: 'right',\n        render:(row,record) => {\n            let updateHref = '/edit_testcase?apiId=' + record.apiId + \"&caseId=\" + record.id\n            let apiHref = '/api_manager?apiId=' + record.apiId\n            return (\n                <span>\n                    <Popconfirm title=\"确定从此场景中移除此用例吗？\" onConfirm={() => context.deleteSceneCase(record.key)} >\n                      <a href=\"#\">移除用例</a>&nbsp;\n                    </Popconfirm>\n                    <a href={updateHref} target=\"_blank\"  className=\"vLine\"> 修改用例</a>&nbsp;\n                    <a href={apiHref} target=\"_blank\"  className=\"vLine\"> 查看接口</a>\n                </span>\n            )\n        }\n    }\n];\n\n\nexport const caseColumns = (context) => [\n    {\n        title: '用例ID',\n        dataIndex: 'id',\n        key: 'id',\n        width:80,\n    },\n    {\n        title: '用例名称',\n        dataIndex: 'name',\n        key: 'name',\n        width:350,\n    },\n\n    {\n        title: '应用',\n        dataIndex: 'appName',\n        key: 'appName',\n        width:100,\n    },\n    {\n        title: '接口路径',\n        dataIndex: 'apiClassName',\n        key: 'apiClassName',\n        width:300,\n        render:function(text, record){\n            let str = <div>\n                <span>接口名：{record.testApi.name}</span><br/>\n                <span>接口路径：{record.testApi.apiClassName}</span><br/>\n                <span>方法名：{record.testApi.apiMethodName}</span><br/>\n                <span>参数类型：{record.testApi.argsTypeNames}</span><br/>\n            </div>\n            return (\n                <span>\n                    <Popover content={str} >\n                       {record.testApi.apiClassName}\n                    </Popover>\n                </span>\n            )\n        }\n    },\n    {\n        title: '方法名',\n        dataIndex: 'apiMethodName',\n        key: 'apiMethodName',\n        width:170,\n        render:function(text, record){\n            return (\n                <span>\n                    {record.testApi.apiMethodName}\n                </span>\n            )\n        }\n    },\n    {\n        title: '优先级',\n        dataIndex: 'priority',\n        key: 'priority',\n        width:80\n    },\n    {\n        title: '创建人',\n        dataIndex: 'creatorName',\n        key: 'creatorName',\n        width:150,\n    },\n    {\n        title: '更新时间',\n        dataIndex: 'editTimeStr',\n        key: 'editTimeStr',\n        width:200,\n    },\n];\n\n\n\n","import React, { Component } from 'react';\nimport { observer, inject } from 'mobx-react';\nimport { Table, Button, Radio, Select,Icon, Row, Col, Form, DatePicker, Input, Modal } from 'antd';\n\nconst FormItem = Form.Item;\nconst Option = Select.Option;\n\n\n@inject('SceneManagerStore','CommonStore')\n@observer\nclass SearchForm extends Component{\n    constructor(props){\n        super(props);\n        this.state={\n            data: [],\n            value: undefined,\n        }\n    }\n\n    componentDidMount() {\n    }\n\n    inputChange(n,e) {\n        this.props.SceneManagerStore.changeTableRequestData(n,e.target.value);\n    }\n    optionChange(n,v) {\n        this.props.SceneManagerStore.changeTableRequestData(n,v || '');\n    }\n    handleCreatorSearch = value => {\n        if (value) {\n            this.props.CommonStore.getAllCreators(value)\n        } else {\n            this.setState({ data: [] });\n        }\n    };\n\n    handleCreatorChange = value => {\n        this.setState({ value });\n        this.props.SceneManagerStore.changeTableRequestData('creatorId',value);\n    };\n    handleSubmit = () => {\n        this.props.SceneManagerStore.initData(1);\n    }\n    formItemLayout = {\n        labelCol: { span: 5 },\n        wrapperCol: { span: 19 },\n    }\n    render(){\n        const {allCreators} = this.props.CommonStore\n\n        return (\n            <Form  className=\"ant-advanced-search-form p-xs pb-0\" >\n                <Row gutter={48}>\n                    <Col span={7}>\n                        <FormItem {...this.formItemLayout} label=\"场景ID\">\n                            <Input placeholder=\"请输入场景ID\" allowClear={true} onChange={this.inputChange.bind(this,'id')}/>\n                        </FormItem>\n                    </Col>\n                    <Col span={7}>\n                        <FormItem {...this.formItemLayout} label=\"场景名称\">\n                            <Input placeholder=\"请输入场景名称\" allowClear={true} onChange={this.inputChange.bind(this,'name')}/>\n                        </FormItem>\n                    </Col>\n                    <Col span={7}>\n                        <FormItem {...this.formItemLayout} label=\"创建人\">\n                            <Select\n                                showSearch\n                                value={this.state.value}\n                                placeholder=\"请输入真名搜索(非花名)\"\n                                style={this.props.style}\n                                defaultActiveFirstOption={false}\n                                showArrow={false}  allowClear={true}\n                                filterOption={false}\n                                onSearch={this.handleCreatorSearch}\n                                onChange={this.handleCreatorChange}\n                                notFoundContent={null}\n                            >\n                                {allCreators.map(d => <Option key={d.userId}>{d.realName}</Option>)}\n                            </Select>\n                        </FormItem>\n                    </Col>\n                </Row>\n                <Row gutter={48}>\n                    <Col span={7}>\n                        <FormItem {...this.formItemLayout} label=\"执行方式\">\n                            <Select   placeholder=\"请选择执行方式\"  allowClear={true} onChange={this.optionChange.bind(this,'scheduleType')}>\n                                <Option value=\"0\">顺序执行</Option>\n                                <Option value=\"1\">并行执行</Option>\n                            </Select>\n                        </FormItem>\n                    </Col>\n                    <Col span={7}>\n                        <FormItem {...this.formItemLayout} label=\"执行计划\">\n                            <Input placeholder=\"cron表达式，如：1-2 * * * * ?\" allowClear={true} onChange={this.inputChange.bind(this,'cron')}/>\n                        </FormItem>\n                    </Col>\n                    <Col span={3}>\n                        <Form.Item>\n                            <Button type=\"primary\"  onClick={this.handleSubmit}>\n                                <Icon type=\"search\" /> 搜索\n                            </Button>\n                        </Form.Item>\n                    </Col>\n                    <Col span={3} >\n                        <Form.Item>\n                            <Button type=\"primary\"  onClick={()=>{window.open(\"/insert_scene\")}}><Icon type=\"plus\" /> 添加场景</Button>\n                        </Form.Item>\n                    </Col>\n                </Row>\n\n            </Form>\n        )\n    }\n}\n\nexport default Form.create()(SearchForm)\n\n","import React, {Component} from 'react';\nimport { observable, action, computed } from 'mobx';\nimport { observer, inject } from 'mobx-react';\nimport { Table,Row, Pagination,notification,Icon} from 'antd';\nimport {columns} from './config';\nimport SearchForm from './SearchForm';\n\n@inject('SceneManagerStore','CommonStore','TestCaseManagerStore')\n@observer\nclass SceneManagerList extends Component {\n    componentDidMount() {\n        this.props.setBreadcrumb([\n            {name: '场景管理'},\n        ]);\n        this.props.SceneManagerStore.initData(1);\n    }\n    constructor(props){\n        super(props);\n        this.state= {\n        }\n    }\n    onChangePage = page => {\n        this.props.SceneManagerStore.initData(page);\n    };\n    exeCase =(record) => {\n        notification.open({\n            message: '执行提醒',\n            description:\n                '场景已经开始执行，请前往执行记录中查看用例执行情况；',\n            icon: <Icon type=\"smile\" style={{ color: '#108ee9' }} />,\n        });\n        this.props.TestCaseManagerStore.exeCase(record,'scene')\n    }\n    render(){\n        const {dataSource,pageNo,pageSize,totalCount} = this.props.SceneManagerStore\n        const mydataSource = dataSource.toJS()\n        return(\n            <div className=\"container-bg\">\n                <Row>\n                    <SearchForm/>\n                    <Table\n                        bordered\n                        columns={columns(this)} pagination={false}\n                        dataSource={mydataSource}   scroll={{ x: 1380, y: 600 }}/>\n                    <Pagination onChange={this.onChangePage} pageSize={pageSize} current={pageNo}  total={totalCount} style={{'marginTop':'6px','float':'right'}}/>\n                </Row>\n            </div>\n        )\n    }\n}\n\nexport default SceneManagerList;"],"sourceRoot":""}