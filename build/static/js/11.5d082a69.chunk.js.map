{"version":3,"sources":["container/TestCaseManager/SearchForm.js","container/TreeManager/InsertTreeModal.js","container/TreeManager/TreeManager.js","container/TestCaseManager/index.js","container/TestCaseManager/config.js"],"names":["FormItem","Item","Option","SearchForm","inject","observer","props","handleSearch","e","preventDefault","TestCaseManagerStore","initData","formItemLayout","labelCol","span","wrapperCol","state","n","this","changeTableRequestData","target","value","v","className","onSubmit","gutter","label","placeholder","onChange","inputChange","bind","name","allowClear","optionChange","allTags","map","item","key","id","allCreators","style","type","htmlType","Component","create","InsertTreeModal","form","validateFieldsAndScroll","err","values","TreeManagerStore","insertTreeModule","hideTreeModal","getFieldDecorator","treeModalVisible","tableRequestData","modalName","destroyOnClose","title","width","visible","onOk","okModal","onCancel","hideModal","okText","cancelText","layout","initialValue","rules","required","message","TreeNode","TreeManager","onSelect","selectedKeys","info","console","log","appId","node","dataRef","moduleId","appName","moduleName","pageType","ApiManagerStore","setTreeParams","handleAddTree","parentId","stopPropagation","showTreeModal","handleEditTree","parentIdF","handleDeleteTree","deleteTree","getNodeTitle","level","onClick","theme","onConfirm","onLoadData","treeNode","a","children","getTreeModuleDataSouce","renderTreeNodes","data","getTreeAppDataSouce","treeAppDataSource","maxHeight","loadData","TestCaseManagerList","batchExeCase","selectedRowKeys","length","warn","selectedRows","onChangePage","page","setBreadcrumb","CommonStore","getAllTags","getAllCreators","dataSource","pageNo","pageSize","totalCount","mydataSource","toJS","rowSelection","setState","bordered","columns","dataIndex","render","text","record","substr","str","editTimeStr","creatorName","validScript","paramScript","contextParamScript","desc","apiId","testApi","apiClassName","apiMethodName","content","color","row","insertHref","apiHref","updateHref","href","pagination","current","total"],"mappings":"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","file":"static/js/11.5d082a69.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport { observer, inject } from 'mobx-react';\nimport {  Button, Select,Icon, Row, Col, Form, Input } from 'antd';\n\nconst FormItem = Form.Item;\nconst Option = Select.Option;\n\n@inject('TestCaseManagerStore')\n@observer\nclass SearchForm extends Component{\n    constructor(props){\n        super(props);\n        this.state={\n        }\n    }\n\n\n    inputChange(n,e) {\n        this.props.TestCaseManagerStore.changeTableRequestData(n,e.target.value);\n    }\n    optionChange(n,v) {\n        this.props.TestCaseManagerStore.changeTableRequestData(n,v || '');\n    }\n    handleSearch = (e) => {\n        e.preventDefault();\n        this.props.TestCaseManagerStore.initData(1);\n    }\n\n    formItemLayout = {\n        labelCol: { span: 5 },\n        wrapperCol: { span: 19 },\n    }\n\n    render(){\n\n        return (\n            <Form className=\"ant-advanced-search-form p-xs pb-0\"  onSubmit={this.handleSearch}>\n                <Row gutter={48}>\n                    <Col span={7}>\n                        <FormItem {...this.formItemLayout} label=\"接口ID\">\n                            <Input placeholder=\"请输入接口ID\" onChange={this.inputChange.bind(this,'apiId')}/>\n                        </FormItem>\n                    </Col>\n                    <Col span={7}>\n                        <FormItem {...this.formItemLayout} label=\"用例名\">\n                            <Input placeholder=\"请输入用例名\" onChange={this.inputChange.bind(this,'name')}/>\n                        </FormItem>\n                    </Col>\n                    <Col span={7}>\n                        <FormItem {...this.formItemLayout} label=\"标签\">\n                            <Select name=\"tagId\" allowClear={true} placeholder=\"请选择标签搜索\"\n                                    onChange={this.optionChange.bind(this,'tagId')}>\n                                {this.props.allTags.map(item => <Option key={item.id} value={item.id}>{item.value}</Option>)}\n                            </Select>\n                        </FormItem>\n                    </Col>\n                </Row>\n                <Row gutter={48}>\n                    <Col span={7}>\n                        <FormItem {...this.formItemLayout} label=\"创建人\">\n                            <Select name=\"creatorId\" allowClear={true}  placeholder=\"请选择创建人搜索\"\n                                    onChange={this.optionChange.bind(this,'creatorId')}>\n                                {this.props.allCreators.map(item => <Option key={item.id} value={item.value}>{item.value}</Option>)}\n                            </Select>\n                        </FormItem>\n                    </Col>\n                    <Col span={7}>\n                        <FormItem {...this.formItemLayout} label=\"优先级\">\n                            <Select  placeholder=\"请选择优先级搜索\" onChange={this.optionChange.bind(this,'priority')}>\n                                <Option value=\"1\">1</Option>\n                                <Option value=\"2\">2</Option>\n                                <Option value=\"3\">3</Option>\n                                <Option value=\"4\">4</Option>\n                            </Select>\n                        </FormItem>\n                    </Col>\n                    <Col span={3} style={{'marginTop':'3px'}}>\n                        <Form.Item>\n                            <Button type=\"primary\" htmlType=\"submit\" >\n                                <Icon type=\"search\" /> 搜索\n                            </Button>\n                        </Form.Item>\n                    </Col>\n                </Row>\n            </Form>\n        )\n    }\n}\n\nexport default Form.create()(SearchForm)\n\n","import React, { Component } from 'react';\nimport { observer, inject } from 'mobx-react';\nimport {Row, Form, Input, Modal} from 'antd';\nconst FormItem = Form.Item;\n\n\n@inject('TreeManagerStore')\n@observer\nclass InsertTreeModal extends Component{\n    constructor(props){\n        super(props);\n        this.state={\n        }\n    }\n\n    okModal(){\n        this.props.form.validateFieldsAndScroll((err, values) => {\n            if (!err) {\n                this.props.TreeManagerStore.insertTreeModule();\n            }\n        });\n    }\n\n    hideModal(){\n        this.props.TreeManagerStore.hideTreeModal();\n    }\n    /**\n     * 输入框和单选按钮产生的change事件\n     * @param n\n     * @param e\n     */\n    inputChange(n,e) {\n        let obj={};\n        obj[n]=e.target.value;\n        this.props.TreeManagerStore.changeTableRequestData(n,e.target.value);\n    }\n\n    render(){\n        const { getFieldDecorator } = this.props.form;\n        const { treeModalVisible,tableRequestData,modalName} = this.props\n        return (\n            <Modal\n                destroyOnClose\n                title={modalName}\n                width=\"900px\"\n                visible={treeModalVisible}\n                onOk={this.okModal.bind(this)}\n                onCancel={this.hideModal.bind(this)}\n                okText=\"保存\"\n                cancelText=\"取消\"\n                className=\"model\" width={500} >\n\n                <Form  layout=\"inline\" className=\"ant-advanced-search-form p-xs pb-0\">\n                    <Row>\n                        <FormItem {...this.formItemLayout} label=\"模块名称\" >\n                            {getFieldDecorator('name', {\n                                initialValue: tableRequestData.name,\n                                rules: [{ required: true, message: '请填写模块名称!' }],\n                            })(\n                                <Input  style={{ width: 250 }} placeholder='请填写模块名称!' onChange={this.inputChange.bind(this,'name')}/>\n                            )}\n                        </FormItem>\n                    </Row>\n                </Form>\n            </Modal>\n        )\n    }\n}\n\nexport default Form.create()(InsertTreeModal)\n","import React, {Component} from 'react';\nimport { observable, action, computed } from 'mobx';\nimport { observer, inject } from 'mobx-react';\nimport {  Icon,Tree, Popconfirm} from 'antd';\nimport InsertTreeModal from './InsertTreeModal';\nimport TreeManagerStore from \"../../stores/TreeManager/TreeManagerStore\";\n\nconst { TreeNode } = Tree;\n\n@inject('TreeManagerStore','TestCaseManagerStore','ApiManagerStore')\n@observer\nclass TreeManager extends Component {\n    componentDidMount() {\n        this.props.TreeManagerStore.getTreeAppDataSouce();\n    }\n    constructor(props){\n        super(props);\n    }\n    onSelect = (selectedKeys, info) => {\n        console.log(info)\n        let appId = info.node.props.dataRef.appId\n        let moduleId = info.node.props.dataRef.moduleId\n        let appName = info.node.props.dataRef.appName\n        let moduleName = info.node.props.dataRef.moduleName\n        let pageType = this.props.pageType\n        if(pageType == 'case'){\n            this.props.TestCaseManagerStore.initData(1,appId,moduleId)\n        }else if(pageType == \"api\"){\n            this.props.ApiManagerStore.initData(1,appId,moduleId)\n        }else if(pageType == \"insertApi\"){\n            this.props.ApiManagerStore.setTreeParams(appId,moduleId,appName,moduleName)\n        }\n    };\n    /**\n     * 新增节点\n     */\n    handleAddTree = (e,id,parentId,appId) => {\n        e.stopPropagation();\n        if (id) {\n            console.log(e.target.value)\n            this.props.TreeManagerStore.showTreeModal({\n                moduleName:\"添加模块\",\n                parentId:parentId,\n                appId:appId,\n                type:\"insert\"\n            })\n        }\n    };\n    /**\n     * 编辑节点\n     */\n    handleEditTree = (e, name,id,parentIdF,appId) => {\n        e.stopPropagation();\n        if (id) {\n            this.props.TreeManagerStore.showTreeModal({\n                id:id,\n                moduleName:\"修改模块\",\n                parentIdF:parentIdF,\n                appId:appId,\n                name:name,\n                type:\"update\"\n            });\n        }\n    };\n    /**\n     * 编辑节点\n     */\n    handleDeleteTree = (id) => {\n        if (id) {\n            this.props.TreeManagerStore.deleteTree(id)\n        }\n    };\n    /**\n     * 获取节点的title内容\n     */\n    getNodeTitle = (title, id, level,parentId,parentIdF,appId) => {\n        return (\n            <div className=\"tree-title\">\n                <span>\n                    {title}\n                </span>\n                <div className=\"tree-parent-div \">\n                    <span className=\"tree-span\" onClick={e => this.handleAddTree(e,id,parentId,appId)}>\n                       {level !== 4 &&\n                            <Icon type=\"plus-circle\" theme=\"outlined\"/>\n                       }\n                    </span>\n                    <span className=\"tree-span\"  onClick={e => this.handleEditTree(e, title,id,parentIdF,appId)}>\n                       {level != 1 &&\n                            <Icon type=\"form\" theme=\"outlined\" />\n                       }\n                    </span>\n                    <span className=\"tree-span\" >\n                         {level != 1 &&\n                              <Popconfirm title=\"确定删除此参数吗？\" onConfirm={() => this.handleDeleteTree(id)}>\n                                 <Icon type=\"delete\" theme=\"outlined\"/>\n                              </Popconfirm>\n                         }\n                    </span>\n                </div>\n            </div>\n        );\n    };\n    onLoadData = async (treeNode) => {\n        if (treeNode.props.children) {\n            return;\n        }\n        this.props.TreeManagerStore.getTreeModuleDataSouce(treeNode.props.dataRef)\n    }\n\n    renderTreeNodes = (data, level) => {\n        return (\n            data.map(item => {\n                const title = this.getNodeTitle(item.title, item.id, level,item.parentId,item.parentIdF,item.appId);\n                if (item.children) {\n                    return (\n                        <TreeNode title={title} key={item.id} dataRef={item}>\n                            {this.renderTreeNodes(item.children,level + 1)}\n                        </TreeNode>\n                    );\n                }\n                return <TreeNode {...item} title={title} key={item.id} dataRef={item} />;\n            })\n        );\n    };\n\n    render(){\n        const {treeAppDataSource,treeModalVisible,tableRequestData,modalName} = this.props.TreeManagerStore\n        return(\n            <div style={{'maxHeight':this.props.maxHeight,'overflow-y':'auto' }}>\n                <Tree onSelect={this.onSelect} loadData={this.onLoadData}>{this.renderTreeNodes(treeAppDataSource,1)}</Tree>\n                <InsertTreeModal modalName={modalName} treeModalVisible={treeModalVisible} tableRequestData={tableRequestData}></InsertTreeModal>\n            </div>\n        )\n    }\n}\n\nexport default TreeManager;","import React, {Component} from 'react';\nimport { observable, action, computed } from 'mobx';\nimport { observer, inject } from 'mobx-react';\nimport { Table,Pagination,Icon,Tree,Row, Col} from 'antd';\nimport {columns} from './config';\nimport SearchForm from './SearchForm';\nimport TreeManager from '../TreeManager/TreeManager';\nimport TreeManagerStore from \"../../stores/TreeManager/TreeManagerStore\";\nimport {message} from \"antd/lib/index\";\n\n@inject('TestCaseManagerStore','CommonStore')\n@observer\nclass TestCaseManagerList extends Component {\n    componentDidMount() {\n        this.props.setBreadcrumb([\n            {name: '用例管理'},\n        ]);\n        this.props.TestCaseManagerStore.initData(1);\n        this.props.CommonStore.getAllTags();\n        this.props.CommonStore.getAllCreators();\n    }\n    constructor(props){\n        super(props);\n        this.state= {\n            selectedRowKeys:[],\n            selectedRows:[]\n        }\n    }\n    /**\n     * 执行用例\n     */\n    batchExeCase = () => {\n        if(this.state.selectedRowKeys.length <= 0){\n            message.warn(\"请先勾选需要添加的接口\")\n        }else{\n            this.props.TestCaseManagerStore.batchExeCase(this.state.selectedRows)\n        }\n    }\n    onChangePage = page => {\n        this.props.TestCaseManagerStore.initData(page);\n    };\n    render(){\n        const {dataSource,pageNo,pageSize,totalCount} = this.props.TestCaseManagerStore\n        const mydataSource = dataSource.toJS()\n        const {allTags,allCreators} = this.props.CommonStore\n        const rowSelection = {\n            onChange: (selectedRowKeys, selectedRows) => {\n                console.log(`selectedRowKeys: ${selectedRowKeys}`, 'selectedRows: ', selectedRows);\n                this.setState({\n                    selectedRowKeys: selectedRowKeys,\n                    selectedRows: selectedRows\n                });\n            }\n        };\n        return(\n            <div className=\"container-bg\">\n                <Row>\n                    <Col span={4}>\n                        <TreeManager pageType=\"case\" maxHeight=\"700px\"/>\n                    </Col>\n                    <Col span={20}>\n                        <SearchForm allTags={allTags} allCreators={allCreators}/>\n                        <Table\n                            bordered\n                            columns={columns(this)} pagination={false}\n                            dataSource={mydataSource}  rowSelection={rowSelection}/>\n                        <Pagination onChange={this.onChangePage} pageSize={pageSize} current={pageNo}  total={totalCount} style={{'marginTop':'6px','float':'right'}}/>\n\n                    </Col>\n                </Row>\n            </div>\n        )\n    }\n}\n\nexport default TestCaseManagerList;","import React  from 'react';\nimport { Popover} from 'antd';\nimport ReactJson from 'react-json-view'\nimport common from \"../../style/common.css\";\n\nexport const columns = (context) => [\n    {\n        title: '应用',\n        dataIndex: 'appName',\n        key: 'appName',\n        width:'8%'\n    },\n\n    {\n        title: '用例名称',\n        dataIndex: 'name',\n        key: 'name',\n        width:'15%',\n        render:function(text, record){\n            var name = record.name.length > 16 ? record.name.substr(0,16) + '...' : record.name;\n            let str = <div>\n                        <span>用例ID：{record.id}</span><br/>\n                        <span>用例名称：{record.name}</span><br/>\n                        <span>更新时间：{record.editTimeStr}</span><br/>\n                        <span>创建人：{record.creatorName}</span><br/>\n                        <span>校验规则：{record.validScript}</span><br/>\n                        <span>入参：{record.paramScript}</span><br/>\n                        <span>其他参数：{record.contextParamScript}</span><br/>\n                        <span>描述：{record.desc}</span><br/>\n                        <span>接口ID：{record.apiId}</span><br/>\n                        <span>接口路径：{record.testApi.apiClassName}</span><br/>\n                        <span>方法名：{record.testApi.apiMethodName}</span><br/>\n                        <span>接口名：{record.testApi.name}</span><br/>\n                      </div>\n            return (\n                <span  >\n                    <Popover content={str} >\n                       <font color=\"#d2a216\">{name}</font>\n                    </Popover>\n                </span>\n            )\n        }\n    },\n    {\n        title: '优先级',\n        dataIndex: 'priority',\n        key: 'priority',\n        width:'8%'\n    },\n    {\n        title: '接口ID',\n        dataIndex: 'apiId',\n        key: 'apiId',\n        width:'8%',\n    },\n    {\n        title: '方法名称',\n        dataIndex: 'apiMethodName',\n        key: 'apiMethodName',\n        width:'12%',\n        render:function(text, record){\n            var name = record.testApi.apiMethodName.length > 12 ? record.testApi.apiMethodName.substr(0,12) + '...' : record.testApi.apiMethodName;\n            return (\n                <span>\n                    <Popover content={record.testApi.apiMethodName} >{name}</Popover>\n                </span>\n            )\n        }\n    },\n    {\n        title: '更新时间',\n        dataIndex: 'editTimeStr',\n        key: 'editTimeStr',\n        width:'20%'\n    },\n    {\n        title: '操作',\n        width: '23%',\n        key: 'operation',\n        render:(row,record) => {\n            let insertHref = '/edit_testcase?apiId=' + record.apiId\n            let apiHref = '/update_testcase?apiId=' + record.apiId\n            let updateHref = '/edit_testcase?apiId=' + record.apiId + \"&caseId=\" + record.id\n            return (\n                <span>\n                    <a href={updateHref} target=\"_blank\">修改用例</a>&nbsp;\n                    <a href={apiHref} target=\"_blank\" className=\"vLine\"> 查看接口</a>&nbsp;\n                    <a href={insertHref} target=\"_blank\" className=\"vLine\"> 追加用例</a>\n                </span>\n            )\n        }\n    }\n];\n\n\n\n"],"sourceRoot":""}