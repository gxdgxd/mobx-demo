{"version":3,"sources":["container/TreeManager/InsertTreeModal.js","container/TreeManager/TreeManager.js","container/ApiManager/config.js","container/ApiManager/Insert/SearchForm.js","container/ApiManager/Insert/index.js"],"names":["FormItem","Item","InsertTreeModal","inject","observer","props","state","this","form","validateFieldsAndScroll","err","values","TreeManagerStore","insertTreeModule","hideTreeModal","n","e","target","value","changeTableRequestData","getFieldDecorator","treeModalVisible","tableRequestData","modalName","destroyOnClose","title","width","visible","onOk","okModal","bind","onCancel","hideModal","okText","cancelText","className","layout","formItemLayout","label","initialValue","name","rules","required","message","style","placeholder","onChange","inputChange","Component","create","TreeNode","TreeManager","onNodeSelect","selectedKeys","info","console","log","node","appId","moduleId","appName","moduleName","level","pageType","TestCaseManagerStore","initData","ApiManagerStore","setTreeParams","onExpand","expandedKeys","setState","handleAddTree","parentId","item","stopPropagation","id","showTreeModal","type","handleEditTree","handleDeleteTree","deleteTree","getNodeTitle","onClick","theme","onConfirm","renderTree","data","map","modules","length","key","getTreeData","treeAppDataSource","maxHeight","onSelect","columns","context","dataIndex","fixed","render","text","record","substr","content","getColumnSearchProps","str","apiMethodName","apiClassName","groupId","artifactId","row","tags","tag","index","isLongTag","tagElem","color","slice","updateHref","searchCaseHref","insertCaseHref","href","insertColumns","argsTypeNames","editable","desc","insertApi","SearchForm","handleSearch","preventDefault","fetchApiByGAV","labelCol","span","wrapperCol","backgroundColor","border","onSubmit","htmlType","config","top","Index","showInput","inputVisible","input","focus","handleClose","removedTag","filter","handleInputChange","inputValue","handleInputConfirm","indexOf","saveInputRef","handleSave","newData","insertDataSource","findIndex","splice","batchInsertApi","selectedRowKeysApis","warn","selectedRowsApis","filterDropdown","setSelectedKeys","confirm","clearFilters","padding","ref","searchInput","onPressEnter","marginBottom","display","icon","size","marginRight","handleReset","filterIcon","filtered","undefined","onFilter","toString","toLowerCase","includes","onFilterDropdownVisibleChange","setTimeout","select","searchedColumn","highlightStyle","searchWords","searchText","autoEscape","textToHighlight","setBreadcrumb","array","push","components","body","EditableFormRow","cell","EditableCellForm","columnsValue","col","onCell","rowSelection","selectedRowKeys","selectedRows","treeParams","rowClassName","bordered","dataSource","EditableContext","Provider","React","createContext","editing","toggleEdit","save","validateFields","error","currentTarget","renderCell","children","margin","onBlur","restProps","Consumer"],"mappings":"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","file":"static/js/10.cd8838cf.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport { observer, inject } from 'mobx-react';\nimport {Row, Form, Input, Modal} from 'antd';\nconst FormItem = Form.Item;\n\n\n@inject('TreeManagerStore')\n@observer\nclass InsertTreeModal extends Component{\n    constructor(props){\n        super(props);\n        this.state={\n        }\n    }\n\n    okModal(){\n        this.props.form.validateFieldsAndScroll((err, values) => {\n            if (!err) {\n                this.props.TreeManagerStore.insertTreeModule();\n            }\n        });\n    }\n\n    hideModal(){\n        this.props.TreeManagerStore.hideTreeModal();\n    }\n    /**\n     * 输入框和单选按钮产生的change事件\n     * @param n\n     * @param e\n     */\n    inputChange(n,e) {\n        let obj={};\n        obj[n]=e.target.value;\n        this.props.TreeManagerStore.changeTableRequestData(n,e.target.value);\n    }\n\n    render(){\n        const { getFieldDecorator } = this.props.form;\n        const { treeModalVisible,tableRequestData,modalName} = this.props\n        return (\n            <Modal\n                destroyOnClose\n                title={modalName}\n                width=\"900px\"\n                visible={treeModalVisible}\n                onOk={this.okModal.bind(this)}\n                onCancel={this.hideModal.bind(this)}\n                okText=\"保存\"\n                cancelText=\"取消\"\n                className=\"model\" width={500} >\n\n                <Form  layout=\"inline\" className=\"ant-advanced-search-form p-xs pb-0\">\n                    <Row>\n                        <FormItem {...this.formItemLayout} label=\"模块名称\" >\n                            {getFieldDecorator('name', {\n                                initialValue: tableRequestData.name,\n                                rules: [{ required: true, message: '请填写模块名称!' }],\n                            })(\n                                <Input  style={{ width: 250 }} placeholder='请填写模块名称!' onChange={this.inputChange.bind(this,'name')}/>\n                            )}\n                        </FormItem>\n                    </Row>\n                </Form>\n            </Modal>\n        )\n    }\n}\n\nexport default Form.create()(InsertTreeModal)\n","import React, {Component} from 'react';\nimport { observable, action, computed } from 'mobx';\nimport { observer, inject } from 'mobx-react';\nimport {  Icon,Tree, Popconfirm} from 'antd';\nimport InsertTreeModal from './InsertTreeModal';\nimport TreeManagerStore from \"../../stores/TreeManager/TreeManagerStore\";\n\nconst { TreeNode } = Tree;\n\n@inject('TreeManagerStore','TestCaseManagerStore','ApiManagerStore')\n@observer\nclass TreeManager extends Component {\n    componentDidMount() {\n        this.props.TreeManagerStore.getTreeData();\n    }\n    constructor(props){\n        super(props);\n        this.state={\n            expandedKeys: []\n        }\n    }\n    onNodeSelect = (selectedKeys, info) => {\n        console.log(selectedKeys,info.node.props)\n        let level = info.node.props.level\n        let appId = \"\";\n        let moduleId = \"\"\n        let appName = \"\"\n        let moduleName = \"\"\n        if(level == 1){\n            appId = selectedKeys[0]\n            appName = info.node.props.title\n        }else{\n            appId = info.node.props.appId\n            moduleId = info.node.props.moduleId\n            appName = info.node.props.appName\n            moduleName = info.node.props.moduleName\n        }\n        console.log(\"appid\",appId,\"moduleId\",moduleId,\"appName\",appName,\"moduleName\",moduleName)\n        // let appId = info.node.props.dataRef.appId\n        // let moduleId = info.node.props.dataRef.moduleId\n        // let appName = info.node.props.dataRef.appName\n        // let moduleName = info.node.props.dataRef.moduleName\n        let pageType = this.props.pageType\n        if(pageType == 'case'){\n            this.props.TestCaseManagerStore.initData(1,appId,moduleId)\n        }\n        else if(pageType == \"api\"){\n            this.props.ApiManagerStore.initData(1,appId,moduleId)\n        }else if(pageType == \"insertApi\"){\n            this.props.ApiManagerStore.setTreeParams(appId,moduleId,appName,moduleName)\n        }else if(pageType == \"updateApi\"){\n            this.props.ApiManagerStore.setTreeParams(appId,moduleId,appName,moduleName)\n        }\n    };\n    /**\n     * 点击某个节点展开\n     */\n    onExpand = expandedKeys => {\n        this.setState({\n            expandedKeys\n        });\n    };\n\n    /**\n     * 新增节点\n     */\n    handleAddTree = (e,parentId,item) => {\n        e.stopPropagation();\n        debugger\n        if (item.id) {\n            console.log(e.target.value)\n            this.props.TreeManagerStore.showTreeModal({\n                moduleName:\"添加模块\",\n                type:\"insert\",\n                item:item,\n                parentId:parentId\n            })\n        }\n    };\n    /**\n     * 编辑节点\n     */\n    handleEditTree = (e,parentId,item) => {\n        e.stopPropagation();\n        if (item.id) {\n            this.props.TreeManagerStore.showTreeModal({\n                moduleName:\"修改模块\",\n                type:\"update\",\n                item:item,\n                parentId:parentId\n            });\n        }\n    };\n    /**\n     * 编辑节点\n     */\n    handleDeleteTree = (item) => {\n        if (item.id) {\n            this.props.TreeManagerStore.deleteTree(item)\n        }\n    };\n    /**\n     * 获取节点的title内容\n     */\n    getNodeTitle = (title, id, level,parentId,item) => {\n        return (\n            <div className=\"tree-title\">\n                <span>\n                    {title}\n                </span>\n                <div className=\"tree-parent-div \">\n                    <span className=\"tree-span\" onClick={e => this.handleAddTree(e,parentId,item)}>\n                       {level !== 5 &&\n                            <Icon type=\"plus-circle\" theme=\"outlined\"/>\n                       }\n                    </span>\n                    <span className=\"tree-span\"  onClick={e => this.handleEditTree(e,parentId,item)}>\n                       {level != 1 &&\n                            <Icon type=\"form\" theme=\"outlined\" />\n                       }\n                    </span>\n                    <span className=\"tree-span\" >\n                         {level != 1 &&\n                              <Popconfirm title=\"确定删除此参数吗？\" onConfirm={() => this.handleDeleteTree(item)}>\n                                 <Icon type=\"delete\" theme=\"outlined\"/>\n                              </Popconfirm>\n                         }\n                    </span>\n                </div>\n            </div>\n        );\n    };\n    /**\n     * 递归生成树节点\n     */\n    renderTree = (data, level, parentId) => {\n        return (\n            data &&\n            data.map(item => {\n                const title = this.getNodeTitle(item.name, item.id, level,parentId, item);\n                if (item.modules && item.modules.length > 0) {\n                    return (\n                        <TreeNode title={title} key={item.id} level={level} appId={item.appId} moduleId={item.id} appName={item.appName} moduleName={item.name} >\n                            {this.renderTree(item.modules, level + 1, item.id, item.id)}\n                        </TreeNode>\n                    );\n                }\n                return <TreeNode title={title} key={item.id} level={level} appId={item.appId} appName={item.appName} moduleId={item.id} moduleName={item.name} />;\n            })\n        );\n    };\n\n    render(){\n        const {treeAppDataSource,treeModalVisible,tableRequestData,modalName} = this.props.TreeManagerStore\n        return(\n            <div style={{'maxHeight':this.props.maxHeight,'overflow-y':'auto' }}>\n                <Tree expandedKeys={this.state.expandedKeys} onSelect={this.onNodeSelect} onExpand={this.onExpand}>{this.renderTree(treeAppDataSource,1,0)}</Tree>\n                <InsertTreeModal modalName={modalName} treeModalVisible={treeModalVisible} tableRequestData={tableRequestData}></InsertTreeModal>\n            </div>\n        )\n    }\n}\n\nexport default TreeManager;","import React  from 'react';\nimport { Icon,Tag,Input,Tooltip,Popconfirm,Popover} from 'antd';\nimport common from \"../../style/common.css\";\n\nexport const columns = (context) => [\n    {\n        title: '接口ID',\n        dataIndex: 'id',\n        key: 'id',\n        width:80,\n        fixed: 'left',\n    },\n\n    {\n        title: '接口名',\n        dataIndex: 'name',\n        key: 'name',\n        width:230,\n        render:function(text, record){\n            var name = record.name.length > 20 ? record.name.substr(0,20) + '...' : record.name;\n            return (\n                <span  >\n                    <Popover content={record.name} >\n                        {name}\n                    </Popover>\n                </span>\n            )\n        }\n    },\n    {\n        title: '应用',\n        dataIndex: 'appName',\n        key: 'appName',\n        width:100,\n        ...context.getColumnSearchProps('appName'),\n    },\n    {\n        title: '接口路径',\n        dataIndex: 'apiClassName',\n        key: 'apiClassName',\n        width:360,\n    },\n    {\n        title: '方法名',\n        dataIndex: 'apiMethodName',\n        key: 'apiMethodName',\n        width:210,\n        render:function(text, record){\n            let str = <div>\n                        <span>方法名：{record.apiMethodName}</span><br/>\n                        <span>接口路径：{record.apiClassName}</span><br/>\n                        <span>应用：{record.appName}</span><br/>\n                        <span>groupId：{record.groupId}</span><br/>\n                        <span>artifactId：{record.artifactId}</span><br/>\n                        <span>模块：{record.moduleName}</span>\n                      </div>\n            return (\n                <span>\n                    <Popover content={str} >\n                       {record.apiMethodName}\n                    </Popover>\n                </span>\n            )\n        }\n    },\n    {\n        title: '方法参数',\n        dataIndex: 'argsTypeNames',\n        key: 'argsTypeNames',\n        width:360,\n    },\n    {\n        title: '更新时间',\n        dataIndex: 'editTimeStr',\n        key: 'editTimeStr',\n        width:220,\n    },\n    {\n        title: '创建人',\n        dataIndex: 'creatorName',\n        key: 'creatorName',\n        width:150,\n    },\n    {\n        title: '标签',\n        dataIndex: 'tags',\n        key: 'tags',\n        width:230,\n        render:(row,record) => {\n\n            return (\n                <span>\n                    {record.tags.map((tag, index) => {\n                        const isLongTag = tag.length > 20;\n                        const tagElem = (\n                            <Tag key={tag.id} color=\"purple\">\n                                {isLongTag ? `${tag.value.slice(0, 20)}...` : tag.value}\n                            </Tag>\n                        );\n                        return isLongTag ? (\n                            <Tooltip title={tag.value} key={tag.id}>\n                                {tagElem}\n                            </Tooltip>\n                        ) : (\n                            tagElem\n                        );\n                    })}\n                </span>\n            )\n        }\n    },\n    {\n        title: '操作',\n        width:230,\n        key: 'operation',\n        fixed: 'right',\n        render:(row,record) => {\n            let updateHref = \"/update_api?apiId=\" + record.id\n            let searchCaseHref = \"/testcase_manager?apiId=\" + record.id\n            let insertCaseHref = \"/edit_testcase?apiId=\" + record.id\n\n            return (\n                <span>\n                    <a href={updateHref} target=\"_blank\">修改接口</a>&nbsp;\n                    <a href={searchCaseHref} target=\"_blank\" className=\"vLine\"> 查看用例</a>&nbsp;\n                    <a href={insertCaseHref} target=\"_blank\" className=\"vLine\"> 添加用例</a>\n                </span>\n            )\n        }\n    }\n];\nexport const insertColumns = (context) => [\n    {\n        title: '接口路径',\n        dataIndex: 'apiClassName',\n        key: 'apiClassName',\n        width:'30%',\n        ...context.getColumnSearchProps('apiClassName'),\n        render:function(text, record){\n            var name = record.apiClassName.length > 35 ? record.apiClassName.substr(0,35) + '...' : record.apiClassName;\n\n            let str = <div>\n                <span>接口路径：{record.apiClassName}</span><br/>\n                <span>方法名：{record.apiMethodName}</span><br/>\n                <span>参数类型：{record.argsTypeNames}</span><br/>\n            </div>\n            return (\n                <span>\n                    <Popover content={str} >\n                       {name}\n                    </Popover>\n                </span>\n            )\n        }\n    },\n    {\n        title: '方法名',\n        dataIndex: 'apiMethodName',\n        key: 'apiMethodName',\n        width:'20%',\n        ...context.getColumnSearchProps('apiMethodName'),\n        render:function(text, record){\n            return (\n                <span  >\n                    <Popover content={record.apiMethodName} >\n                        {record.apiMethodName}\n                    </Popover>\n                </span>\n            )\n        }\n    },\n\n    {\n        title: '接口名',\n        dataIndex: 'name',\n        key: 'name',\n        width:'17%',\n        editable: true,\n        render:(row,record) => {\n            if(record.name != null){\n                return (\n                    <span>{record.name}</span>\n                )\n            }else{\n                return (\n                    <span><font color=\"orange\">无</font></span>\n                )\n            }\n        }\n    },\n    {\n        title: '描述',\n        dataIndex: 'desc',\n        key: 'desc',\n        width:'17%',\n        editable: true,\n        render:(row,record) => {\n            if(record.desc != null){\n                return (\n                    <span>{record.desc}</span>\n                )\n            }else{\n                return (\n                    <span><font color=\"orange\">无</font></span>\n                )\n            }\n        }\n    },\n    // {\n    //     title: '打标签',\n    //     dataIndex: 'tag',\n    //     key: 'tag',\n    //     width:'20%',\n        // render:(row,record) => {\n        //     const {tags,inputVisible, inputValue } = context.state;\n        //\n        //     return (\n        //         <div>\n        //             {tags.map((tag, index) => {\n        //                 const isLongTag = tag.length > 20;\n        //                 const tagElem = (\n        //                     <Tag key={tag} closable  onClose={() => context.handleClose(tag)}>\n        //                         {isLongTag ? `${tag.slice(0, 20)}...` : tag}\n        //                     </Tag>\n        //                 );\n        //                 return isLongTag ? (\n        //                     <Tooltip title={tag} key={tag}>\n        //                         {tagElem}\n        //                     </Tooltip>\n        //                 ) : (\n        //                     tagElem\n        //                 );\n        //             })}\n        //             {inputVisible && (\n        //                 <Input\n        //                 ref={context.saveInputRef}\n        //                 type=\"text\"\n        //                 size=\"small\"\n        //                 style={{ width: 78 }}\n        //                 value={inputValue}\n        //                 onChange={context.handleInputChange}\n        //                 onBlur={context.handleInputConfirm}\n        //                 onPressEnter={context.handleInputConfirm}\n        //                 />\n        //             )}\n        //             {!inputVisible && (\n        //                 <Tag onClick={context.showInput} style={{ background: '#fff', borderStyle: 'dashed' }}>\n        //                     <Icon type=\"plus\" /> New Tag\n        //                 </Tag>\n        //             )}\n        //         </div>\n        //     )\n        // }\n    // },\n    {\n        title: '操作',\n        width: '7%',\n        key: 'operation',\n        render:(row,record) => {\n            return (\n                <div>\n                    <span >\n                        <Popconfirm title=\"确定添加此接口吗？\" onConfirm={() => context.insertApi(record)} >\n                            <a href=\"#\" >添加</a>\n                        </Popconfirm>\n                    </span>\n                </div>\n            )\n        }\n    }\n\n]\n\n\n","import React, { Component } from 'react';\nimport { observer, inject } from 'mobx-react';\n\nimport { Table,Divider, Button, Alert, Select,Icon, Row, Col, Form, DatePicker, Input, Modal } from 'antd';\nimport Highlighter from 'react-highlight-words';\nimport common from \"../../../style/common.css\";\n\nconst FormItem = Form.Item;\n\n\n@inject('ApiManagerStore')\n@observer\nclass SearchForm extends Component{\n    constructor(props){\n        super(props);\n        this.state={\n        }\n    }\n\n    inputChange(n,e) {\n        this.props.ApiManagerStore.changeTableRequestData(n,e.target.value);\n    }\n\n    handleSearch = (e) => {\n        e.preventDefault();\n        this.props.form.validateFieldsAndScroll((err, values) => {\n            if (!err) {\n                this.props.ApiManagerStore.fetchApiByGAV(1);\n            }\n        });\n    }\n    formItemLayout = {\n        labelCol: { span: 8 },\n        wrapperCol: { span: 13 },\n    }\n    render(){\n        const { getFieldDecorator } = this.props.form;\n\n        return (\n            <div>\n                <Alert message=\"api包信息\" type=\"info\" style={{backgroundColor:'#c7e7ff',border:'0px','marginBottom':'5px'}}/>\n                <Form layout=\"inline\"  className=\"ant-advanced-search-form p-xs pb-0\" onSubmit={this.handleSearch}>\n                    <FormItem {...this.formItemLayout} label=\"groupId\">\n                        {getFieldDecorator('groupId', {\n                            rules: [{ required: true, message: '请填写groupId!' }],\n                        })(\n                            <Input placeholder=\"请输入groupId\"  onChange={this.inputChange.bind(this,'groupId')}/>\n                        )}\n                    </FormItem>\n                    <FormItem {...this.formItemLayout} label=\"artifactId\">\n                        {getFieldDecorator('artifactId', {\n                            rules: [{ required: true, message: '请填写artifactId!' }],\n                        })(\n                            <Input placeholder=\"请输入artifactId\"  onChange={this.inputChange.bind(this,'artifactId')}/>\n                        )}\n                    </FormItem>\n                    <FormItem {...this.formItemLayout} label=\"version\">\n                        {getFieldDecorator('version', {\n                            rules: [{ required: true, message: '请选择version' }],\n                        })(\n                            <Input placeholder=\"请输入version\" onChange={this.inputChange.bind(this,'version')}/>\n                        )}\n                    </FormItem>\n                    <Form.Item>\n                        <Button type=\"primary\" htmlType=\"submit\" >\n                            <Icon type=\"search\" /> 搜索\n                        </Button>\n                    </Form.Item>\n                </Form>\n            </div>\n        )\n    }\n}\n\nexport default Form.create()(SearchForm)\n\n","import React, { Component } from 'react';\nimport { observer, inject } from 'mobx-react';\nimport { Table, Button,Tag, Alert, message, Row, Col, Form, Input,Icon, } from 'antd';\nimport SearchForm from './SearchForm';\nimport {insertColumns} from \"../config\";\nimport TreeManager from '../../TreeManager/TreeManager';\nimport Highlighter from 'react-highlight-words';\n\nconst FormItem = Form.Item;\n\nmessage.config({\n    top: 200\n});\n@inject('ApiManagerStore')\n@observer\nclass Index extends Component{\n    constructor(props){\n        super(props);\n        this.state={\n            tags: [],\n            inputVisible: false,\n            inputValue: '',\n            selectedRowKeysApis:[],\n            selectedRowsApis:[],\n            searchText: '',\n            searchedColumn: '',\n        }\n    }\n\n    componentDidMount() {\n        this.props.setBreadcrumb([\n            {name: '接口管理'},\n            {name: '添加接口'},\n        ]);\n    }\n\n    /**\n     * tag标签处理 start\n     */\n    showInput = () => {\n        this.setState({ inputVisible: true }, () => this.input.focus());\n    };\n\n    handleClose = removedTag => {\n        const tags = this.state.tags.filter(tag => tag !== removedTag);\n        console.log(tags);\n        this.setState({ tags });\n    };\n\n    handleInputChange = e => {\n        this.setState({ inputValue: e.target.value });\n    };\n\n    handleInputConfirm = () => {\n        const { inputValue } = this.state;\n        let { tags } = this.state;\n        if (inputValue && tags.indexOf(inputValue) === -1) {\n            tags = [...tags, inputValue];\n        }\n        console.log(tags);\n        this.setState({\n            tags,\n            inputVisible: false,\n            inputValue: ''\n        });\n    };\n\n    saveInputRef = input => (this.input = input);\n    /**\n     * tag标签处理 end\n     */\n\n    /**\n     * table中input输入值后触发保存\n     * @param row\n     */\n    handleSave = row => {\n        const newData = [...this.props.ApiManagerStore.insertDataSource];\n        const index = newData.findIndex(item => row.key === item.key);\n        const item = newData[index];\n        newData.splice(index, 1, {\n            ...item,\n            ...row,\n        });\n        this.props.ApiManagerStore.insertDataSource = newData\n    };\n\n    /**\n     * 单个添加接口\n     * @param record\n     */\n    insertApi(record){\n        const array = []\n        array.push(record)\n        this.props.ApiManagerStore.insertApi(array);\n    }\n\n    /**\n     * 批量添加\n     */\n    batchInsertApi = () => {\n        debugger\n\n        if(this.state.selectedRowKeysApis.length <= 0){\n            message.warn(\"请先勾选需要添加的接口\")\n        }else{\n            console.log(this.state.selectedRowKeysApis)\n            console.log(this.state.selectedRowsApis)\n            this.props.ApiManagerStore.insertApi(this.state.selectedRowsApis)\n        }\n    }\n    /**\n     * 表头搜索触发\n     * @param dataIndex\n     * @returns {{filterDropdown: (function({setSelectedKeys: *, selectedKeys?: *, confirm?: *, clearFilters?: *}): *), filterIcon: (function(*): *), onFilter: (function(*, *): boolean), onFilterDropdownVisibleChange: onFilterDropdownVisibleChange, render: (function(*): *)}}\n     */\n    getColumnSearchProps = dataIndex => ({\n        filterDropdown: ({ setSelectedKeys, selectedKeys, confirm, clearFilters }) => (\n            <div style={{ padding: 8 }}>\n                <Input\n                    ref={node => {\n                        this.searchInput = node;\n                    }}\n                    placeholder={`Search ${dataIndex}`}\n                    value={selectedKeys[0]}\n                    onChange={e => setSelectedKeys(e.target.value ? [e.target.value] : [])}\n                    onPressEnter={() => this.handleSearch(selectedKeys, confirm, dataIndex)}\n                    style={{ width: 188, marginBottom: 8, display: 'block' }}\n                />\n                <Button\n                    type=\"primary\"\n                    onClick={() => this.handleSearch(selectedKeys, confirm, dataIndex)}\n                    icon=\"search\"\n                    size=\"small\"\n                    style={{ width: 90, marginRight: 8 }}\n                >\n                    Search\n                </Button>\n                <Button onClick={() => this.handleReset(clearFilters)} size=\"small\" style={{ width: 90 }}>\n                    Reset\n                </Button>\n            </div>\n        ),\n        filterIcon: filtered => (\n            <Icon type=\"search\" style={{ color: filtered ? '#1890ff' : undefined }} />\n        ),\n        onFilter: (value, record) =>\n            record[dataIndex]\n                .toString()\n                .toLowerCase()\n                .includes(value.toLowerCase()),\n        onFilterDropdownVisibleChange: visible => {\n            if (visible) {\n                setTimeout(() => this.searchInput.select());\n            }\n        },\n        render: text =>\n            this.state.searchedColumn === dataIndex ? (\n                <Highlighter\n                    highlightStyle={{ backgroundColor: '#ffc069', padding: 0 }}\n                    searchWords={[this.state.searchText]}\n                    autoEscape\n                    textToHighlight={text.toString()}\n                />\n            ) : (\n                text\n            ),\n    });\n    handleSearch = (selectedKeys, confirm, dataIndex) => {\n        confirm();\n        this.setState({\n            searchText: selectedKeys[0],\n            searchedColumn: dataIndex,\n        });\n    };\n\n    handleReset = clearFilters => {\n        clearFilters();\n        this.setState({ searchText: '' });\n    };\n\n    /**\n     * 表头搜索触发 end\n     */\n\n    render(){\n        //可编辑单元格\n        const components = {\n            body: {\n                row: EditableFormRow,\n                cell: EditableCellForm,\n            },\n        };\n\n        const columns = insertColumns(this)\n        const columnsValue = columns.map(col => {\n            if (!col.editable) {\n                return col;\n            }\n            return {\n                ...col,\n                onCell: record => ({\n                    record,\n                    editable: col.editable,\n                    dataIndex: col.dataIndex,\n                    title: col.title,\n                    desc:col.desc,\n                    handleSave: this.handleSave,\n                }),\n            };\n        });\n        //复选框操作\n        const rowSelection = {\n            onChange: (selectedRowKeys, selectedRows) => {\n                console.log(`selectedRowKeys: ${selectedRowKeys}`, 'selectedRows: ', selectedRows);\n                this.setState({\n                    selectedRowKeysApis: selectedRowKeys,\n                    selectedRowsApis: selectedRows\n                });\n            }\n        };\n\n        const {insertDataSource,treeParams} = this.props.ApiManagerStore\n\n        console.log(treeParams.appId)\n        return (\n            <div className=\"container-bg\">\n                <Row>\n                    <Col span={4}>\n                        <TreeManager pageType=\"insertApi\" maxHeight=\"870px\"/>\n                    </Col>\n                    <Col span={20}>\n                        <SearchForm/>\n                        <Alert message=\"接口信息\" type=\"info\" style={{backgroundColor:'#c7e7ff',border:'0px',marginBottom:'13px'}}/>\n                        <Button type=\"primary\" style={{marginBottom:'10px'}}   onClick={() => this.batchInsertApi()}><Icon type=\"plus\" /> 批量添加</Button>\n                        &nbsp;&nbsp;&nbsp;&nbsp;\n                        <Tag color=\"geekblue\" style={{display: treeParams.appName != \"\" && typeof treeParams.appName != 'undefined'  ? \"\" : \"none\"}}>\n                            <span style={{display: treeParams.appName != \"\" && typeof treeParams.appName != 'undefined'  ? \"\" : \"none\"}}>接口归属应用：{treeParams.appName}</span>\n                            <span style={{display: treeParams.moduleName != \"\"  && typeof treeParams.moduleName != 'undefined' ? \"\" : \"none\"}}>，接口归属模块：{treeParams.moduleName}</span>\n                            <span>（点击左侧切换筛选）</span>\n                        </Tag>\n                        <Table components={components} rowClassName={() => 'editable-row'}\n                            bordered\n                            columns={columnsValue}\n                            dataSource={insertDataSource} rowSelection={rowSelection}/>\n                    </Col>\n                </Row>\n            </div>\n        )\n    }\n}\n\n\nexport default Form.create()(Index)\n\n/**\n * 编辑单元格\n */\nconst EditableRow = ({ form, index, ...props }) => (\n    <EditableContext.Provider value={form}>\n        <tr {...props} />\n    </EditableContext.Provider>\n);\nconst EditableFormRow = Form.create()(EditableRow);\nconst EditableContext = React.createContext();\n\n\nclass EditableCellForm extends React.Component {\n    state = {\n        editing: false,\n    };\n\n    toggleEdit = () => {\n        const editing = !this.state.editing;\n        this.setState({ editing }, () => {\n            if (editing) {\n                this.input.focus();\n            }\n        });\n    };\n\n    save = e => {\n        const { record, handleSave } = this.props;\n        this.form.validateFields((error, values) => {\n            if (error && error[e.currentTarget.id]) {\n                return;\n            }\n            this.toggleEdit();\n            handleSave({ ...record, ...values });\n        });\n    };\n\n    renderCell = form => {\n        this.form = form;\n        const { children, dataIndex, record, title } = this.props;\n        const { editing } = this.state;\n        return editing ? (\n            <FormItem style={{ margin: 0 }}>\n                {form.getFieldDecorator(dataIndex, {\n                    rules: [\n                        {\n                            required: false,\n                            message: `${title} is required.`,\n                        },\n                    ],\n                    initialValue: record[dataIndex],\n                })(<Input ref={node => (this.input = node)} onPressEnter={this.save} onBlur={this.save} />)}\n            </FormItem>\n        ) : (\n            <div\n                className=\"editable-cell-value-wrap\"\n                onClick={this.toggleEdit}>\n                {children}\n            </div>\n        );\n    };\n\n    render() {\n\n        const {\n            editable,\n            dataIndex,\n            title,\n            record,\n            index,\n            handleSave,\n            children,\n            ...restProps\n        } = this.props;\n        return (\n            <td {...restProps}>\n                {editable ? (\n                    <EditableContext.Consumer>{this.renderCell}</EditableContext.Consumer>\n                ) : (\n                    children\n                )}\n            </td>\n        );\n    }\n}\n\n\n"],"sourceRoot":""}