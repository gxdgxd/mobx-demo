{"version":3,"sources":["container/TestCaseManager/SearchForm.js","container/TreeManager/InsertTreeModal.js","container/TreeManager/TreeManager.js","container/TestCaseManager/index.js","container/TestCaseManager/config.js"],"names":["FormItem","Item","Option","SearchForm","inject","observer","props","handleSearch","TestCaseManagerStore","initData","handleCreatorSearch","value","CommonStore","getAllCreators","setState","data","handleCreatorChange","changeTableRequestData","formItemLayout","labelCol","span","wrapperCol","state","undefined","this","getAllTags","n","e","target","v","allTags","allCreators","className","gutter","label","placeholder","onChange","inputChange","bind","name","allowClear","optionChange","map","item","key","id","showSearch","style","defaultActiveFirstOption","showArrow","filterOption","onSearch","notFoundContent","d","userId","realName","type","onClick","Component","create","InsertTreeModal","form","validateFieldsAndScroll","err","values","TreeManagerStore","insertTreeModule","hideTreeModal","getFieldDecorator","treeModalVisible","tableRequestData","modalName","destroyOnClose","title","width","visible","onOk","okModal","onCancel","hideModal","okText","cancelText","layout","initialValue","rules","required","message","TreeNode","TreeManager","onSelect","selectedKeys","info","console","log","appId","node","dataRef","moduleId","appName","moduleName","pageType","ApiManagerStore","setTreeParams","handleAddTree","parentId","stopPropagation","showTreeModal","handleEditTree","parentIdF","handleDeleteTree","deleteTree","getNodeTitle","level","theme","onConfirm","onLoadData","treeNode","a","children","getTreeModuleDataSouce","renderTreeNodes","getTreeAppDataSouce","treeAppDataSource","maxHeight","loadData","TestCaseManagerList","batchExeCase","selectedRowKeys","length","warn","SceneManagerStore","insertCase","selectedRows","history","push","onChangePage","page","setBreadcrumb","dataSource","pageNo","pageSize","totalCount","mydataSource","toJS","rowSelection","bordered","columns","dataIndex","render","text","record","substr","str","editTimeStr","creatorName","validScript","paramScript","contextParamScript","desc","apiId","testApi","apiClassName","apiMethodName","content","color","row","insertHref","apiHref","updateHref","href","pagination","current","total"],"mappings":"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","file":"static/js/11.03db1540.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport { observer, inject } from 'mobx-react';\nimport {  Button, Select,Icon, Row, Col, Form, Input } from 'antd';\n\nconst FormItem = Form.Item;\nconst Option = Select.Option;\n\n@inject('TestCaseManagerStore','CommonStore')\n@observer\nclass SearchForm extends Component{\n    constructor(props){\n        super(props);\n        this.state={\n            data: [],\n            value: undefined,\n        }\n    }\n    componentDidMount() {\n        this.props.CommonStore.getAllTags();\n    }\n\n    inputChange(n,e) {\n        this.props.TestCaseManagerStore.changeTableRequestData(n,e.target.value);\n    }\n    optionChange(n,v) {\n        this.props.TestCaseManagerStore.changeTableRequestData(n,v || '');\n    }\n    handleSearch = () => {\n        this.props.TestCaseManagerStore.initData(1);\n    }\n    handleCreatorSearch = value => {\n        if (value) {\n            this.props.CommonStore.getAllCreators(value)\n        } else {\n            this.setState({ data: [] });\n        }\n    };\n\n    handleCreatorChange = value => {\n        this.setState({ value });\n        this.props.TestCaseManagerStore.changeTableRequestData('creatorId',value);\n    };\n    formItemLayout = {\n        labelCol: { span: 5 },\n        wrapperCol: { span: 19 },\n    }\n\n    render(){\n        const {allTags,allCreators} = this.props.CommonStore\n\n        return (\n            <Form className=\"ant-advanced-search-form p-xs pb-0\" >\n                <Row gutter={48}>\n                    <Col span={7}>\n                        <FormItem {...this.formItemLayout} label=\"接口ID\">\n                            <Input placeholder=\"请输入接口ID\" onChange={this.inputChange.bind(this,'apiId')}/>\n                        </FormItem>\n                    </Col>\n                    <Col span={7}>\n                        <FormItem {...this.formItemLayout} label=\"用例名\">\n                            <Input placeholder=\"请输入用例名\" onChange={this.inputChange.bind(this,'name')}/>\n                        </FormItem>\n                    </Col>\n                    <Col span={7}>\n                        <FormItem {...this.formItemLayout} label=\"标签\">\n                            <Select name=\"tagId\" allowClear={true} placeholder=\"请选择标签搜索\"\n                                    onChange={this.optionChange.bind(this,'tagId')}>\n                                {allTags.map(item => <Option key={item.id} value={item.id}>{item.value}</Option>)}\n                            </Select>\n                        </FormItem>\n                    </Col>\n                </Row>\n                <Row gutter={48}>\n                    <Col span={7}>\n                        <FormItem {...this.formItemLayout} label=\"创建人\">\n                            <Select\n                                showSearch\n                                value={this.state.value}\n                                placeholder=\"请输入真名搜索(非花名)\"\n                                style={this.props.style}\n                                defaultActiveFirstOption={false}\n                                showArrow={false}\n                                filterOption={false}\n                                onSearch={this.handleCreatorSearch}\n                                onChange={this.handleCreatorChange}\n                                notFoundContent={null}\n                            >\n                                {allCreators.map(d => <Option key={d.userId}>{d.realName}</Option>)}\n                            </Select>\n                        </FormItem>\n                    </Col>\n                    <Col span={7}>\n                        <FormItem {...this.formItemLayout} label=\"优先级\">\n                            <Select  placeholder=\"请选择优先级搜索\" onChange={this.optionChange.bind(this,'priority')}>\n                                <Option value=\"1\">1</Option>\n                                <Option value=\"2\">2</Option>\n                                <Option value=\"3\">3</Option>\n                                <Option value=\"4\">4</Option>\n                            </Select>\n                        </FormItem>\n                    </Col>\n                    <Col span={3} style={{'marginTop':'3px'}}>\n                        <Button type=\"primary\"  onClick={this.handleSearch}>\n                            <Icon type=\"search\" /> 搜索\n                        </Button>\n                    </Col>\n                </Row>\n            </Form>\n        )\n    }\n}\n\nexport default Form.create()(SearchForm)\n\n","import React, { Component } from 'react';\nimport { observer, inject } from 'mobx-react';\nimport {Row, Form, Input, Modal} from 'antd';\nconst FormItem = Form.Item;\n\n\n@inject('TreeManagerStore')\n@observer\nclass InsertTreeModal extends Component{\n    constructor(props){\n        super(props);\n        this.state={\n        }\n    }\n\n    okModal(){\n        this.props.form.validateFieldsAndScroll((err, values) => {\n            if (!err) {\n                this.props.TreeManagerStore.insertTreeModule();\n            }\n        });\n    }\n\n    hideModal(){\n        this.props.TreeManagerStore.hideTreeModal();\n    }\n    /**\n     * 输入框和单选按钮产生的change事件\n     * @param n\n     * @param e\n     */\n    inputChange(n,e) {\n        let obj={};\n        obj[n]=e.target.value;\n        this.props.TreeManagerStore.changeTableRequestData(n,e.target.value);\n    }\n\n    render(){\n        const { getFieldDecorator } = this.props.form;\n        const { treeModalVisible,tableRequestData,modalName} = this.props\n        return (\n            <Modal\n                destroyOnClose\n                title={modalName}\n                width=\"900px\"\n                visible={treeModalVisible}\n                onOk={this.okModal.bind(this)}\n                onCancel={this.hideModal.bind(this)}\n                okText=\"保存\"\n                cancelText=\"取消\"\n                className=\"model\" width={500} >\n\n                <Form  layout=\"inline\" className=\"ant-advanced-search-form p-xs pb-0\">\n                    <Row>\n                        <FormItem {...this.formItemLayout} label=\"模块名称\" >\n                            {getFieldDecorator('name', {\n                                initialValue: tableRequestData.name,\n                                rules: [{ required: true, message: '请填写模块名称!' }],\n                            })(\n                                <Input  style={{ width: 250 }} placeholder='请填写模块名称!' onChange={this.inputChange.bind(this,'name')}/>\n                            )}\n                        </FormItem>\n                    </Row>\n                </Form>\n            </Modal>\n        )\n    }\n}\n\nexport default Form.create()(InsertTreeModal)\n","import React, {Component} from 'react';\nimport { observable, action, computed } from 'mobx';\nimport { observer, inject } from 'mobx-react';\nimport {  Icon,Tree, Popconfirm} from 'antd';\nimport InsertTreeModal from './InsertTreeModal';\nimport TreeManagerStore from \"../../stores/TreeManager/TreeManagerStore\";\n\nconst { TreeNode } = Tree;\n\n@inject('TreeManagerStore','TestCaseManagerStore','ApiManagerStore')\n@observer\nclass TreeManager extends Component {\n    componentDidMount() {\n        this.props.TreeManagerStore.getTreeAppDataSouce();\n    }\n    constructor(props){\n        super(props);\n    }\n    onSelect = (selectedKeys, info) => {\n        console.log(info)\n        let appId = info.node.props.dataRef.appId\n        let moduleId = info.node.props.dataRef.moduleId\n        let appName = info.node.props.dataRef.appName\n        let moduleName = info.node.props.dataRef.moduleName\n        let pageType = this.props.pageType\n        if(pageType == 'case'){\n            this.props.TestCaseManagerStore.initData(1,appId,moduleId)\n        }else if(pageType == \"api\"){\n            this.props.ApiManagerStore.initData(1,appId,moduleId)\n        }else if(pageType == \"insertApi\"){\n            this.props.ApiManagerStore.setTreeParams(appId,moduleId,appName,moduleName)\n        }\n    };\n    /**\n     * 新增节点\n     */\n    handleAddTree = (e,id,parentId,appId) => {\n        e.stopPropagation();\n        if (id) {\n            console.log(e.target.value)\n            this.props.TreeManagerStore.showTreeModal({\n                moduleName:\"添加模块\",\n                parentId:parentId,\n                appId:appId,\n                type:\"insert\"\n            })\n        }\n    };\n    /**\n     * 编辑节点\n     */\n    handleEditTree = (e, name,id,parentIdF,appId) => {\n        e.stopPropagation();\n        if (id) {\n            this.props.TreeManagerStore.showTreeModal({\n                id:id,\n                moduleName:\"修改模块\",\n                parentIdF:parentIdF,\n                appId:appId,\n                name:name,\n                type:\"update\"\n            });\n        }\n    };\n    /**\n     * 编辑节点\n     */\n    handleDeleteTree = (id) => {\n        if (id) {\n            this.props.TreeManagerStore.deleteTree(id)\n        }\n    };\n    /**\n     * 获取节点的title内容\n     */\n    getNodeTitle = (title, id, level,parentId,parentIdF,appId) => {\n        return (\n            <div className=\"tree-title\">\n                <span>\n                    {title}\n                </span>\n                <div className=\"tree-parent-div \">\n                    <span className=\"tree-span\" onClick={e => this.handleAddTree(e,id,parentId,appId)}>\n                       {level !== 4 &&\n                            <Icon type=\"plus-circle\" theme=\"outlined\"/>\n                       }\n                    </span>\n                    <span className=\"tree-span\"  onClick={e => this.handleEditTree(e, title,id,parentIdF,appId)}>\n                       {level != 1 &&\n                            <Icon type=\"form\" theme=\"outlined\" />\n                       }\n                    </span>\n                    <span className=\"tree-span\" >\n                         {level != 1 &&\n                              <Popconfirm title=\"确定删除此参数吗？\" onConfirm={() => this.handleDeleteTree(id)}>\n                                 <Icon type=\"delete\" theme=\"outlined\"/>\n                              </Popconfirm>\n                         }\n                    </span>\n                </div>\n            </div>\n        );\n    };\n    onLoadData = async (treeNode) => {\n        if (treeNode.props.children) {\n            return;\n        }\n        this.props.TreeManagerStore.getTreeModuleDataSouce(treeNode.props.dataRef)\n    }\n\n    renderTreeNodes = (data, level) => {\n        return (\n            data.map(item => {\n                const title = this.getNodeTitle(item.title, item.id, level,item.parentId,item.parentIdF,item.appId);\n                if (item.children) {\n                    return (\n                        <TreeNode title={title} key={item.id} dataRef={item}>\n                            {this.renderTreeNodes(item.children,level + 1)}\n                        </TreeNode>\n                    );\n                }\n                return <TreeNode {...item} title={title} key={item.id} dataRef={item} />;\n            })\n        );\n    };\n\n    render(){\n        const {treeAppDataSource,treeModalVisible,tableRequestData,modalName} = this.props.TreeManagerStore\n        return(\n            <div style={{'maxHeight':this.props.maxHeight,'overflow-y':'auto' }}>\n                <Tree onSelect={this.onSelect} loadData={this.onLoadData}>{this.renderTreeNodes(treeAppDataSource,1)}</Tree>\n                <InsertTreeModal modalName={modalName} treeModalVisible={treeModalVisible} tableRequestData={tableRequestData}></InsertTreeModal>\n            </div>\n        )\n    }\n}\n\nexport default TreeManager;","import React, {Component} from 'react';\nimport { observable, action, computed } from 'mobx';\nimport { observer, inject } from 'mobx-react';\nimport { Table,Pagination,Row, Col,Button} from 'antd';\nimport {columns} from './config';\nimport SearchForm from './SearchForm';\nimport TreeManager from '../TreeManager/TreeManager';\nimport {message} from \"antd/lib/index\";\n\n@inject('TestCaseManagerStore','CommonStore','SceneManagerStore')\n@observer\nclass TestCaseManagerList extends Component {\n    componentDidMount() {\n        this.props.setBreadcrumb([\n            {name: '用例管理'},\n        ]);\n        this.props.TestCaseManagerStore.initData(1);\n\n    }\n    constructor(props){\n        super(props);\n        this.state= {\n            selectedRowKeys:[],\n            selectedRows:[]\n        }\n    }\n    /**\n     * 执行用例\n     */\n    batchExeCase = () => {\n        if(this.state.selectedRowKeys.length <= 0){\n            message.warn(\"请先勾选需要执行的用例\")\n        }else{\n            // this.props.TestCaseManagerStore.batchExeCase(this.state.selectedRows)\n            this.props.SceneManagerStore.insertCase(this.state.selectedRows);\n            this.props.history.push(\"/insert_scene\")\n        }\n    }\n    onChangePage = page => {\n        this.props.TestCaseManagerStore.initData(page);\n    };\n    render(){\n        const {dataSource,pageNo,pageSize,totalCount} = this.props.TestCaseManagerStore\n        const mydataSource = dataSource.toJS()\n        const rowSelection = {\n            onChange: (selectedRowKeys, selectedRows) => {\n                console.log(`selectedRowKeys: ${selectedRowKeys}`, 'selectedRows: ', selectedRows);\n                this.setState({\n                    selectedRowKeys: selectedRowKeys,\n                    selectedRows: selectedRows\n                });\n            }\n        };\n        return(\n            <div className=\"container-bg\">\n                <Row>\n                    <Col span={4}>\n                        <TreeManager pageType=\"case\" maxHeight=\"700px\"/>\n                    </Col>\n                    <Col span={20}>\n                        <SearchForm/>\n                        <Button type=\"primary\" style={{'marginBottom':'7px'}} onClick={this.batchExeCase} >\n                            执行用例\n                        </Button>\n\n                        <Table\n                            bordered\n                            columns={columns(this)} pagination={false}\n                            dataSource={mydataSource}  rowSelection={rowSelection}/>\n                        <Pagination onChange={this.onChangePage} pageSize={pageSize} current={pageNo}  total={totalCount} style={{'marginTop':'6px','float':'right'}}/>\n\n                    </Col>\n                </Row>\n            </div>\n        )\n    }\n}\n\nexport default TestCaseManagerList;","import React  from 'react';\nimport { Popover} from 'antd';\nimport ReactJson from 'react-json-view'\nimport common from \"../../style/common.css\";\n\nexport const columns = (context) => [\n    {\n        title: '应用',\n        dataIndex: 'appName',\n        key: 'appName',\n        width:'8%'\n    },\n\n    {\n        title: '用例名称',\n        dataIndex: 'name',\n        key: 'name',\n        width:'15%',\n        render:function(text, record){\n            var name = record.name.length > 16 ? record.name.substr(0,16) + '...' : record.name;\n            let str = <div>\n                        <span>用例ID：{record.id}</span><br/>\n                        <span>用例名称：{record.name}</span><br/>\n                        <span>更新时间：{record.editTimeStr}</span><br/>\n                        <span>创建人：{record.creatorName}</span><br/>\n                        <span>校验规则：{record.validScript}</span><br/>\n                        <span>入参：{record.paramScript}</span><br/>\n                        <span>其他参数：{record.contextParamScript}</span><br/>\n                        <span>描述：{record.desc}</span><br/>\n                        <span>接口ID：{record.apiId}</span><br/>\n                        <span>接口路径：{record.testApi.apiClassName}</span><br/>\n                        <span>方法名：{record.testApi.apiMethodName}</span><br/>\n                        <span>接口名：{record.testApi.name}</span><br/>\n                        <span>应用：{record.appName}</span><br/>\n                        <span>模块：{record.moduleName}</span>\n                      </div>\n            return (\n                <span  >\n                    <Popover content={str} >\n                       <font color=\"#d2a216\">{name}</font>\n                    </Popover>\n                </span>\n            )\n        }\n    },\n    {\n        title: '优先级',\n        dataIndex: 'priority',\n        key: 'priority',\n        width:'8%'\n    },\n    {\n        title: '接口ID',\n        dataIndex: 'apiId',\n        key: 'apiId',\n        width:'8%',\n    },\n    {\n        title: '方法名称',\n        dataIndex: 'apiMethodName',\n        key: 'apiMethodName',\n        width:'12%',\n        render:function(text, record){\n            var name = record.testApi.apiMethodName.length > 12 ? record.testApi.apiMethodName.substr(0,12) + '...' : record.testApi.apiMethodName;\n            return (\n                <span>\n                    <Popover content={record.testApi.apiMethodName} >{name}</Popover>\n                </span>\n            )\n        }\n    },\n    {\n        title: '更新时间',\n        dataIndex: 'editTimeStr',\n        key: 'editTimeStr',\n        width:'20%'\n    },\n    {\n        title: '操作',\n        width: '23%',\n        key: 'operation',\n        render:(row,record) => {\n            let insertHref = '/edit_testcase?apiId=' + record.apiId\n            let apiHref = '/update_testcase?apiId=' + record.apiId\n            let updateHref = '/edit_testcase?apiId=' + record.apiId + \"&caseId=\" + record.id\n            return (\n                <span>\n                    <a href={updateHref} target=\"_blank\">修改用例</a>&nbsp;\n                    <a href={apiHref} target=\"_blank\" className=\"vLine\"> 查看接口</a>&nbsp;\n                    <a href={insertHref} target=\"_blank\" className=\"vLine\"> 追加用例</a>\n                </span>\n            )\n        }\n    }\n];\n\n\n\n"],"sourceRoot":""}